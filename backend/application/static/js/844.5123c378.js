"use strict";(self["webpackChunkhousehold_services"]=self["webpackChunkhousehold_services"]||[]).push([[844],{844:(e,r,t)=>{t.d(r,{Er:()=>d,Uo:()=>u,YR:()=>i,xZ:()=>l,y1:()=>n});var o=t(194),a=t(997);const s=o.A.create({baseURL:"http://localhost:8080",headers:{"Content-Type":"application/json",Accept:"application/json"},withCredentials:!0});s.interceptors.request.use((e=>{const r=["/auth/login","/auth/register","/auth/logout","/api/service-types","/api/services","/api/services/public","/api/customer/services"],t=r.some((r=>e.url.includes(r))),o=localStorage.getItem("token");if(o)e.headers["Authentication-Token"]=o,e.url.includes("/auth/")||console.log(`Request to ${e.url} with token available`);else if(!t){console.warn(`No token found for request to: ${e.url}`);const r=["/login","/register","/"];r.includes(window.location.pathname)||(console.log("Redirecting to login due to missing token"),window.location.href="/login")}return e}),(e=>Promise.reject(e))),s.interceptors.response.use((e=>e),(e=>{if("Network Error"===e.message){console.error("CORS or Network error detected:",e),console.log("Request details:",e.config?.url,e.config?.method),console.log("Server URL:",s.defaults.baseURL),console.log("Request origin:",window.location.origin),console.log("Browser location:",window.location.href),e.config?.headers&&console.log("Request headers:",Object.keys(e.config.headers).map((r=>`${r}: ${e.config.headers[r]}`)));const r="Network error - This might be due to CORS issues. Please ensure the server is configured to accept requests from "+window.location.origin;s.defaults.baseURL;return Promise.reject(new Error(r))}if(console.error("Response error:",e.response?.data||e.message),e.response){const r=a.A.currentRoute.value?.path||a.A.currentRoute?.path;switch(e.response.status){case 401:console.log("401 Unauthorized response - clearing auth and redirecting"),localStorage.removeItem("token"),localStorage.removeItem("user"),"/login"!==r?a.A.push("/login").catch((e=>{"NavigationDuplicated"!==e.name&&console.error("Navigation error when redirecting to login:",e)})):console.log("Already on login page, not redirecting");break;case 403:a.A.push("/");break;case 500:console.error("Server error:",e.response.data);break;default:break}if(e.response.data?.message)return Promise.reject(new Error(e.response.data.message))}return Promise.reject(e)}));const n={async register(e){try{if("professional"===e.role&&!e.service_type)throw new Error("Professionals must select a service type.");console.log("Sending registration data:",e);const r=await s.post("/auth/register",e);return console.log("Registration response:",r.data),r.data}catch(r){throw console.error("Registration error:",r.response?.data||r.message),r.response?.data||{message:"Registration failed. Please try again."}}},async login(e){try{if(!e||!e.email||!e.password)throw console.error("Invalid login credentials:",e),new Error("Email and password are required");console.log(`Attempting login for user: ${e.email}`);const r=await s.post("/auth/login",e);if(r.data.token)return localStorage.setItem("token",r.data.token),localStorage.setItem("user",JSON.stringify(r.data.user)),console.log(`Login successful for role: ${r.data.user.role}`),r.data;throw console.error("Login response did not contain token:",r.data),new Error("Authentication failed. No token received.")}catch(r){throw console.error("Login error:",r.response?.data||r.message),r}},async logout(){try{await s.post("/auth/logout"),localStorage.removeItem("token"),localStorage.removeItem("user"),"/login"!==a.A.currentRoute.value.path&&a.A.push("/login").catch((e=>{"NavigationDuplicated"!==e.name&&console.error("Navigation error:",e)}))}catch(e){console.error("Logout error:",e.response?.data||e.message),localStorage.removeItem("token"),localStorage.removeItem("user"),"/login"!==a.A.currentRoute.value.path&&a.A.push("/login").catch((e=>{"NavigationDuplicated"!==e.name&&console.error("Navigation error:",e)}))}},getCurrentUser(){const e=localStorage.getItem("user");return e?JSON.parse(e):null}},i={async getServiceById(e){try{const r=localStorage.getItem("token");if(!r)throw new Error("No authentication token found");const t=await s.get(`/api/services/${e}`,{headers:{"Authentication-Token":r}});return t.data}catch(r){throw console.error("Error fetching service:",r),r}},async getServiceTypes(){try{console.log("Calling API for service categories...");try{const e=await s.get("/api/service-types");if(console.log("Service types API response:",e.data),Array.isArray(e.data)&&e.data.length>0)return e.data;console.warn("Service types endpoint returned empty array or invalid data")}catch(e){console.error("Service types endpoint failed:",e.message)}try{const e=await s.get("/api/debug/service-types");if(console.log("Debug service types response:",e.data),e.data.default_categories&&Array.isArray(e.data.default_categories)&&e.data.default_categories.length>0)return e.data.default_categories}catch(r){console.error("Debug service types endpoint failed:",r.message)}return console.warn("Falling back to hardcoded service types"),["AC Repair","Plumbing","Electrical","Carpentry","Painting","Cleaning","Pest Control","Appliance Repair","Moving Services","Gardening"]}catch(e){return console.error("Error fetching service types:",e),["AC Repair","Plumbing","Electrical","Carpentry","Painting","Cleaning","Pest Control","Appliance Repair","Moving Services","Gardening"]}},async getServices(){try{console.log("Fetching services...");try{const e=await s.get("/api/services/public");return console.log("Got services from public endpoint:",e.data.length),e.data}catch(e){console.warn("Public services endpoint failed, trying customer endpoint:",e.message);try{const e=await s.get("/api/customer/services");return console.log("Got services from customer endpoint:",e.data.length),e.data}catch(e){console.warn("Customer services endpoint failed, trying admin endpoint:",e.message);const r=await s.get("/api/admin/services");return console.log("Got services from admin endpoint:",r.data.length),r.data}}}catch(e){return console.error("Error fetching services:",e),[]}},async getPublicServices(){try{console.log("Fetching public services for customers...");try{const e=await s.get("/api/services/public");return console.log(`Received ${e.data.length} public services from public endpoint`),c(e.data)}catch(e){console.warn("Public services endpoint failed, trying regular services endpoint:",e.message);try{const e=await s.get("/api/services");return console.log(`Received ${e.data.length} services from general endpoint`),c(e.data)}catch(r){console.warn("General services endpoint failed, trying customer services endpoint:",r.message);try{const e=await s.get("/api/customer/services");return console.log(`Received ${e.data.length} services from customer endpoint`),c(e.data)}catch(t){console.warn("Customer services endpoint failed, trying admin endpoint as last resort:",t.message);const e=await s.get("/api/admin/services");console.log(`Received ${e.data.length} services from admin endpoint`);const r=e.data.filter((e=>!0===e.is_active||"active"===e.status));return console.log(`Filtered down to ${r.length} active services`),c(r)}}}}catch(o){throw console.error("All attempts to fetch services failed:",o),new Error("Unable to load services. Please try again later.")}},async getProfessionalRequests(){try{const e=await s.get("/api/professional/requests");return e.data.requests||[]}catch(e){throw console.error("Error fetching professional requests:",e),e}},async updateRequestStatus(e,r){try{const t=await s.put(`/api/professional/requests/${e}/status`,{status:r});return t.data.success||!1}catch(t){throw console.error(`Error updating request status to ${r}:`,t),t}},async searchServices(e={}){try{const r=new URLSearchParams;e.name&&r.append("name",e.name),e.category&&r.append("category",e.category),e.minPrice&&r.append("min_price",e.minPrice),e.maxPrice&&r.append("max_price",e.maxPrice),e.pinCode&&r.append("pin_code",e.pinCode),e.sortBy&&r.append("sort_by",e.sortBy);const t=`/api/services/search?${r.toString()}`,o=await s.get(t);return o.data.services||[]}catch(r){return console.error("Error searching services:",r),[]}},async getUserSettings(){try{const e=await s.get("/api/user/settings");return e.data.settings||{}}catch(e){return console.error("Error fetching user settings:",e),{}}},async updateUserSettings(e){try{const r=await s.put("/api/user/settings",{settings:e});return r.data.success||!1}catch(r){throw console.error("Error updating user settings:",r),r}}};function c(e){return e.map((e=>({id:e.id,name:e.name,description:e.description||"",base_price:e.base_price||e.basePrice||0,time_required:e.time_required||e.timeRequired||0,category:e.category||"General",is_active:!1!==e.is_active})))}const l={async createRequest(e){try{if(console.log("Creating service request with data:",e),!e.pin_code)throw new Error("PIN code is required");if(!e.service_id&&!e.category)throw new Error("Either service_id or category is required");const r=await s.post("/api/customer/requests",e);return console.log("Service request created successfully:",r.data),r.data}catch(r){if(console.error("Error creating request:",r),r.response?.data?.error)throw console.error("Backend error:",r.response.data.error),new Error(r.response.data.error);throw r}},async getRequests(){try{console.log("Fetching customer requests...");const e=await s.get("/api/customer/requests");return console.log(`Received ${e.data.length} customer requests`),e.data}catch(e){throw console.error("Error fetching customer requests:",e),e.response&&(console.error("Response status:",e.response.status),console.error("Response data:",e.response.data)),e}},async closeRequest(e){try{const r=await s.put(`/api/customer/requests/${e}/close`);return r.data}catch(r){throw console.error("Error closing request:",r),r}},async updateRequest(e,r){try{const t=await s.put(`/api/customer/requests/${e}`,r);return t.data}catch(t){throw console.error("Error updating request:",t),t}},async addReview(e,r){try{if(console.log(`Submitting review for request ${e}:`,r),"number"!==typeof r.rating||r.rating<1||r.rating>5)throw new Error("Rating must be a number between 1 and 5");if(!r.remarks||""===r.remarks.trim())throw new Error("Please provide comments with your review");const t=await s.post(`/api/customer/requests/${e}/review`,r);return console.log("Review submitted successfully:",t.data),t.data}catch(t){throw console.error("Error adding review:",t),t}},async getAvailableServices(){try{console.log("Fetching available services...");const e=await s.get("/api/customer/services");return e.data.map((e=>({id:e.id,name:e.name,description:e.description,base_price:e.base_price,time_required:e.time_required,category:e.category})))}catch(e){throw console.error("Error fetching services:",e),e}}},u={async getAssignments(e=null){try{const r=localStorage.getItem("token");if(!r)throw console.error("No authentication token found for getAssignments call"),new Error("No authentication token found");console.log("Fetching professional assignments",e?`with status: ${e}`:"");const t=e?{status:e}:{};console.log("API call URL: /api/professional/assignments",t);const o=await s.get("/api/professional/assignments",{params:t,headers:{"Authentication-Token":r},timeout:3e4});return console.log("Received assignments response:",o),console.log("Response data:",o.data),o.data?Array.isArray(o.data)?o.data.map((e=>(e.service||(console.warn(`Assignment ${e.id} is missing service data`),e.service={name:"Unknown Service",base_price:0}),e.customer||(console.warn(`Assignment ${e.id} is missing customer data`),e.customer={customer_name:"Unknown Customer"}),e))):(console.error("Unexpected response format:",o.data),[]):(console.error("Empty response data for assignments"),[])}catch(r){return console.error("Error fetching assignments:",r),[]}},async updateStatus(e,r){try{console.log(`Updating request ${e} status to ${r}`);const t=await s.put(`/api/professional/requests/${e}`,{status:r});return console.log("Status update response:",t.data),t.data}catch(t){throw console.error("Error updating status:",t),t}},async getProfile(){try{const r=localStorage.getItem("token");if(!r)throw new Error("No authentication token found");console.log("Fetching professional profile");const t=await s.get("/api/professional/profile");console.log("Retrieved profile data");try{const e=await s.get("/api/professional/reviews");Array.isArray(e.data)&&(t.data.reviews=e.data)}catch(e){console.error("Error fetching reviews for profile:",e),t.data.reviews=[]}return t.data}catch(r){return console.error("Error fetching profile:",r),{professional_name:"Professional",service_type:"Not specified",description:"",experience:0,is_approved:!1,average_rating:0,total_reviews:0,reviews:[]}}},async updateProfile(e){try{console.log("Updating professional profile with data:",e);const r=await s.put("/api/professional/profile",e);return console.log("Profile update response:",r.data),r.data}catch(r){throw console.error("Error updating profile:",r),r}},async getReviews(){try{const e=localStorage.getItem("token");if(!e)throw new Error("No authentication token found");console.log("Fetching professional reviews");const r=await s.get("/api/professional/reviews");return console.log("Retrieved reviews:",r.data.length),r.data}catch(e){return console.error("Error fetching reviews:",e),[]}},async updateAvailability(e){try{console.log(`Updating availability to: ${e}`);const r=await s.put("/api/professional/availability",{is_available:e});return console.log("Availability update response:",r.data),r.data}catch(r){throw console.error("Error updating availability:",r),r}},async confirmLocationExit(e){try{console.log(`Confirming exit for request: ${e}`);const r=await s.post(`/api/professional/requests/${e}/exit-location`);return console.log("Location exit confirmation response:",r.data),r.data}catch(r){throw console.error("Error confirming location exit:",r),r}},async getAvailableRequests(){try{const r=localStorage.getItem("token");if(!r)throw console.error("No authentication token found for getAvailableRequests call"),new Error("No authentication token found");let t;console.log("Fetching available service requests"),console.log("API call URL: /api/professional/available-requests");try{t=await s.get("/api/professional/available-requests",{headers:{"Authentication-Token":r},timeout:3e4}),console.log(`Primary endpoint returned ${t.data?.length||0} requests`)}catch(e){console.error("Primary endpoint failed, trying fallback:",e),t=await s.get("/api/professional/all-pending-requests",{headers:{"Authentication-Token":r},timeout:3e4}),t.data?.requests&&(console.log(`Fallback endpoint returned ${t.data.requests.length} requests`),t.data=t.data.requests)}return console.log("Received available requests:",t.data),Array.isArray(t.data)?t.data.map((e=>{const r={...e,service:e.service||e.service_info||{name:"Unknown Service",base_price:0,description:""},customer:e.customer||e.customer_info||{customer_name:"Customer",phone:"Available after accepting"},isNewRequest:!0};return r})):(console.error("Unexpected response format for available requests:",t.data),[])}catch(r){return console.error("Error fetching available requests:",r),[]}},async getAllPendingRequests(){try{const e=localStorage.getItem("token");if(!e)throw new Error("No authentication token found");console.log("Fetching ALL pending service requests (debug)");const r=await s.get("/api/professional/all-pending-requests",{headers:{"Authentication-Token":e}});return r.data}catch(e){return console.error("Error fetching all pending requests:",e),{total_count:0,requests:[]}}},async addRejectionReason(e,r){try{console.log(`Adding rejection reason for request ${e}: ${r}`);const t=localStorage.getItem("token");if(!t)throw new Error("Authentication required");const o={reason:r},a=await s.post(`/api/professional/requests/${e}/reject-reason`,o,{headers:{"Content-Type":"application/json","Authentication-Token":t},timeout:1e4});return console.log("Rejection reason added:",a.data),a.data}catch(t){throw console.error("Error adding rejection reason:",t),t.response&&(console.error("Response status:",t.response.status),console.error("Response data:",t.response.data)),t}}},d={async getUsers(e=null){try{console.log("Fetching users...");const r=localStorage.getItem("token");if(!r)throw new Error("No authentication token found");const t=e?{role:e}:{},o=await s.get("/api/admin/users",{params:t});return o.data.map((e=>(e.name||(e.name=e.username||`User ${e.id}`),e)))}catch(r){throw console.error("Error fetching users:",r.response?.data||r.message),401===r.response?.status&&console.log("Unauthorized. Please check your token."),r}},async approveUser(e){try{console.log(`Approving professional with ID: ${e}`);const r=await s.post(`/api/admin/professionals/${e}/approve`);return console.log("Professional approved:",r.data),r.data}catch(r){throw console.error("Error approving user:",r),r}},async blockUser(e,r="Violation of terms of service"){try{console.log(`Blocking user with ID: ${e}, reason: ${r}`);const t=await s.post(`/api/admin/users/${e}/block`,{reason:r});return console.log("User blocked:",t.data),t.data}catch(t){throw console.error("Error blocking user:",t),t}},async unblockUser(e){try{console.log(`Unblocking user with ID: ${e}`);const r=await s.post(`/api/admin/users/${e}/unblock`);return console.log("User unblocked:",r.data),r.data}catch(r){throw console.error("Error unblocking user:",r),r}},async getServices(){try{console.log("Fetching services...");const e=localStorage.getItem("token");if(!e)throw new Error("No authentication token found");const r=await s.get("/api/admin/services");return console.log("Services response:",r.data),r.data&&Array.isArray(r.data)?r.data.map((e=>({id:e.id,name:e.name,description:e.description||"",base_price:e.base_price||e.basePrice,timeRequired:e.timeRequired||e.time_required,category:e.category||"General",status:!1!==e.is_active?"active":"inactive"}))):[]}catch(e){throw console.error("Error fetching services:",e.response?.data||e.message),e}},async createService(e){try{const r=localStorage.getItem("token");if(!r)throw new Error("No authentication token found");const t={name:e.name,description:e.description,base_price:Number(e.base_price),time_required:Number(e.timeRequired),category:e.category||"General"},o=await s.post("/api/admin/services",t,{headers:{"Authentication-Token":r}});return o.data}catch(r){if(console.error("Error creating service:",r.response?.data||r),400===r.response?.status)throw new Error(`Validation error: ${r.response.data.message||"Invalid data"}`);throw r}},async update_service(e,r){try{const t=localStorage.getItem("token");if(!t)throw new Error("No authentication token found");const o=await s.put(`/api/admin/services/${e}`,r,{headers:{"Authentication-Token":t}});return o.data}catch(t){throw console.error("Error updating service:",t),t}},async deleteService(e){try{const r=localStorage.getItem("token");if(!r)throw new Error("No authentication token found");const t=await s.delete(`/api/admin/services/${e}`,{headers:{"Authentication-Token":r}});return"deactivated"===t.data.status?{success:!0,wasDeactivated:!0,message:t.data.message}:{success:!0,wasDeactivated:!1,message:t.data.message}}catch(r){throw console.error("Error deleting service:",r),new Error(r.response?.data?.message||"Failed to delete service")}},async getServiceRequests(e={}){try{console.log("Fetching service requests...");const r=localStorage.getItem("token");if(!r)throw new Error("No authentication token found");const t=await s.get("/api/admin/requests",{params:e});return console.log(`Retrieved ${t.data.length} service requests`),t.data}catch(r){throw console.error("Error fetching service requests:",r.response?.data||r.message),r}}}}}]);