{"ast":null,"code":"import axios from 'axios';\nimport { professionalAPI } from '@/services/api';\nexport default {\n  name: 'ProfessionalDiagnostics',\n  data() {\n    return {\n      loading: false,\n      token: localStorage.getItem('token') || '',\n      isAuthenticated: !!localStorage.getItem('token'),\n      testResults: []\n    };\n  },\n  methods: {\n    async testEndpoint(testName, apiCall) {\n      this.loading = true;\n      try {\n        console.log(`Testing endpoint: ${testName}`);\n        const token = localStorage.getItem('token');\n        if (!token) {\n          throw new Error('No authentication token found');\n        }\n        console.log(`Using token (first 10 chars): ${token.substring(0, 10)}...`);\n        const response = await apiCall();\n\n        // Log the response for debugging\n        console.log(`${testName} response:`, response);\n        this.testResults.unshift({\n          testName,\n          success: true,\n          data: response,\n          timestamp: new Date().toLocaleTimeString()\n        });\n        return true;\n      } catch (error) {\n        console.error(`${testName} failed:`, error);\n        this.testResults.unshift({\n          testName,\n          success: false,\n          error: error.message,\n          data: error.response?.data,\n          timestamp: new Date().toLocaleTimeString()\n        });\n        return false;\n      } finally {\n        this.loading = false;\n      }\n    },\n    async testGetProfile() {\n      return this.testEndpoint('Get Professional Profile', professionalAPI.getProfile);\n    },\n    async testGetAssignments() {\n      return this.testEndpoint('Get Assignments', professionalAPI.getAssignments);\n    },\n    async testGetAvailableRequests() {\n      return this.testEndpoint('Get Available Requests', professionalAPI.getAvailableRequests);\n    },\n    async testGetReviews() {\n      return this.testEndpoint('Get Reviews', professionalAPI.getReviews);\n    },\n    clearResults() {\n      this.testResults = [];\n    }\n  }\n};","map":{"version":3,"names":["axios","professionalAPI","name","data","loading","token","localStorage","getItem","isAuthenticated","testResults","methods","testEndpoint","testName","apiCall","console","log","Error","substring","response","unshift","success","timestamp","Date","toLocaleTimeString","error","message","testGetProfile","getProfile","testGetAssignments","getAssignments","testGetAvailableRequests","getAvailableRequests","testGetReviews","getReviews","clearResults"],"sources":["src/components/ProfessionalDiagnostics.vue"],"sourcesContent":["<template>\r\n  <div class=\"diagnostics-container bg-light p-4 my-3 rounded\">\r\n    <h4>API Diagnostics</h4>\r\n    <p class=\"text-muted\">Use this tool to test the professional API endpoints</p>\r\n    \r\n    <div class=\"mb-4\">\r\n      <h5>Authentication Status</h5>\r\n      <div class=\"alert\" :class=\"isAuthenticated ? 'alert-success' : 'alert-danger'\">\r\n        <strong>Token Status:</strong> {{ isAuthenticated ? 'Valid token found' : 'No valid token' }}\r\n        <div v-if=\"isAuthenticated\">\r\n          <small>Token (first 20 chars): {{ token.substring(0, 20) }}...</small>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <div class=\"row mb-4\">\r\n      <div class=\"col-md-6\">\r\n        <div class=\"card h-100\">\r\n          <div class=\"card-header\">\r\n            <h5>Test API Endpoints</h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <div class=\"list-group\">\r\n              <button @click=\"testGetProfile\" class=\"list-group-item list-group-item-action\">\r\n                Get Professional Profile\r\n              </button>\r\n              <button @click=\"testGetAssignments\" class=\"list-group-item list-group-item-action\">\r\n                Get Assignments\r\n              </button>\r\n              <button @click=\"testGetAvailableRequests\" class=\"list-group-item list-group-item-action\">\r\n                Get Available Requests\r\n              </button>\r\n              <button @click=\"testGetReviews\" class=\"list-group-item list-group-item-action\">\r\n                Get Reviews\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"col-md-6\">\r\n        <div class=\"card h-100\">\r\n          <div class=\"card-header d-flex justify-content-between align-items-center\">\r\n            <h5 class=\"mb-0\">Results</h5>\r\n            <button @click=\"clearResults\" class=\"btn btn-sm btn-outline-secondary\">Clear</button>\r\n          </div>\r\n          <div class=\"card-body\" style=\"max-height: 300px; overflow-y: auto;\">\r\n            <div v-if=\"loading\" class=\"text-center py-3\">\r\n              <div class=\"spinner-border text-primary\" role=\"status\">\r\n                <span class=\"visually-hidden\">Loading...</span>\r\n              </div>\r\n              <p class=\"mt-2\">Testing API endpoint...</p>\r\n            </div>\r\n            \r\n            <div v-else-if=\"testResults.length === 0\" class=\"text-center py-3\">\r\n              <p class=\"text-muted\">No tests run yet. Click a test button to start.</p>\r\n            </div>\r\n            \r\n            <div v-else>\r\n              <div v-for=\"(result, index) in testResults\" :key=\"index\" class=\"mb-3\">\r\n                <div class=\"alert\" :class=\"result.success ? 'alert-success' : 'alert-danger'\">\r\n                  <h6>{{ result.testName }}</h6>\r\n                  <p class=\"mb-1\"><strong>Status:</strong> {{ result.success ? 'Success' : 'Failed' }}</p>\r\n                  <p class=\"mb-1\" v-if=\"result.error\"><strong>Error:</strong> {{ result.error }}</p>\r\n                  <p class=\"mb-0\"><strong>Time:</strong> {{ result.timestamp }}</p>\r\n                </div>\r\n                <div v-if=\"result.data\">\r\n                  <strong>Response Data:</strong>\r\n                  <pre class=\"bg-dark text-light p-2 mt-1 rounded\" style=\"max-height: 200px; overflow-y: auto;\">{{ JSON.stringify(result.data, null, 2) }}</pre>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n    <div class=\"row\">\r\n      <div class=\"col-12\">\r\n        <div class=\"card\">\r\n          <div class=\"card-header\">\r\n            <h5>Backend Endpoints Reference</h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <table class=\"table table-sm\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Endpoint</th>\r\n                  <th>Method</th>\r\n                  <th>Purpose</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td><code>/api/professional/profile</code></td>\r\n                  <td>GET</td>\r\n                  <td>Get professional profile</td>\r\n                </tr>\r\n                <tr>\r\n                  <td><code>/api/professional/assignments</code></td>\r\n                  <td>GET</td>\r\n                  <td>Get assigned service requests</td>\r\n                </tr>\r\n                <tr>\r\n                  <td><code>/api/professional/available-requests</code></td>\r\n                  <td>GET</td>\r\n                  <td>Get available service requests</td>\r\n                </tr>\r\n                <tr>\r\n                  <td><code>/api/professional/requests/{id}</code></td>\r\n                  <td>PUT</td>\r\n                  <td>Update request status (accept/reject/complete)</td>\r\n                </tr>\r\n                <tr>\r\n                  <td><code>/api/professional/reviews</code></td>\r\n                  <td>GET</td>\r\n                  <td>Get professional reviews</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport { professionalAPI } from '@/services/api';\r\n\r\nexport default {\r\n  name: 'ProfessionalDiagnostics',\r\n  data() {\r\n    return {\r\n      loading: false,\r\n      token: localStorage.getItem('token') || '',\r\n      isAuthenticated: !!localStorage.getItem('token'),\r\n      testResults: []\r\n    };\r\n  },\r\n  methods: {\r\n    async testEndpoint(testName, apiCall) {\r\n      this.loading = true;\r\n      try {\r\n        console.log(`Testing endpoint: ${testName}`);\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n          throw new Error('No authentication token found');\r\n        }\r\n        console.log(`Using token (first 10 chars): ${token.substring(0, 10)}...`);\r\n        \r\n        const response = await apiCall();\r\n        \r\n        // Log the response for debugging\r\n        console.log(`${testName} response:`, response);\r\n        \r\n        this.testResults.unshift({\r\n          testName,\r\n          success: true,\r\n          data: response,\r\n          timestamp: new Date().toLocaleTimeString()\r\n        });\r\n        return true;\r\n      } catch (error) {\r\n        console.error(`${testName} failed:`, error);\r\n        this.testResults.unshift({\r\n          testName,\r\n          success: false,\r\n          error: error.message,\r\n          data: error.response?.data,\r\n          timestamp: new Date().toLocaleTimeString()\r\n        });\r\n        return false;\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n    \r\n    async testGetProfile() {\r\n      return this.testEndpoint('Get Professional Profile', professionalAPI.getProfile);\r\n    },\r\n    \r\n    async testGetAssignments() {\r\n      return this.testEndpoint('Get Assignments', professionalAPI.getAssignments);\r\n    },\r\n    \r\n    async testGetAvailableRequests() {\r\n      return this.testEndpoint('Get Available Requests', professionalAPI.getAvailableRequests);\r\n    },\r\n    \r\n    async testGetReviews() {\r\n      return this.testEndpoint('Get Reviews', professionalAPI.getReviews);\r\n    },\r\n    \r\n    clearResults() {\r\n      this.testResults = [];\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.diagnostics-container {\r\n  font-size: 0.9rem;\r\n}\r\n\r\npre {\r\n  font-size: 0.8rem;\r\n}\r\n\r\n.list-group-item {\r\n  cursor: pointer;\r\n}\r\n</style>\r\n"],"mappings":"AAgIA,OAAAA,KAAA;AACA,SAAAC,eAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,OAAA;MACAC,KAAA,EAAAC,YAAA,CAAAC,OAAA;MACAC,eAAA,IAAAF,YAAA,CAAAC,OAAA;MACAE,WAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,aAAAC,QAAA,EAAAC,OAAA;MACA,KAAAT,OAAA;MACA;QACAU,OAAA,CAAAC,GAAA,sBAAAH,QAAA;QACA,MAAAP,KAAA,GAAAC,YAAA,CAAAC,OAAA;QACA,KAAAF,KAAA;UACA,UAAAW,KAAA;QACA;QACAF,OAAA,CAAAC,GAAA,kCAAAV,KAAA,CAAAY,SAAA;QAEA,MAAAC,QAAA,SAAAL,OAAA;;QAEA;QACAC,OAAA,CAAAC,GAAA,IAAAH,QAAA,cAAAM,QAAA;QAEA,KAAAT,WAAA,CAAAU,OAAA;UACAP,QAAA;UACAQ,OAAA;UACAjB,IAAA,EAAAe,QAAA;UACAG,SAAA,MAAAC,IAAA,GAAAC,kBAAA;QACA;QACA;MACA,SAAAC,KAAA;QACAV,OAAA,CAAAU,KAAA,IAAAZ,QAAA,YAAAY,KAAA;QACA,KAAAf,WAAA,CAAAU,OAAA;UACAP,QAAA;UACAQ,OAAA;UACAI,KAAA,EAAAA,KAAA,CAAAC,OAAA;UACAtB,IAAA,EAAAqB,KAAA,CAAAN,QAAA,EAAAf,IAAA;UACAkB,SAAA,MAAAC,IAAA,GAAAC,kBAAA;QACA;QACA;MACA;QACA,KAAAnB,OAAA;MACA;IACA;IAEA,MAAAsB,eAAA;MACA,YAAAf,YAAA,6BAAAV,eAAA,CAAA0B,UAAA;IACA;IAEA,MAAAC,mBAAA;MACA,YAAAjB,YAAA,oBAAAV,eAAA,CAAA4B,cAAA;IACA;IAEA,MAAAC,yBAAA;MACA,YAAAnB,YAAA,2BAAAV,eAAA,CAAA8B,oBAAA;IACA;IAEA,MAAAC,eAAA;MACA,YAAArB,YAAA,gBAAAV,eAAA,CAAAgC,UAAA;IACA;IAEAC,aAAA;MACA,KAAAzB,WAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}