{"ast":null,"code":"import { ref, computed, onMounted, reactive } from 'vue';\nimport { professionalAPI } from '@/services/api';\nimport { useRouter } from 'vue-router';\nexport default {\n  name: 'ProfessionalDashboard',\n  setup() {\n    const router = useRouter();\n    // State\n    const user = JSON.parse(localStorage.getItem('user') || '{}');\n    const professionalName = ref(user.name || 'Professional');\n    const activeTab = ref('pending');\n    const loading = ref(true);\n    const serviceRequests = ref([]);\n    const profile = ref({\n      service_type: '',\n      experience: 0,\n      average_rating: 0,\n      total_reviews: 0,\n      is_approved: false,\n      description: '',\n      email: user.email || '',\n      phone: '',\n      date_created: new Date().toISOString()\n    });\n    const reviews = ref([]);\n    const showDetailsModal = ref(false);\n    const showProfileModal = ref(false);\n    const selectedRequest = ref(null);\n    const isAvailable = ref(true);\n    const updatingProfile = ref(false);\n    const profileForm = reactive({\n      description: '',\n      phone: '',\n      experience: 0\n    });\n    const availableRequests = ref([]);\n\n    // Computed properties\n    const pendingRequests = computed(() => serviceRequests.value.filter(req => req.status === 'pending'));\n    const inProgressRequests = computed(() => serviceRequests.value.filter(req => req.status === 'in_progress' || req.status === 'assigned'));\n    const completedRequests = computed(() => serviceRequests.value.filter(req => req.status === 'completed' || req.status === 'closed'));\n    const filteredRequests = computed(() => {\n      if (activeTab.value === 'available') {\n        return availableRequests.value;\n      } else if (activeTab.value === 'pending') {\n        return pendingRequests.value;\n      } else if (activeTab.value === 'assigned') {\n        return inProgressRequests.value;\n      } else if (activeTab.value === 'completed') {\n        return completedRequests.value;\n      }\n      return [];\n    });\n\n    // Methods\n    const fetchData = async () => {\n      loading.value = true;\n      try {\n        // Check if user has valid authentication first\n        const token = localStorage.getItem('token');\n        if (!token) {\n          console.error('No authentication token found');\n          router.push('/login');\n          return;\n        }\n\n        // Get user info from localStorage\n        const user = JSON.parse(localStorage.getItem('user') || '{}');\n        if (!user || user.role !== 'professional') {\n          console.error('User is not a professional');\n          router.push('/login');\n          return;\n        }\n\n        // Try to fetch data with better error handling\n        try {\n          const profileData = await professionalAPI.getProfile();\n          profile.value = {\n            ...profile.value,\n            ...profileData\n          };\n\n          // Initialize profile form with current values\n          profileForm.description = profileData.description || '';\n          profileForm.phone = profileData.phone || '';\n          profileForm.experience = profileData.experience || 0;\n        } catch (error) {\n          console.error('Failed to load profile data:', error);\n          // Continue with default profile values\n        }\n        try {\n          const requestsData = await professionalAPI.getAssignments();\n          serviceRequests.value = requestsData || [];\n        } catch (error) {\n          console.error('Failed to load assignments:', error);\n          serviceRequests.value = [];\n        }\n\n        // Fetch reviews with error handling\n        fetchReviews();\n\n        // Fetch available requests with error handling\n        fetchAvailableRequests();\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n      } finally {\n        loading.value = false;\n      }\n    };\n    const fetchReviews = async () => {\n      try {\n        const reviewsData = await professionalAPI.getReviews();\n        reviews.value = reviewsData || [];\n      } catch (error) {\n        console.error('Error fetching reviews:', error);\n        reviews.value = [];\n      }\n    };\n    const fetchAvailableRequests = async () => {\n      try {\n        console.log('Fetching available service requests...');\n        const response = await professionalAPI.getAvailableRequests();\n        availableRequests.value = response || [];\n        console.log(`Loaded ${availableRequests.value.length} available requests`);\n      } catch (error) {\n        console.error('Error fetching available requests:', error);\n        availableRequests.value = [];\n      }\n    };\n    const acceptRequest = async (requestId, closeModal = false) => {\n      try {\n        const result = await professionalAPI.updateStatus(requestId, 'in_progress');\n\n        // If this was an available request, refresh that list\n        if (activeTab.value === 'available') {\n          fetchAvailableRequests();\n        }\n        await fetchData();\n        if (closeModal) {\n          showDetailsModal.value = false;\n        }\n        alert('Service request accepted successfully. You can find it in the \"In Progress\" tab.');\n      } catch (error) {\n        console.error('Error accepting request:', error);\n        alert('Failed to accept request: ' + (error.message || 'Unknown error'));\n      }\n    };\n    const rejectRequest = async (requestId, closeModal = false) => {\n      if (confirm('Are you sure you want to reject this request?')) {\n        try {\n          await professionalAPI.updateStatus(requestId, 'rejected');\n          await fetchData();\n          if (closeModal) {\n            showDetailsModal.value = false;\n          }\n        } catch (error) {\n          console.error('Error rejecting request:', error);\n        }\n      }\n    };\n    const completeRequest = async (requestId, closeModal = false) => {\n      try {\n        const request = serviceRequests.value.find(r => r.id === requestId);\n\n        // Check if location exit is confirmed\n        if (!request.exited_location) {\n          // Ask for confirmation to exit location\n          if (confirm('Have you exited the customer location? This is required before completing the service.')) {\n            // If confirmed, mark as exited first\n            await professionalAPI.confirmLocationExit(requestId);\n            request.exited_location = true;\n          } else {\n            // If not confirmed, don't complete\n            alert('You must confirm you have exited the customer location before completing the service.');\n            return;\n          }\n        }\n\n        // Now complete the request\n        await professionalAPI.updateStatus(requestId, 'completed');\n        await fetchData();\n        if (closeModal) {\n          showDetailsModal.value = false;\n        }\n        alert('Service request marked as completed successfully.');\n      } catch (error) {\n        console.error('Error completing request:', error);\n        alert('Failed to complete the request: ' + (error.message || 'Unknown error'));\n      }\n    };\n    const viewRequestDetails = request => {\n      // Add the exited_location property if needed\n      selectedRequest.value = {\n        ...request,\n        exited_location: request.exited_location || false\n      };\n      showDetailsModal.value = true;\n    };\n    const updateAvailability = async () => {\n      try {\n        await professionalAPI.updateAvailability(isAvailable.value);\n        alert(`You are now ${isAvailable.value ? 'available' : 'unavailable'} for new service requests.`);\n      } catch (error) {\n        console.error('Error updating availability:', error);\n        // Revert to previous state if there was an error\n        isAvailable.value = !isAvailable.value;\n      }\n    };\n    const updateProfile = async () => {\n      try {\n        updatingProfile.value = true;\n        await professionalAPI.updateProfile(profileForm);\n\n        // Update local profile data\n        profile.value.description = profileForm.description;\n        profile.value.phone = profileForm.phone;\n        profile.value.experience = profileForm.experience;\n        alert('Profile updated successfully!');\n      } catch (error) {\n        console.error('Error updating profile:', error);\n        alert('Failed to update profile. Please try again.');\n      } finally {\n        updatingProfile.value = false;\n      }\n    };\n    const formatDate = dateString => {\n      if (!dateString) return 'N/A';\n      const date = new Date(dateString);\n      return date.toLocaleString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    };\n    const getStatusBadgeClass = status => {\n      const classes = {\n        pending: 'badge bg-warning',\n        rejected: 'badge bg-danger',\n        in_progress: 'badge bg-primary',\n        assigned: 'badge bg-info',\n        completed: 'badge bg-success',\n        closed: 'badge bg-secondary'\n      };\n      return classes[status] || 'badge bg-secondary';\n    };\n    const getEmptyStateMessage = () => {\n      if (activeTab.value === 'available') {\n        return 'No service requests available in your area. Check back later for new opportunities.';\n      } else if (activeTab.value === 'pending') {\n        return 'No new service requests available at the moment. Check back later.';\n      } else if (activeTab.value === 'assigned') {\n        return 'You have no active service assignments.';\n      } else {\n        return 'You have not completed any service requests yet.';\n      }\n    };\n\n    // Lifecycle hooks\n    onMounted(fetchData);\n    return {\n      professionalName,\n      activeTab,\n      loading,\n      serviceRequests,\n      profile,\n      reviews,\n      pendingRequests,\n      inProgressRequests,\n      completedRequests,\n      filteredRequests,\n      showDetailsModal,\n      showProfileModal,\n      selectedRequest,\n      isAvailable,\n      profileForm,\n      updatingProfile,\n      acceptRequest,\n      rejectRequest,\n      completeRequest,\n      viewRequestDetails,\n      updateAvailability,\n      updateProfile,\n      formatDate,\n      getStatusBadgeClass,\n      getEmptyStateMessage,\n      availableRequests,\n      fetchAvailableRequests\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","reactive","professionalAPI","useRouter","name","setup","router","user","JSON","parse","localStorage","getItem","professionalName","activeTab","loading","serviceRequests","profile","service_type","experience","average_rating","total_reviews","is_approved","description","email","phone","date_created","Date","toISOString","reviews","showDetailsModal","showProfileModal","selectedRequest","isAvailable","updatingProfile","profileForm","availableRequests","pendingRequests","value","filter","req","status","inProgressRequests","completedRequests","filteredRequests","fetchData","token","console","error","push","role","profileData","getProfile","requestsData","getAssignments","fetchReviews","fetchAvailableRequests","reviewsData","getReviews","log","response","getAvailableRequests","length","acceptRequest","requestId","closeModal","result","updateStatus","alert","message","rejectRequest","confirm","completeRequest","request","find","r","id","exited_location","confirmLocationExit","viewRequestDetails","updateAvailability","updateProfile","formatDate","dateString","date","toLocaleString","year","month","day","hour","minute","getStatusBadgeClass","classes","pending","rejected","in_progress","assigned","completed","closed","getEmptyStateMessage"],"sources":["src/views/ProfessionalDashboard.vue"],"sourcesContent":["<template>\r\n  <div class=\"professional-dashboard\">\r\n    <div class=\"container py-4\">\r\n      <!-- Welcome Section -->\r\n      <div class=\"row mb-4\">\r\n        <div class=\"col-lg-8\">\r\n          <h2>Welcome, {{ professionalName }}!</h2>\r\n          <p class=\"text-muted\">Manage your service assignments and view customer requests</p>\r\n          \r\n          <div class=\"stats-cards row g-3 mt-3\">\r\n            <div class=\"col-md-4\">\r\n              <div class=\"card bg-primary text-white\">\r\n                <div class=\"card-body\">\r\n                  <h6 class=\"card-title\">Pending Requests</h6>\r\n                  <h3 class=\"mb-0\">{{ pendingRequests.length }}</h3>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-4\">\r\n              <div class=\"card bg-success text-white\">\r\n                <div class=\"card-body\">\r\n                  <h6 class=\"card-title\">In Progress</h6>\r\n                  <h3 class=\"mb-0\">{{ inProgressRequests.length }}</h3>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-4\">\r\n              <div class=\"card bg-info text-white\">\r\n                <div class=\"card-body\">\r\n                  <h6 class=\"card-title\">Completed</h6>\r\n                  <h3 class=\"mb-0\">{{ completedRequests.length }}</h3>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"col-lg-4 mt-4 mt-lg-0\">\r\n          <div class=\"card\">\r\n            <div class=\"card-body\">\r\n              <h5 class=\"card-title\">Your Service Profile</h5>\r\n              <div class=\"d-flex align-items-center mb-3\">\r\n                <div class=\"rating me-2\">\r\n                  <i v-for=\"i in 5\" :key=\"i\" class=\"fas fa-star\" \r\n                     :class=\"i <= Math.round(profile.average_rating) ? 'text-warning' : 'text-muted'\"></i>\r\n                </div>\r\n                <span>{{ profile.average_rating.toFixed(1) }} / 5 ({{ profile.total_reviews }} reviews)</span>\r\n              </div>\r\n              <p class=\"mb-1\"><strong>Service:</strong> {{ profile.service_type }}</p>\r\n              <p class=\"mb-1\"><strong>Experience:</strong> {{ profile.experience }} years</p>\r\n              <p class=\"mb-0\"><strong>Status:</strong> \r\n                <span class=\"badge\" :class=\"profile.is_approved ? 'bg-success' : 'bg-warning'\">\r\n                  {{ profile.is_approved ? 'Approved' : 'Pending Approval' }}\r\n                </span>\r\n              </p>\r\n              <div class=\"mt-3\">\r\n                <button class=\"btn btn-outline-primary btn-sm\" @click=\"showProfileModal = true\">\r\n                  <i class=\"fas fa-user-edit me-1\"></i> View Full Profile\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Job Availability Toggle -->\r\n      <div class=\"card mb-4\">\r\n        <div class=\"card-body d-flex justify-content-between align-items-center\">\r\n          <div>\r\n            <h5 class=\"mb-0\">Job Availability</h5>\r\n            <p class=\"text-muted mb-0\">Toggle your availability to receive new service requests</p>\r\n          </div>\r\n          <div class=\"form-check form-switch\">\r\n            <input class=\"form-check-input\" type=\"checkbox\" id=\"availabilitySwitch\" v-model=\"isAvailable\" @change=\"updateAvailability\">\r\n            <label class=\"form-check-label\" for=\"availabilitySwitch\">\r\n              <span class=\"badge\" :class=\"isAvailable ? 'bg-success' : 'bg-secondary'\">\r\n                {{ isAvailable ? 'Available' : 'Unavailable' }}\r\n              </span>\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Requests Tabs -->\r\n      <ul class=\"nav nav-tabs mb-4\">\r\n        <li class=\"nav-item\">\r\n          <a \r\n            class=\"nav-link\" \r\n            :class=\"{ active: activeTab === 'available' }\"\r\n            @click.prevent=\"activeTab = 'available'\"\r\n            href=\"#\"\r\n          >\r\n            <i class=\"fas fa-search me-1\"></i> Available Requests\r\n            <span class=\"badge bg-primary ms-1\" v-if=\"availableRequests.length\">{{ availableRequests.length }}</span>\r\n          </a>\r\n        </li>\r\n        <li class=\"nav-item\">\r\n          <a \r\n            class=\"nav-link\" \r\n            :class=\"{ active: activeTab === 'pending' }\"\r\n            @click.prevent=\"activeTab = 'pending'\"\r\n            href=\"#\"\r\n          >\r\n            <i class=\"fas fa-clock me-1\"></i> New Requests\r\n            <span class=\"badge bg-danger ms-1\" v-if=\"pendingRequests.length\">{{ pendingRequests.length }}</span>\r\n          </a>\r\n        </li>\r\n        <li class=\"nav-item\">\r\n          <a \r\n            class=\"nav-link\" \r\n            :class=\"{ active: activeTab === 'assigned' }\"\r\n            @click.prevent=\"activeTab = 'assigned'\"\r\n            href=\"#\"\r\n          >\r\n            <i class=\"fas fa-tools me-1\"></i> In Progress\r\n          </a>\r\n        </li>\r\n        <li class=\"nav-item\">\r\n          <a \r\n            class=\"nav-link\" \r\n            :class=\"{ active: activeTab === 'completed' }\"\r\n            @click.prevent=\"activeTab = 'completed'\"\r\n            href=\"#\"\r\n          >\r\n            <i class=\"fas fa-check-circle me-1\"></i> Completed\r\n          </a>\r\n        </li>\r\n        <li class=\"nav-item\">\r\n          <a \r\n            class=\"nav-link\" \r\n            :class=\"{ active: activeTab === 'reviews' }\"\r\n            @click.prevent=\"activeTab = 'reviews'\"\r\n            href=\"#\"\r\n          >\r\n            <i class=\"fas fa-star me-1\"></i> My Reviews\r\n          </a>\r\n        </li>\r\n      </ul>\r\n\r\n      <!-- Loading State -->\r\n      <div v-if=\"loading\" class=\"text-center my-5\">\r\n        <div class=\"spinner-border text-primary\" role=\"status\">\r\n          <span class=\"visually-hidden\">Loading...</span>\r\n        </div>\r\n        <p class=\"mt-2\">Loading service requests...</p>\r\n      </div>\r\n      \r\n      <!-- Empty State -->\r\n      <div v-else-if=\"filteredRequests.length === 0 && activeTab !== 'reviews'\" class=\"text-center py-5\">\r\n        <i class=\"fas fa-inbox fa-3x text-muted mb-3\"></i>\r\n        <h5>No service requests found</h5>\r\n        <p class=\"text-muted\">{{ getEmptyStateMessage() }}</p>\r\n      </div>\r\n      \r\n      <!-- Service Requests List -->\r\n      <div v-else-if=\"activeTab !== 'reviews'\" class=\"row g-4\">\r\n        <div v-for=\"request in filteredRequests\" :key=\"request.id\" class=\"col-md-6\">\r\n          <div class=\"card h-100\">\r\n            <div class=\"card-header d-flex justify-content-between align-items-center\">\r\n              <span :class=\"getStatusBadgeClass(request.status)\">\r\n                {{ request.status }}\r\n              </span>\r\n              <span class=\"text-muted small\">\r\n                <i class=\"fas fa-calendar me-1\"></i>\r\n                {{ formatDate(request.created_at) }}\r\n              </span>\r\n            </div>\r\n            <div class=\"card-body\">\r\n              <h5 class=\"card-title\">{{ request.service.name }}</h5>\r\n              <p class=\"card-text\">\r\n                <strong>Customer:</strong> {{ request.customer.customer_name }}\r\n              </p>\r\n              <p class=\"card-text\">\r\n                <strong>Location:</strong> PIN Code {{ request.pin_code }}\r\n              </p>\r\n              <div class=\"mb-3\">\r\n                <strong>Instructions:</strong>\r\n                <p class=\"mb-0\">{{ request.special_instructions || 'No special instructions' }}</p>\r\n              </div>\r\n              \r\n              <div class=\"d-flex justify-content-end gap-2\">\r\n                <!-- Actions for pending requests -->\r\n                <template v-if=\"request.status === 'pending'\">\r\n                  <button @click=\"acceptRequest(request.id)\" class=\"btn btn-success btn-sm\">\r\n                    <i class=\"fas fa-check me-1\"></i> Accept\r\n                  </button>\r\n                  <button @click=\"rejectRequest(request.id)\" class=\"btn btn-danger btn-sm\">\r\n                    <i class=\"fas fa-times me-1\"></i> Reject\r\n                  </button>\r\n                </template>\r\n                \r\n                <!-- Actions for in-progress requests -->\r\n                <button v-if=\"request.status === 'in_progress'\" @click=\"completeRequest(request.id)\" class=\"btn btn-primary btn-sm\">\r\n                  <i class=\"fas fa-check-circle me-1\"></i> Mark as Completed\r\n                </button>\r\n                \r\n                <!-- View details button for all requests -->\r\n                <button @click=\"viewRequestDetails(request)\" class=\"btn btn-outline-secondary btn-sm\">\r\n                  <i class=\"fas fa-eye me-1\"></i> Details\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <div v-if=\"request.status === 'completed'\" class=\"card-footer text-muted\">\r\n              <div v-if=\"request.review\" class=\"mt-2\">\r\n                <strong>Customer Review:</strong>\r\n                <div class=\"d-flex align-items-center\">\r\n                  <div class=\"rating me-2\">\r\n                    <i v-for=\"i in 5\" :key=\"i\" class=\"fas fa-star\" \r\n                       :class=\"i <= request.review.rating ? 'text-warning' : 'text-muted'\"></i>\r\n                  </div>\r\n                  <span>{{ request.review.remarks }}</span>\r\n                </div>\r\n              </div>\r\n              <div v-else>\r\n                <i class=\"fas fa-star-half-alt me-1\"></i> Awaiting customer review\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Available Requests List -->\r\n      <div v-else-if=\"activeTab === 'available'\" class=\"row g-4\">\r\n        <div v-if=\"availableRequests.length === 0\" class=\"text-center py-5\">\r\n          <i class=\"fas fa-search fa-3x text-muted mb-3\"></i>\r\n          <h5>No available service requests found</h5>\r\n          <p class=\"text-muted\">Check back later for new service requests in your area.</p>\r\n        </div>\r\n        \r\n        <div v-for=\"request in availableRequests\" :key=\"request.id\" class=\"col-md-6\">\r\n          <div class=\"card h-100\">\r\n            <div class=\"card-header d-flex justify-content-between align-items-center\">\r\n              <span class=\"badge bg-info\">Available</span>\r\n              <span class=\"text-muted small\">\r\n                <i class=\"fas fa-calendar me-1\"></i>\r\n                {{ formatDate(request.created_at) }}\r\n              </span>\r\n            </div>\r\n            <div class=\"card-body\">\r\n              <h5 class=\"card-title\">{{ request.service.name }}</h5>\r\n              <p class=\"card-text\">\r\n                <strong>Location:</strong> PIN Code {{ request.pin_code }}\r\n              </p>\r\n              <div class=\"mb-3\">\r\n                <strong>Instructions:</strong>\r\n                <p class=\"mb-0\">{{ request.special_instructions || 'No special instructions' }}</p>\r\n              </div>\r\n              \r\n              <div class=\"d-flex justify-content-end gap-2\">\r\n                <button @click=\"acceptRequest(request.id)\" class=\"btn btn-success btn-sm\">\r\n                  <i class=\"fas fa-check me-1\"></i> Accept\r\n                </button>\r\n                <button @click=\"viewRequestDetails(request)\" class=\"btn btn-outline-secondary btn-sm\">\r\n                  <i class=\"fas fa-eye me-1\"></i> Details\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Reviews Tab Content -->\r\n      <div v-if=\"activeTab === 'reviews'\" class=\"reviews-tab\">\r\n        <div v-if=\"reviews.length === 0\" class=\"text-center py-5\">\r\n          <i class=\"fas fa-star fa-3x text-muted mb-3\"></i>\r\n          <h5>No Reviews Yet</h5>\r\n          <p class=\"text-muted\">Complete service requests to receive customer reviews</p>\r\n        </div>\r\n\r\n        <div v-else class=\"card\">\r\n          <div class=\"card-header bg-white\">\r\n            <div class=\"d-flex justify-content-between align-items-center\">\r\n              <h5 class=\"mb-0\">Customer Reviews</h5>\r\n              <div class=\"rating-summary\">\r\n                <span class=\"badge bg-primary rounded-pill\">\r\n                  <i class=\"fas fa-star me-1\"></i> {{ profile.average_rating.toFixed(1) }}/5\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"card-body p-0\">\r\n            <div class=\"list-group list-group-flush\">\r\n              <div v-for=\"review in reviews\" :key=\"review.id\" class=\"list-group-item\">\r\n                <div class=\"d-flex justify-content-between align-items-start mb-2\">\r\n                  <div>\r\n                    <h6 class=\"mb-0\">{{ review.customer_name }}</h6>\r\n                    <small class=\"text-muted\">{{ formatDate(review.date_created) }}</small>\r\n                  </div>\r\n                  <div class=\"rating\">\r\n                    <i v-for=\"i in 5\" :key=\"i\" class=\"fas fa-star\" \r\n                       :class=\"i <= review.rating ? 'text-warning' : 'text-muted'\"></i>\r\n                  </div>\r\n                </div>\r\n                <p class=\"mb-0\">{{ review.remarks }}</p>\r\n                <small class=\"text-muted\">Service: {{ review.service_name }}</small>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Request Details Modal -->\r\n    <div class=\"modal fade\" :class=\"{ show: showDetailsModal }\" v-if=\"showDetailsModal\">\r\n      <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\">Request Details</h5>\r\n            <button type=\"button\" class=\"btn-close\" @click=\"showDetailsModal = false\"></button>\r\n          </div>\r\n          <div class=\"modal-body\" v-if=\"selectedRequest\">\r\n            <div class=\"mb-3\">\r\n              <h6>Service Information</h6>\r\n              <p class=\"mb-1\"><strong>Service:</strong> {{ selectedRequest.service.name }}</p>\r\n              <p class=\"mb-1\"><strong>Price:</strong> ₹{{ selectedRequest.service.base_price }}</p>\r\n              <p><strong>Status:</strong> \r\n                <span :class=\"getStatusBadgeClass(selectedRequest.status)\">\r\n                  {{ selectedRequest.status }}\r\n                </span>\r\n              </p>\r\n            </div>\r\n            \r\n            <div class=\"mb-3\">\r\n              <h6>Customer Information</h6>\r\n              <p class=\"mb-1\"><strong>Name:</strong> {{ selectedRequest.customer.customer_name }}</p>\r\n              <p class=\"mb-1\"><strong>Phone:</strong> {{ selectedRequest.customer.phone }}</p>\r\n              <p class=\"mb-1\"><strong>PIN Code:</strong> {{ selectedRequest.pin_code }}</p>\r\n              <p class=\"mb-0\">\r\n                <strong>Address:</strong> {{ selectedRequest.customer.address }}\r\n              </p>\r\n            </div>\r\n            \r\n            <div class=\"mb-3\">\r\n              <h6>Timeline</h6>\r\n              <ul class=\"timeline\">\r\n                <li class=\"mb-2\"><strong>Created:</strong> {{ formatDate(selectedRequest.created_at) }}</li>\r\n                <li v-if=\"selectedRequest.accepted_at\" class=\"mb-2\">\r\n                  <strong>Accepted:</strong> {{ formatDate(selectedRequest.accepted_at) }}\r\n                </li>\r\n                <li v-if=\"selectedRequest.completed_at\" class=\"mb-2\">\r\n                  <strong>Completed:</strong> {{ formatDate(selectedRequest.completed_at) }}\r\n                </li>\r\n                <li v-if=\"selectedRequest.closed_at\">\r\n                  <strong>Closed:</strong> {{ formatDate(selectedRequest.closed_at) }}\r\n                </li>\r\n              </ul>\r\n            </div>\r\n            \r\n            <div class=\"mb-0\">\r\n              <h6>Special Instructions</h6>\r\n              <p class=\"mb-0\">{{ selectedRequest.special_instructions || 'No special instructions provided.' }}</p>\r\n            </div>\r\n\r\n            <div v-if=\"selectedRequest.status === 'in_progress'\" class=\"mt-3\">\r\n              <div class=\"form-check\">\r\n                <input class=\"form-check-input\" type=\"checkbox\" id=\"exitedLocation\" v-model=\"selectedRequest.exited_location\">\r\n                <label class=\"form-check-label\" for=\"exitedLocation\">\r\n                  I have exited the customer location\r\n                </label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" @click=\"showDetailsModal = false\">Close</button>\r\n            \r\n            <!-- Action buttons based on status -->\r\n            <template v-if=\"selectedRequest && selectedRequest.status === 'pending'\">\r\n              <button @click=\"acceptRequest(selectedRequest.id, true)\" class=\"btn btn-success\">\r\n                <i class=\"fas fa-check me-1\"></i> Accept\r\n              </button>\r\n              <button @click=\"rejectRequest(selectedRequest.id, true)\" class=\"btn btn-danger\">\r\n                <i class=\"fas fa-times me-1\"></i> Reject\r\n              </button>\r\n            </template>\r\n            \r\n            <button v-if=\"selectedRequest && selectedRequest.status === 'in_progress'\" \r\n                    @click=\"completeRequest(selectedRequest.id, true)\" \r\n                    class=\"btn btn-primary\"\r\n                    :disabled=\"!selectedRequest.exited_location\">\r\n              <i class=\"fas fa-check-circle me-1\"></i> Mark as Completed\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Profile Modal -->\r\n    <div class=\"modal fade\" :class=\"{ show: showProfileModal }\" v-if=\"showProfileModal\">\r\n      <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\">Professional Profile</h5>\r\n            <button type=\"button\" class=\"btn-close\" @click=\"showProfileModal = false\"></button>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            <div class=\"row\">\r\n              <div class=\"col-md-4 text-center mb-4 mb-md-0\">\r\n                <div class=\"avatar-container mb-3\">\r\n                  <img src=\"https://via.placeholder.com/150\" alt=\"Profile\" class=\"rounded-circle img-thumbnail\">\r\n                </div>\r\n                <h4>{{ professionalName }}</h4>\r\n                <div class=\"rating mb-2\">\r\n                  <i v-for=\"i in 5\" :key=\"i\" class=\"fas fa-star\" \r\n                    :class=\"i <= Math.round(profile.average_rating) ? 'text-warning' : 'text-muted'\"></i>\r\n                  <span class=\"ms-1\">{{ profile.average_rating.toFixed(1) }}/5</span>\r\n                </div>\r\n                <p class=\"badge bg-primary\">{{ profile.service_type }}</p>\r\n              </div>\r\n              \r\n              <div class=\"col-md-8\">\r\n                <div class=\"mb-3\">\r\n                  <h6>About Me</h6>\r\n                  <p>{{ profile.description || 'No description provided.' }}</p>\r\n                </div>\r\n                \r\n                <div class=\"row\">\r\n                  <div class=\"col-md-6 mb-3\">\r\n                    <h6>Experience</h6>\r\n                    <p>{{ profile.experience }} years</p>\r\n                  </div>\r\n                  <div class=\"col-md-6 mb-3\">\r\n                    <h6>Joined</h6>\r\n                    <p>{{ formatDate(profile.date_created) }}</p>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div class=\"mb-3\">\r\n                  <h6>Specialization</h6>\r\n                  <p>{{ profile.service_type }}</p>\r\n                </div>\r\n                \r\n                <div class=\"mb-3\">\r\n                  <h6>Contact Information</h6>\r\n                  <p class=\"mb-1\"><i class=\"fas fa-envelope me-2\"></i> {{ profile.email }}</p>\r\n                  <p class=\"mb-0\"><i class=\"fas fa-phone me-2\"></i> {{ profile.phone || 'Not provided' }}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <hr>\r\n            \r\n            <div class=\"profile-edit-section\">\r\n              <h5 class=\"mb-3\">Edit Profile</h5>\r\n              <form @submit.prevent=\"updateProfile\">\r\n                <div class=\"mb-3\">\r\n                  <label class=\"form-label\">Description</label>\r\n                  <textarea v-model=\"profileForm.description\" class=\"form-control\" rows=\"3\"></textarea>\r\n                </div>\r\n                \r\n                <div class=\"row\">\r\n                  <div class=\"col-md-6 mb-3\">\r\n                    <label class=\"form-label\">Phone</label>\r\n                    <input type=\"tel\" v-model=\"profileForm.phone\" class=\"form-control\">\r\n                  </div>\r\n                  <div class=\"col-md-6 mb-3\">\r\n                    <label class=\"form-label\">Experience (years)</label>\r\n                    <input type=\"number\" v-model=\"profileForm.experience\" class=\"form-control\" min=\"0\">\r\n                  </div>\r\n                </div>\r\n                \r\n                <div class=\"text-end\">\r\n                  <button type=\"submit\" class=\"btn btn-primary\" :disabled=\"updatingProfile\">\r\n                    <span v-if=\"updatingProfile\" class=\"spinner-border spinner-border-sm me-1\"></span>\r\n                    Save Changes\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, computed, onMounted, reactive } from 'vue';\r\nimport { professionalAPI } from '@/services/api';\r\nimport { useRouter } from 'vue-router';\r\n\r\nexport default {\r\n  name: 'ProfessionalDashboard',\r\n  setup() {\r\n    const router = useRouter();\r\n    // State\r\n    const user = JSON.parse(localStorage.getItem('user') || '{}');\r\n    const professionalName = ref(user.name || 'Professional');\r\n    const activeTab = ref('pending');\r\n    const loading = ref(true);\r\n    const serviceRequests = ref([]);\r\n    const profile = ref({\r\n      service_type: '',\r\n      experience: 0,\r\n      average_rating: 0,\r\n      total_reviews: 0,\r\n      is_approved: false,\r\n      description: '',\r\n      email: user.email || '',\r\n      phone: '',\r\n      date_created: new Date().toISOString()\r\n    });\r\n    const reviews = ref([]);\r\n    const showDetailsModal = ref(false);\r\n    const showProfileModal = ref(false);\r\n    const selectedRequest = ref(null);\r\n    const isAvailable = ref(true);\r\n    const updatingProfile = ref(false);\r\n    const profileForm = reactive({\r\n      description: '',\r\n      phone: '',\r\n      experience: 0\r\n    });\r\n    const availableRequests = ref([]);\r\n\r\n    // Computed properties\r\n    const pendingRequests = computed(() => \r\n      serviceRequests.value.filter(req => req.status === 'pending')\r\n    );\r\n    \r\n    const inProgressRequests = computed(() => \r\n      serviceRequests.value.filter(req => req.status === 'in_progress' || req.status === 'assigned')\r\n    );\r\n    \r\n    const completedRequests = computed(() => \r\n      serviceRequests.value.filter(req => req.status === 'completed' || req.status === 'closed')\r\n    );\r\n    \r\n    const filteredRequests = computed(() => {\r\n      if (activeTab.value === 'available') {\r\n        return availableRequests.value;\r\n      } else if (activeTab.value === 'pending') {\r\n        return pendingRequests.value;\r\n      } else if (activeTab.value === 'assigned') {\r\n        return inProgressRequests.value;\r\n      } else if (activeTab.value === 'completed') {\r\n        return completedRequests.value;\r\n      }\r\n      return [];\r\n    });\r\n\r\n    // Methods\r\n    const fetchData = async () => {\r\n      loading.value = true;\r\n      try {\r\n        // Check if user has valid authentication first\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n          console.error('No authentication token found');\r\n          router.push('/login');\r\n          return;\r\n        }\r\n\r\n        // Get user info from localStorage\r\n        const user = JSON.parse(localStorage.getItem('user') || '{}');\r\n        if (!user || user.role !== 'professional') {\r\n          console.error('User is not a professional');\r\n          router.push('/login');\r\n          return;\r\n        }\r\n\r\n        // Try to fetch data with better error handling\r\n        try {\r\n          const profileData = await professionalAPI.getProfile();\r\n          profile.value = {\r\n            ...profile.value,\r\n            ...profileData\r\n          };\r\n          \r\n          // Initialize profile form with current values\r\n          profileForm.description = profileData.description || '';\r\n          profileForm.phone = profileData.phone || '';\r\n          profileForm.experience = profileData.experience || 0;\r\n        } catch (error) {\r\n          console.error('Failed to load profile data:', error);\r\n          // Continue with default profile values\r\n        }\r\n\r\n        try {\r\n          const requestsData = await professionalAPI.getAssignments();\r\n          serviceRequests.value = requestsData || [];\r\n        } catch (error) {\r\n          console.error('Failed to load assignments:', error);\r\n          serviceRequests.value = [];\r\n        }\r\n        \r\n        // Fetch reviews with error handling\r\n        fetchReviews();\r\n        \r\n        // Fetch available requests with error handling\r\n        fetchAvailableRequests();\r\n      } catch (error) {\r\n        console.error('Error fetching dashboard data:', error);\r\n      } finally {\r\n        loading.value = false;\r\n      }\r\n    };\r\n\r\n    const fetchReviews = async () => {\r\n      try {\r\n        const reviewsData = await professionalAPI.getReviews();\r\n        reviews.value = reviewsData || [];\r\n      } catch (error) {\r\n        console.error('Error fetching reviews:', error);\r\n        reviews.value = [];\r\n      }\r\n    };\r\n\r\n    const fetchAvailableRequests = async () => {\r\n      try {\r\n        console.log('Fetching available service requests...');\r\n        const response = await professionalAPI.getAvailableRequests();\r\n        availableRequests.value = response || [];\r\n        console.log(`Loaded ${availableRequests.value.length} available requests`);\r\n      } catch (error) {\r\n        console.error('Error fetching available requests:', error);\r\n        availableRequests.value = [];\r\n      }\r\n    };\r\n\r\n    const acceptRequest = async (requestId, closeModal = false) => {\r\n      try {\r\n        const result = await professionalAPI.updateStatus(requestId, 'in_progress');\r\n        \r\n        // If this was an available request, refresh that list\r\n        if (activeTab.value === 'available') {\r\n          fetchAvailableRequests();\r\n        }\r\n        \r\n        await fetchData();\r\n        \r\n        if (closeModal) {\r\n          showDetailsModal.value = false;\r\n        }\r\n        \r\n        alert('Service request accepted successfully. You can find it in the \"In Progress\" tab.');\r\n      } catch (error) {\r\n        console.error('Error accepting request:', error);\r\n        alert('Failed to accept request: ' + (error.message || 'Unknown error'));\r\n      }\r\n    };\r\n\r\n    const rejectRequest = async (requestId, closeModal = false) => {\r\n      if (confirm('Are you sure you want to reject this request?')) {\r\n        try {\r\n          await professionalAPI.updateStatus(requestId, 'rejected');\r\n          await fetchData();\r\n          if (closeModal) {\r\n            showDetailsModal.value = false;\r\n          }\r\n        } catch (error) {\r\n          console.error('Error rejecting request:', error);\r\n        }\r\n      }\r\n    };\r\n\r\n    const completeRequest = async (requestId, closeModal = false) => {\r\n      try {\r\n        const request = serviceRequests.value.find(r => r.id === requestId);\r\n        \r\n        // Check if location exit is confirmed\r\n        if (!request.exited_location) {\r\n          // Ask for confirmation to exit location\r\n          if (confirm('Have you exited the customer location? This is required before completing the service.')) {\r\n            // If confirmed, mark as exited first\r\n            await professionalAPI.confirmLocationExit(requestId);\r\n            request.exited_location = true;\r\n          } else {\r\n            // If not confirmed, don't complete\r\n            alert('You must confirm you have exited the customer location before completing the service.');\r\n            return;\r\n          }\r\n        }\r\n        \r\n        // Now complete the request\r\n        await professionalAPI.updateStatus(requestId, 'completed');\r\n        await fetchData();\r\n        \r\n        if (closeModal) {\r\n          showDetailsModal.value = false;\r\n        }\r\n        \r\n        alert('Service request marked as completed successfully.');\r\n      } catch (error) {\r\n        console.error('Error completing request:', error);\r\n        alert('Failed to complete the request: ' + (error.message || 'Unknown error'));\r\n      }\r\n    };\r\n\r\n    const viewRequestDetails = (request) => {\r\n      // Add the exited_location property if needed\r\n      selectedRequest.value = {\r\n        ...request,\r\n        exited_location: request.exited_location || false\r\n      };\r\n      showDetailsModal.value = true;\r\n    };\r\n\r\n    const updateAvailability = async () => {\r\n      try {\r\n        await professionalAPI.updateAvailability(isAvailable.value);\r\n        alert(`You are now ${isAvailable.value ? 'available' : 'unavailable'} for new service requests.`);\r\n      } catch (error) {\r\n        console.error('Error updating availability:', error);\r\n        // Revert to previous state if there was an error\r\n        isAvailable.value = !isAvailable.value;\r\n      }\r\n    };\r\n\r\n    const updateProfile = async () => {\r\n      try {\r\n        updatingProfile.value = true;\r\n        await professionalAPI.updateProfile(profileForm);\r\n        \r\n        // Update local profile data\r\n        profile.value.description = profileForm.description;\r\n        profile.value.phone = profileForm.phone;\r\n        profile.value.experience = profileForm.experience;\r\n        \r\n        alert('Profile updated successfully!');\r\n      } catch (error) {\r\n        console.error('Error updating profile:', error);\r\n        alert('Failed to update profile. Please try again.');\r\n      } finally {\r\n        updatingProfile.value = false;\r\n      }\r\n    };\r\n\r\n    const formatDate = (dateString) => {\r\n      if (!dateString) return 'N/A';\r\n      const date = new Date(dateString);\r\n      return date.toLocaleString('en-US', {\r\n        year: 'numeric',\r\n        month: 'short',\r\n        day: 'numeric',\r\n        hour: '2-digit',\r\n        minute: '2-digit'\r\n      });\r\n    };\r\n\r\n    const getStatusBadgeClass = (status) => {\r\n      const classes = {\r\n        pending: 'badge bg-warning',\r\n        rejected: 'badge bg-danger',\r\n        in_progress: 'badge bg-primary',\r\n        assigned: 'badge bg-info',\r\n        completed: 'badge bg-success',\r\n        closed: 'badge bg-secondary'\r\n      };\r\n      return classes[status] || 'badge bg-secondary';\r\n    };\r\n\r\n    const getEmptyStateMessage = () => {\r\n      if (activeTab.value === 'available') {\r\n        return 'No service requests available in your area. Check back later for new opportunities.';\r\n      } else if (activeTab.value === 'pending') {\r\n        return 'No new service requests available at the moment. Check back later.';\r\n      } else if (activeTab.value === 'assigned') {\r\n        return 'You have no active service assignments.';\r\n      } else {\r\n        return 'You have not completed any service requests yet.';\r\n      }\r\n    };\r\n\r\n    // Lifecycle hooks\r\n    onMounted(fetchData);\r\n\r\n    return {\r\n      professionalName,\r\n      activeTab,\r\n      loading,\r\n      serviceRequests,\r\n      profile,\r\n      reviews,\r\n      pendingRequests,\r\n      inProgressRequests,\r\n      completedRequests,\r\n      filteredRequests,\r\n      showDetailsModal,\r\n      showProfileModal,\r\n      selectedRequest,\r\n      isAvailable,\r\n      profileForm,\r\n      updatingProfile,\r\n      acceptRequest,\r\n      rejectRequest,\r\n      completeRequest,\r\n      viewRequestDetails,\r\n      updateAvailability,\r\n      updateProfile,\r\n      formatDate,\r\n      getStatusBadgeClass,\r\n      getEmptyStateMessage,\r\n      availableRequests,\r\n      fetchAvailableRequests\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.professional-dashboard {\r\n  background-color: #f8f9fa;\r\n  min-height: 100vh;\r\n}\r\n\r\n.card {\r\n  border: none;\r\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\r\n  transition: transform 0.2s, box-shadow 0.2s;\r\n}\r\n\r\n.card:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.nav-tabs .nav-link {\r\n  cursor: pointer;\r\n  padding: 0.75rem 1rem;\r\n}\r\n\r\n.badge {\r\n  padding: 0.5em 0.8em;\r\n  font-weight: 500;\r\n}\r\n\r\n.modal.show {\r\n  display: block;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n}\r\n\r\n.rating {\r\n  display: inline-block;\r\n}\r\n\r\n.rating .fas {\r\n  color: #e0e0e0;\r\n}\r\n\r\n.rating .fas.text-warning {\r\n  color: #ffc107;\r\n}\r\n\r\n.timeline {\r\n  list-style: none;\r\n  padding-left: 0;\r\n}\r\n\r\n.timeline li {\r\n  position: relative;\r\n  padding-left: 1.5rem;\r\n}\r\n\r\n.timeline li:before {\r\n  content: \"\";\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0.5rem;\r\n  width: 0.5rem;\r\n  height: 0.5rem;\r\n  border-radius: 50%;\r\n  background-color: #0d6efd;\r\n}\r\n\r\n.avatar-container {\r\n  width: 150px;\r\n  height: 150px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.avatar-container img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n}\r\n\r\n.form-check-input[type=\"checkbox\"] {\r\n  width: 1.25em;\r\n  height: 1.25em;\r\n}\r\n\r\n.list-group-item {\r\n  border-left: none;\r\n  border-right: none;\r\n}\r\n\r\n/* Responsive adjustments */\r\n@media (max-width: 768px) {\r\n  .stats-cards {\r\n    margin-top: 1.5rem;\r\n  }\r\n  \r\n  .card-title {\r\n    font-size: 0.9rem;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}