{"ast":null,"code":"import axios from 'axios';\nimport router from '@/router';\n\n// Create axios instance with custom config\nconst api = axios.create({\n  baseURL: 'http://localhost:8080',\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  withCredentials: true // Important for CORS with credentials\n});\n\n// Request interceptor - fixed\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    // Flask-Security expects raw token without 'Bearer' prefix\n    config.headers['Authentication-Token'] = token;\n\n    // Add Authorization header too for APIs that might expect it\n    // config.headers['Authorization'] = `Bearer ${token}`;\n\n    console.log(`Request to ${config.url} with token: ${token.substring(0, 15)}...`);\n  } else {\n    console.warn(`No token found for request to: ${config.url}`);\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Response interceptor\napi.interceptors.response.use(response => response, error => {\n  console.error('Response error:', error.response?.data || error.message);\n  if (error.response) {\n    switch (error.response.status) {\n      case 401:\n        // Unauthorized - clear storage and redirect to login\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        router.push('/login');\n        break;\n      case 403:\n        // Forbidden - redirect to home\n        router.push('/');\n        break;\n      case 500:\n        console.error('Server error:', error.response.data);\n        break;\n    }\n    // Return the error message from the backend if available\n    if (error.response.data && error.response.data.message) {\n      return Promise.reject(new Error(error.response.data.message));\n    }\n  }\n  return Promise.reject(error);\n});\n\n// API Services\n// API Services\nexport const authService = {\n  async register(userData) {\n    try {\n      // Ensure professionals have a selected service type\n      if (userData.role === 'professional' && !userData.service_type) {\n        throw new Error(\"Professionals must select a service type.\");\n      }\n      console.log('Sending registration data:', userData);\n      const response = await api.post('/auth/register', userData);\n      console.log('Registration response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Registration error:', error.response?.data || error.message);\n\n      // Capture and return specific backend errors\n      throw error.response?.data || {\n        message: \"Registration failed. Please try again.\"\n      };\n    }\n  },\n  async login(credentials) {\n    try {\n      console.log('Attempting login:', credentials);\n      const response = await api.post('/auth/login', credentials);\n      if (response.data.token) {\n        localStorage.setItem('token', response.data.token);\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n\n        // Simplified navigation\n        const path = `/${response.data.user.role}/dashboard`;\n        router.push(path).catch(err => {\n          console.error('Navigation error:', err);\n        });\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Login error:', error.response?.data || error.message);\n      throw error;\n    }\n  },\n  async logout() {\n    try {\n      await api.post('/auth/logout');\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n\n      // Only navigate if not already on login page\n      if (router.currentRoute.path !== '/login') {\n        router.push('/login').catch(err => {\n          if (err.name !== 'NavigationDuplicated') {\n            console.error('Navigation error:', err);\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Logout error:', error.response?.data || error.message);\n      // Still clear local storage and redirect even if API call fails\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n\n      // Only navigate if not already on login page\n      if (router.currentRoute.path !== '/login') {\n        router.push('/login').catch(err => {\n          if (err.name !== 'NavigationDuplicated') {\n            console.error('Navigation error:', err);\n          }\n        });\n      }\n    }\n  },\n  getCurrentUser() {\n    const userStr = localStorage.getItem('user');\n    return userStr ? JSON.parse(userStr) : null;\n  }\n};\nexport const serviceAPI = {\n  async getServiceById(id) {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      const response = await api.get(`/api/services/${id}`, {\n        headers: {\n          'Authentication-Token': token\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching service:', error);\n      throw error;\n    }\n  },\n  // Add a new method to fetch service types directly\n  async getServiceTypes() {\n    try {\n      console.log('Calling API for service categories...');\n      const response = await api.get('/api/service-types');\n      console.log('Service types API response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching service types:', error);\n      throw error;\n    }\n  },\n  async getServices() {\n    try {\n      console.log('Fetching services...');\n      // Use admin services endpoint since we need all services\n      const response = await api.get('/api/admin/services');\n      console.log(`Received ${response.data.length} services`);\n\n      // Format the services to match expected format\n      return response.data.map(service => ({\n        id: service.id,\n        name: service.name,\n        description: service.description || '',\n        base_price: service.base_price || service.basePrice,\n        time_required: service.time_required || service.timeRequired || 0,\n        category: service.category || 'General',\n        is_active: service.is_active !== false\n      }));\n    } catch (error) {\n      console.error('Error fetching services:', error);\n      throw error;\n    }\n  },\n  // Enhanced version of getPublicServices with multiple fallbacks\n  async getPublicServices() {\n    try {\n      console.log('Fetching public services for customers...');\n\n      // Try the dedicated public endpoint first\n      try {\n        const response = await api.get('/api/services/public');\n        console.log(`Received ${response.data.length} public services from public endpoint`);\n        return formatServiceData(response.data);\n      } catch (publicError) {\n        console.warn('Public services endpoint failed, trying regular services endpoint:', publicError.message);\n\n        // Try the general services endpoint second\n        try {\n          const generalResponse = await api.get('/api/services');\n          console.log(`Received ${generalResponse.data.length} services from general endpoint`);\n          return formatServiceData(generalResponse.data);\n        } catch (generalError) {\n          console.warn('General services endpoint failed, trying customer services endpoint:', generalError.message);\n\n          // Try customer-specific endpoint third\n          try {\n            const customerResponse = await api.get('/api/customer/services');\n            console.log(`Received ${customerResponse.data.length} services from customer endpoint`);\n            return formatServiceData(customerResponse.data);\n          } catch (customerError) {\n            console.warn('Customer services endpoint failed, trying admin endpoint as last resort:', customerError.message);\n\n            // Last resort - try admin endpoint but only return active services\n            const adminResponse = await api.get('/api/admin/services');\n            console.log(`Received ${adminResponse.data.length} services from admin endpoint`);\n            const activeServices = adminResponse.data.filter(service => service.is_active === true || service.status === 'active');\n            console.log(`Filtered down to ${activeServices.length} active services`);\n            return formatServiceData(activeServices);\n          }\n        }\n      }\n    } catch (error) {\n      console.error('All attempts to fetch services failed:', error);\n      throw new Error('Unable to load services. Please try again later.');\n    }\n  }\n};\n\n// Helper function to standardize service data format\nfunction formatServiceData(services) {\n  return services.map(service => ({\n    id: service.id,\n    name: service.name,\n    description: service.description || '',\n    base_price: service.base_price || service.basePrice || 0,\n    time_required: service.time_required || service.timeRequired || 0,\n    category: service.category || 'General',\n    is_active: service.is_active !== false // Default to active if not specified\n  }));\n}\nexport const customerAPI = {\n  async createRequest(data) {\n    try {\n      console.log('Creating service request with data:', data);\n\n      // Validate the data before sending to server\n      if (!data.pin_code) {\n        throw new Error('PIN code is required');\n      }\n      if (!data.service_id && !data.category) {\n        throw new Error('Either service_id or category is required');\n      }\n      const response = await api.post('/api/customer/requests', data);\n      console.log('Service request created successfully:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating request:', error);\n      // Enhanced error reporting\n      if (error.response?.data?.error) {\n        console.error('Backend error:', error.response.data.error);\n        throw new Error(error.response.data.error);\n      }\n      throw error;\n    }\n  },\n  async getRequests() {\n    try {\n      console.log('Fetching customer requests...');\n      const response = await api.get('/api/customer/requests');\n      console.log(`Received ${response.data.length} customer requests`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching customer requests:', error);\n      // Add more detailed logging for debugging\n      if (error.response) {\n        console.error('Response status:', error.response.status);\n        console.error('Response data:', error.response.data);\n      }\n      throw error;\n    }\n  },\n  async closeRequest(requestId) {\n    try {\n      const response = await api.put(`/api/customer/requests/${requestId}/close`);\n      return response.data;\n    } catch (error) {\n      console.error('Error closing request:', error);\n      throw error;\n    }\n  },\n  // Enhanced updateRequest method with additional parameters\n  async updateRequest(requestId, data) {\n    try {\n      const response = await api.put(`/api/customer/requests/${requestId}`, data);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating request:', error);\n      throw error;\n    }\n  },\n  // Enhanced addReview method with additional parameters\n  async addReview(requestId, reviewData) {\n    try {\n      const response = await api.post(`/api/customer/requests/${requestId}/review`, reviewData);\n      return response.data;\n    } catch (error) {\n      console.error('Error adding review:', error);\n      throw error;\n    }\n  },\n  async getAvailableServices() {\n    try {\n      console.log('Fetching available services...');\n      const response = await api.get('/api/customer/services');\n      return response.data.map(service => ({\n        id: service.id,\n        name: service.name,\n        description: service.description,\n        base_price: service.base_price,\n        time_required: service.time_required,\n        category: service.category\n      }));\n    } catch (error) {\n      console.error('Error fetching services:', error);\n      throw error;\n    }\n  }\n};\nexport const professionalAPI = {\n  async getAssignments(status = null) {\n    try {\n      console.log('Fetching professional assignments', status ? `with status: ${status}` : '');\n      const params = status ? {\n        status\n      } : {};\n      const response = await api.get('/api/professional/assignments', {\n        params\n      });\n      console.log('Received assignments:', response.data.length);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching assignments:', error);\n      throw error;\n    }\n  },\n  async updateStatus(requestId, status) {\n    try {\n      console.log(`Updating request ${requestId} status to ${status}`);\n      const response = await api.put(`/api/professional/requests/${requestId}`, {\n        status\n      });\n      console.log('Status update response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating status:', error);\n      throw error;\n    }\n  },\n  async getProfile() {\n    try {\n      console.log('Fetching professional profile');\n      const response = await api.get('/api/professional/profile');\n      console.log('Retrieved profile data');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching profile:', error);\n      throw error;\n    }\n  },\n  async updateProfile(data) {\n    try {\n      console.log('Updating professional profile with data:', data);\n      const response = await api.put('/api/professional/profile', data);\n      console.log('Profile update response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      throw error;\n    }\n  },\n  async getReviews() {\n    try {\n      console.log('Fetching professional reviews');\n      const response = await api.get('/api/professional/reviews');\n      console.log('Retrieved reviews:', response.data.length);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching reviews:', error);\n      throw error;\n    }\n  },\n  async updateAvailability(isAvailable) {\n    try {\n      console.log(`Updating availability to: ${isAvailable}`);\n      const response = await api.put('/api/professional/availability', {\n        is_available: isAvailable\n      });\n      console.log('Availability update response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating availability:', error);\n      throw error;\n    }\n  },\n  async confirmLocationExit(requestId) {\n    try {\n      console.log(`Confirming exit for request: ${requestId}`);\n      const response = await api.post(`/api/professional/requests/${requestId}/exit-location`);\n      console.log('Location exit confirmation response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error confirming location exit:', error);\n      throw error;\n    }\n  }\n};\nexport const adminAPI = {\n  async getUsers(role = null) {\n    try {\n      console.log('Fetching users...');\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      const params = role ? {\n        role\n      } : {};\n      const response = await api.get('/api/admin/users', {\n        params\n      });\n\n      // Ensure users have the 'name' property for display\n      return response.data.map(user => {\n        if (!user.name) {\n          // Set a fallback name if none is provided\n          user.name = user.username || `User ${user.id}`;\n        }\n        return user;\n      });\n    } catch (error) {\n      console.error('Error fetching users:', error.response?.data || error.message);\n      if (error.response?.status === 401) {\n        console.log('Unauthorized. Please check your token.');\n      }\n      throw error;\n    }\n  },\n  async approveUser(userId) {\n    try {\n      console.log(`Approving professional with ID: ${userId}`);\n      const response = await api.post(`/api/admin/professionals/${userId}/approve`);\n      console.log('Professional approved:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error approving user:', error);\n      throw error;\n    }\n  },\n  async blockUser(userId, reason = 'Violation of terms of service') {\n    try {\n      console.log(`Blocking user with ID: ${userId}, reason: ${reason}`);\n      const response = await api.post(`/api/admin/users/${userId}/block`, {\n        reason\n      });\n      console.log('User blocked:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error blocking user:', error);\n      throw error;\n    }\n  },\n  async unblockUser(userId) {\n    try {\n      console.log(`Unblocking user with ID: ${userId}`);\n      const response = await api.post(`/api/admin/users/${userId}/unblock`);\n      console.log('User unblocked:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error unblocking user:', error);\n      throw error;\n    }\n  },\n  async getServices() {\n    try {\n      console.log('Fetching services...');\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      const response = await api.get('/api/admin/services');\n      console.log('Services response:', response.data); // Add debugging\n\n      // If backend already sends camelCase fields, return directly\n      if (response.data && Array.isArray(response.data)) {\n        // Make sure each service has the expected format\n        return response.data.map(service => ({\n          id: service.id,\n          name: service.name,\n          description: service.description || '',\n          base_price: service.base_price || service.basePrice,\n          timeRequired: service.timeRequired || service.time_required,\n          category: service.category || 'General',\n          status: service.is_active !== false ? 'active' : 'inactive'\n        }));\n      }\n      return [];\n    } catch (error) {\n      console.error('Error fetching services:', error.response?.data || error.message);\n      throw error;\n    }\n  },\n  async createService(serviceData) {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      const formattedData = {\n        name: serviceData.name,\n        description: serviceData.description,\n        base_price: Number(serviceData.base_price),\n        time_required: Number(serviceData.timeRequired),\n        category: serviceData.category || 'General'\n      };\n      const response = await api.post('/api/admin/services', formattedData, {\n        headers: {\n          'Authentication-Token': token\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error creating service:', error.response?.data || error);\n      if (error.response?.status === 400) {\n        throw new Error(`Validation error: ${error.response.data.message || 'Invalid data'}`);\n      }\n      throw error;\n    }\n  },\n  async update_service(serviceId, serviceData) {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      const response = await api.put(`/api/admin/services/${serviceId}`, serviceData, {\n        headers: {\n          'Authentication-Token': token\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error updating service:', error);\n      throw error;\n    }\n  },\n  async deleteService(serviceId) {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      const response = await api.delete(`/api/admin/services/${serviceId}`, {\n        headers: {\n          'Authentication-Token': token\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting service:', error);\n      throw error;\n    }\n  },\n  async getServiceRequests(params = {}) {\n    try {\n      console.log('Fetching service requests...');\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      const response = await api.get('/api/admin/requests', {\n        params\n      });\n      console.log(`Retrieved ${response.data.length} service requests`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching service requests:', error.response?.data || error.message);\n      throw error;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","router","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","token","localStorage","getItem","console","log","url","substring","warn","error","Promise","reject","response","data","message","status","removeItem","push","Error","authService","register","userData","role","service_type","post","login","credentials","setItem","JSON","stringify","user","path","catch","err","logout","currentRoute","name","getCurrentUser","userStr","parse","serviceAPI","getServiceById","id","get","getServiceTypes","getServices","length","map","service","description","base_price","basePrice","time_required","timeRequired","category","is_active","getPublicServices","formatServiceData","publicError","generalResponse","generalError","customerResponse","customerError","adminResponse","activeServices","filter","services","customerAPI","createRequest","pin_code","service_id","getRequests","closeRequest","requestId","put","updateRequest","addReview","reviewData","getAvailableServices","professionalAPI","getAssignments","params","updateStatus","getProfile","updateProfile","getReviews","updateAvailability","isAvailable","is_available","confirmLocationExit","adminAPI","getUsers","username","approveUser","userId","blockUser","reason","unblockUser","Array","isArray","createService","serviceData","formattedData","Number","update_service","serviceId","deleteService","delete","getServiceRequests"],"sources":["C:/Users/91829/OneDrive/Documents/VS CODE/Household_service_22f3000082/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios'\r\nimport router from '@/router'\r\n\r\n// Create axios instance with custom config\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:8080',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json'\r\n    \r\n  },\r\n  withCredentials: true // Important for CORS with credentials\r\n})\r\n\r\n// Request interceptor - fixed\r\napi.interceptors.request.use(config => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    // Flask-Security expects raw token without 'Bearer' prefix\r\n    config.headers['Authentication-Token'] = token;\r\n    \r\n    // Add Authorization header too for APIs that might expect it\r\n    // config.headers['Authorization'] = `Bearer ${token}`;\r\n    \r\n    console.log(`Request to ${config.url} with token: ${token.substring(0, 15)}...`);\r\n  } else {\r\n    console.warn(`No token found for request to: ${config.url}`);\r\n  }\r\n  return config;\r\n}, error => Promise.reject(error));\r\n\r\n// Response interceptor\r\napi.interceptors.response.use(\r\n  response => response,\r\n  error => {\r\n    console.error('Response error:', error.response?.data || error.message)\r\n    if (error.response) {\r\n      switch (error.response.status) {\r\n        case 401:\r\n          // Unauthorized - clear storage and redirect to login\r\n          localStorage.removeItem('token')\r\n          localStorage.removeItem('user')\r\n          router.push('/login')\r\n          break\r\n        case 403:\r\n          // Forbidden - redirect to home\r\n          router.push('/')\r\n          break\r\n        case 500:\r\n          console.error('Server error:', error.response.data)\r\n          break\r\n      }\r\n      // Return the error message from the backend if available\r\n      if (error.response.data && error.response.data.message) {\r\n        return Promise.reject(new Error(error.response.data.message))\r\n      }\r\n    }\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// API Services\r\n// API Services\r\nexport const authService = {\r\n  async register(userData) {\r\n    try {\r\n      // Ensure professionals have a selected service type\r\n      if (userData.role === 'professional' && !userData.service_type) {\r\n        throw new Error(\"Professionals must select a service type.\");\r\n      }\r\n\r\n      console.log('Sending registration data:', userData);\r\n\r\n      const response = await api.post('/auth/register', userData);\r\n\r\n      console.log('Registration response:', response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Registration error:', error.response?.data || error.message);\r\n\r\n      // Capture and return specific backend errors\r\n      throw error.response?.data || { message: \"Registration failed. Please try again.\" };\r\n    }\r\n  },\r\n\r\n  async login(credentials) {\r\n    try {\r\n      console.log('Attempting login:', credentials)\r\n      const response = await api.post('/auth/login', credentials)\r\n      \r\n      if (response.data.token) {\r\n        localStorage.setItem('token', response.data.token)\r\n        localStorage.setItem('user', JSON.stringify(response.data.user))\r\n        \r\n        // Simplified navigation\r\n        const path = `/${response.data.user.role}/dashboard`\r\n        router.push(path).catch(err => {\r\n          console.error('Navigation error:', err)\r\n        })\r\n      }\r\n      \r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Login error:', error.response?.data || error.message)\r\n      throw error\r\n    }\r\n  },\r\n\r\n  async logout() {\r\n    try {\r\n      await api.post('/auth/logout')\r\n      localStorage.removeItem('token')\r\n      localStorage.removeItem('user')\r\n\r\n      // Only navigate if not already on login page\r\n      if (router.currentRoute.path !== '/login') {\r\n      router.push('/login').catch(err => {\r\n          if (err.name !== 'NavigationDuplicated') {\r\n            console.error('Navigation error:', err)\r\n          }\r\n        })\r\n      }\r\n    } catch (error) {\r\n      console.error('Logout error:', error.response?.data || error.message)\r\n      // Still clear local storage and redirect even if API call fails\r\n      localStorage.removeItem('token')\r\n      localStorage.removeItem('user')\r\n\r\n      // Only navigate if not already on login page\r\n      if (router.currentRoute.path !== '/login') {\r\n      router.push('/login').catch(err => {\r\n          if (err.name !== 'NavigationDuplicated') {\r\n            console.error('Navigation error:', err)\r\n          }\r\n        })\r\n      }\r\n    }\r\n  },\r\n\r\n  getCurrentUser() {\r\n    const userStr = localStorage.getItem('user')\r\n    return userStr ? JSON.parse(userStr) : null\r\n  }\r\n}\r\n\r\nexport const serviceAPI = {\r\n  async getServiceById(id) {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n\r\n      const response = await api.get(`/api/services/${id}`, {\r\n        headers: {\r\n          'Authentication-Token': token\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching service:', error)\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  // Add a new method to fetch service types directly\r\n  async getServiceTypes() {\r\n    try {\r\n      console.log('Calling API for service categories...');\r\n      const response = await api.get('/api/service-types');\r\n      console.log('Service types API response:', response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching service types:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  async getServices() {\r\n    try {\r\n      console.log('Fetching services...');\r\n      // Use admin services endpoint since we need all services\r\n      const response = await api.get('/api/admin/services');\r\n      console.log(`Received ${response.data.length} services`);\r\n      \r\n      // Format the services to match expected format\r\n      return response.data.map(service => ({\r\n        id: service.id,\r\n        name: service.name,\r\n        description: service.description || '',\r\n        base_price: service.base_price || service.basePrice,\r\n        time_required: service.time_required || service.timeRequired || 0,\r\n        category: service.category || 'General',\r\n        is_active: service.is_active !== false\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching services:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  // Enhanced version of getPublicServices with multiple fallbacks\r\n  async getPublicServices() {\r\n    try {\r\n      console.log('Fetching public services for customers...');\r\n      \r\n      // Try the dedicated public endpoint first\r\n      try {\r\n        const response = await api.get('/api/services/public');\r\n        console.log(`Received ${response.data.length} public services from public endpoint`);\r\n        return formatServiceData(response.data);\r\n      } catch (publicError) {\r\n        console.warn('Public services endpoint failed, trying regular services endpoint:', publicError.message);\r\n        \r\n        // Try the general services endpoint second\r\n        try {\r\n          const generalResponse = await api.get('/api/services');\r\n          console.log(`Received ${generalResponse.data.length} services from general endpoint`);\r\n          return formatServiceData(generalResponse.data);\r\n        } catch (generalError) {\r\n          console.warn('General services endpoint failed, trying customer services endpoint:', generalError.message);\r\n          \r\n          // Try customer-specific endpoint third\r\n          try {\r\n            const customerResponse = await api.get('/api/customer/services');\r\n            console.log(`Received ${customerResponse.data.length} services from customer endpoint`);\r\n            return formatServiceData(customerResponse.data);\r\n          } catch (customerError) {\r\n            console.warn('Customer services endpoint failed, trying admin endpoint as last resort:', customerError.message);\r\n            \r\n            // Last resort - try admin endpoint but only return active services\r\n            const adminResponse = await api.get('/api/admin/services');\r\n            console.log(`Received ${adminResponse.data.length} services from admin endpoint`);\r\n            const activeServices = adminResponse.data.filter(service => \r\n              service.is_active === true || service.status === 'active'\r\n            );\r\n            console.log(`Filtered down to ${activeServices.length} active services`);\r\n            return formatServiceData(activeServices);\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('All attempts to fetch services failed:', error);\r\n      throw new Error('Unable to load services. Please try again later.');\r\n    }\r\n  }\r\n}\r\n\r\n// Helper function to standardize service data format\r\nfunction formatServiceData(services) {\r\n  return services.map(service => ({\r\n    id: service.id,\r\n    name: service.name,\r\n    description: service.description || '',\r\n    base_price: service.base_price || service.basePrice || 0,\r\n    time_required: service.time_required || service.timeRequired || 0,\r\n    category: service.category || 'General',\r\n    is_active: service.is_active !== false // Default to active if not specified\r\n  }));\r\n}\r\n\r\nexport const customerAPI = {\r\n  async createRequest(data) {\r\n    try {\r\n      console.log('Creating service request with data:', data);\r\n      \r\n      // Validate the data before sending to server\r\n      if (!data.pin_code) {\r\n        throw new Error('PIN code is required');\r\n      }\r\n      \r\n      if (!data.service_id && !data.category) {\r\n        throw new Error('Either service_id or category is required');\r\n      }\r\n      \r\n      const response = await api.post('/api/customer/requests', data);\r\n      console.log('Service request created successfully:', response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating request:', error);\r\n      // Enhanced error reporting\r\n      if (error.response?.data?.error) {\r\n        console.error('Backend error:', error.response.data.error);\r\n        throw new Error(error.response.data.error);\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  async getRequests() {\r\n    try {\r\n      console.log('Fetching customer requests...');\r\n      const response = await api.get('/api/customer/requests');\r\n      console.log(`Received ${response.data.length} customer requests`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching customer requests:', error);\r\n      // Add more detailed logging for debugging\r\n      if (error.response) {\r\n        console.error('Response status:', error.response.status);\r\n        console.error('Response data:', error.response.data);\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  async closeRequest(requestId) {\r\n    try {\r\n      const response = await api.put(`/api/customer/requests/${requestId}/close`)\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error closing request:', error)\r\n      throw error\r\n    }\r\n  },\r\n\r\n  // Enhanced updateRequest method with additional parameters\r\n  async updateRequest(requestId, data) {\r\n    try {\r\n      const response = await api.put(`/api/customer/requests/${requestId}`, data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error updating request:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  // Enhanced addReview method with additional parameters\r\n  async addReview(requestId, reviewData) {\r\n    try {\r\n      const response = await api.post(`/api/customer/requests/${requestId}/review`, reviewData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error adding review:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getAvailableServices() {\r\n    try {\r\n      console.log('Fetching available services...');\r\n      const response = await api.get('/api/customer/services');\r\n      return response.data.map(service => ({\r\n        id: service.id,\r\n        name: service.name,\r\n        description: service.description,\r\n        base_price: service.base_price,\r\n        time_required: service.time_required,\r\n        category: service.category\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching services:', error);\r\n      throw error;\r\n    }\r\n  },\r\n}\r\n\r\nexport const professionalAPI = {\r\n  async getAssignments(status = null) {\r\n    try {\r\n      console.log('Fetching professional assignments', status ? `with status: ${status}` : '')\r\n      const params = status ? { status } : {}\r\n      const response = await api.get('/api/professional/assignments', { params })\r\n      console.log('Received assignments:', response.data.length)\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error fetching assignments:', error)\r\n      throw error\r\n    }\r\n  },\r\n\r\n  async updateStatus(requestId, status) {\r\n    try {\r\n      console.log(`Updating request ${requestId} status to ${status}`)\r\n      const response = await api.put(`/api/professional/requests/${requestId}`, { status })\r\n      console.log('Status update response:', response.data)\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error updating status:', error)\r\n      throw error\r\n    }\r\n  },\r\n\r\n  async getProfile() {\r\n    try {\r\n      console.log('Fetching professional profile')\r\n      const response = await api.get('/api/professional/profile')\r\n      console.log('Retrieved profile data')\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error fetching profile:', error)\r\n      throw error\r\n    }\r\n  },\r\n\r\n  async updateProfile(data) {\r\n    try {\r\n      console.log('Updating professional profile with data:', data)\r\n      const response = await api.put('/api/professional/profile', data)\r\n      console.log('Profile update response:', response.data)\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error updating profile:', error)\r\n      throw error\r\n    }\r\n  },\r\n  \r\n  async getReviews() {\r\n    try {\r\n      console.log('Fetching professional reviews')\r\n      const response = await api.get('/api/professional/reviews')\r\n      console.log('Retrieved reviews:', response.data.length)\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error fetching reviews:', error)\r\n      throw error\r\n    }\r\n  },\r\n  \r\n  async updateAvailability(isAvailable) {\r\n    try {\r\n      console.log(`Updating availability to: ${isAvailable}`)\r\n      const response = await api.put('/api/professional/availability', { is_available: isAvailable })\r\n      console.log('Availability update response:', response.data)\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error updating availability:', error)\r\n      throw error\r\n    }\r\n  },\r\n  \r\n  async confirmLocationExit(requestId) {\r\n    try {\r\n      console.log(`Confirming exit for request: ${requestId}`)\r\n      const response = await api.post(`/api/professional/requests/${requestId}/exit-location`)\r\n      console.log('Location exit confirmation response:', response.data)\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error confirming location exit:', error)\r\n      throw error\r\n    }\r\n  }\r\n}\r\n\r\nexport const adminAPI = {\r\n  async getUsers(role = null) {\r\n    try {\r\n      console.log('Fetching users...');\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n\r\n      const params = role ? { role } : {};\r\n      const response = await api.get('/api/admin/users', { params });\r\n      \r\n      // Ensure users have the 'name' property for display\r\n      return response.data.map(user => {\r\n        if (!user.name) {\r\n          // Set a fallback name if none is provided\r\n          user.name = user.username || `User ${user.id}`;\r\n        }\r\n        return user;\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching users:', error.response?.data || error.message);\r\n      if (error.response?.status === 401) {\r\n        console.log('Unauthorized. Please check your token.');\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async approveUser(userId) {\r\n    try {\r\n      console.log(`Approving professional with ID: ${userId}`);\r\n      const response = await api.post(`/api/admin/professionals/${userId}/approve`);\r\n      console.log('Professional approved:', response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error approving user:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async blockUser(userId, reason = 'Violation of terms of service') {\r\n    try {\r\n      console.log(`Blocking user with ID: ${userId}, reason: ${reason}`);\r\n      const response = await api.post(`/api/admin/users/${userId}/block`, { reason });\r\n      console.log('User blocked:', response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error blocking user:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async unblockUser(userId) {\r\n    try {\r\n      console.log(`Unblocking user with ID: ${userId}`);\r\n      const response = await api.post(`/api/admin/users/${userId}/unblock`);\r\n      console.log('User unblocked:', response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error unblocking user:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getServices() {\r\n    try {\r\n      console.log('Fetching services...');\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n\r\n      const response = await api.get('/api/admin/services');\r\n      console.log('Services response:', response.data); // Add debugging\r\n      \r\n      // If backend already sends camelCase fields, return directly\r\n      if (response.data && Array.isArray(response.data)) {\r\n        // Make sure each service has the expected format\r\n        return response.data.map(service => ({\r\n          id: service.id,\r\n          name: service.name,\r\n          description: service.description || '',\r\n          base_price: service.base_price || service.basePrice,\r\n          timeRequired: service.timeRequired || service.time_required,\r\n          category: service.category || 'General',\r\n          status: service.is_active !== false ? 'active' : 'inactive'\r\n        }));\r\n      }\r\n      \r\n      return [];\r\n    } catch (error) {\r\n      console.error('Error fetching services:', error.response?.data || error.message);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async createService(serviceData) {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n\r\n      const formattedData = {\r\n        name: serviceData.name,\r\n        description: serviceData.description,\r\n        base_price: Number(serviceData.base_price),\r\n        time_required: Number(serviceData.timeRequired),\r\n        category: serviceData.category || 'General'\r\n      };\r\n\r\n      const response = await api.post('/api/admin/services', formattedData, {\r\n        headers: {\r\n          'Authentication-Token': token\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating service:', error.response?.data || error);\r\n      if (error.response?.status === 400) {\r\n        throw new Error(`Validation error: ${error.response.data.message || 'Invalid data'}`);\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async update_service(serviceId, serviceData) {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n\r\n      const response = await api.put(`/api/admin/services/${serviceId}`, serviceData, {\r\n        headers: {\r\n          'Authentication-Token': token\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error updating service:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async deleteService(serviceId) {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n\r\n      const response = await api.delete(`/api/admin/services/${serviceId}`, {\r\n        headers: {\r\n          'Authentication-Token': token\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error deleting service:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  async getServiceRequests(params = {}) {\r\n    try {\r\n      console.log('Fetching service requests...');\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n\r\n      const response = await api.get('/api/admin/requests', { params });\r\n      console.log(`Retrieved ${response.data.length} service requests`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching service requests:', error.response?.data || error.message);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default api"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}