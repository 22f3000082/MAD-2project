{"ast":null,"code":"import { serviceAPI, customerAPI } from '@/services/api';\nexport default {\n  data() {\n    return {\n      services: [],\n      loading: true,\n      error: null,\n      selectedService: null,\n      submitting: false,\n      requestForm: {\n        preferred_date: '',\n        notes: ''\n      }\n    };\n  },\n  computed: {\n    minDate() {\n      const today = new Date();\n      return today.toISOString().split('T')[0];\n    }\n  },\n  async created() {\n    await this.fetchServices();\n  },\n  methods: {\n    async fetchServices() {\n      try {\n        this.loading = true;\n        this.error = null;\n        const response = await serviceAPI.getPublicServices();\n        this.services = response.filter(service => service.is_active);\n      } catch (err) {\n        console.error('Error fetching services:', err);\n        this.error = 'Unable to load services. Please try again later.';\n      } finally {\n        this.loading = false;\n      }\n    },\n    // async createServiceRequest(service) {\n    //   this.selectedService = service;\n    //   this.requestForm = {\n    //     preferred_date: '',\n    //     notes: ''\n    //   };\n    //   // Show modal using Bootstrap\n    //   $(this.$refs.requestModal).modal('show');\n    // },\n\n    async submitRequest() {\n      try {\n        this.submitting = true;\n        const requestData = {\n          service_id: this.selectedService.id,\n          preferred_date: this.requestForm.preferred_date,\n          notes: this.requestForm.notes\n        };\n        await customerAPI.createServiceRequest(requestData);\n\n        // // Hide modal and show success message\n        // $(this.$refs.requestModal).modal('hide');\n        // this.$toast.success('Service request submitted successfully!');\n      } catch (err) {\n        console.error('Error submitting request:', err);\n        this.$toast.error(err.message || 'Failed to submit request');\n      } finally {\n        this.submitting = false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["serviceAPI","customerAPI","data","services","loading","error","selectedService","submitting","requestForm","preferred_date","notes","computed","minDate","today","Date","toISOString","split","created","fetchServices","methods","response","getPublicServices","filter","service","is_active","err","console","submitRequest","requestData","service_id","id","createServiceRequest","$toast","message"],"sources":["src/views/ServiceRequest.vue"],"sourcesContent":["/* eslint-disable */\r\n<template>\r\n  <div class=\"service-request container\">\r\n    <h2 class=\"mb-4\">Available Services</h2>\r\n    \r\n    <!-- Loading and Error States -->\r\n    <div v-if=\"loading\" class=\"alert alert-info\">Loading services...</div>\r\n    <div v-if=\"error\" class=\"alert alert-danger\">{{ error }}</div>\r\n\r\n    <!-- Services Grid -->\r\n    <div v-if=\"!loading && !error\" class=\"row\">\r\n      <div v-for=\"service in services\" :key=\"service.id\" class=\"col-md-4 mb-4\">\r\n        <div class=\"card\">\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">{{ service.name }}</h5>\r\n            <p class=\"card-text\">{{ service.description }}</p>\r\n            <div class=\"service-details\">\r\n              <p><strong>Price:</strong> ${{ service.base_price }}</p>\r\n              <p><strong>Duration:</strong> {{ service.time_required }} hour(s)</p>\r\n            </div>\r\n            <button \r\n              @click=\"createServiceRequest(service)\"\r\n              class=\"btn btn-primary\"\r\n              :disabled=\"loading\"\r\n            >\r\n              Request Service\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Request Form Modal -->\r\n    <div class=\"modal fade\" id=\"requestModal\" tabindex=\"-1\" ref=\"requestModal\">\r\n      <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\">Request Service: {{ selectedService?.name }}</h5>\r\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            <form @submit.prevent=\"submitRequest\">\r\n              <div class=\"form-group\">\r\n                <label>Preferred Date</label>\r\n                <input \r\n                  type=\"date\" \r\n                  class=\"form-control\" \r\n                  v-model=\"requestForm.preferred_date\"\r\n                  :min=\"minDate\"\r\n                  required\r\n                >\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label>Notes</label>\r\n                <textarea \r\n                  class=\"form-control\" \r\n                  v-model=\"requestForm.notes\"\r\n                  rows=\"3\"\r\n                ></textarea>\r\n              </div>\r\n              <button \r\n                type=\"submit\" \r\n                class=\"btn btn-primary\"\r\n                :disabled=\"submitting\"\r\n              >\r\n                Submit Request\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { serviceAPI, customerAPI } from '@/services/api';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      services: [],\r\n      loading: true,\r\n      error: null,\r\n      selectedService: null,\r\n      submitting: false,\r\n      requestForm: {\r\n        preferred_date: '',\r\n        notes: ''\r\n      }\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    minDate() {\r\n      const today = new Date();\r\n      return today.toISOString().split('T')[0];\r\n    }\r\n  },\r\n\r\n  async created() {\r\n    await this.fetchServices();\r\n  },\r\n\r\n  methods: {\r\n    async fetchServices() {\r\n      try {\r\n        this.loading = true;\r\n        this.error = null;\r\n        const response = await serviceAPI.getPublicServices();\r\n        this.services = response.filter(service => service.is_active);\r\n      } catch (err) {\r\n        console.error('Error fetching services:', err);\r\n        this.error = 'Unable to load services. Please try again later.';\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n\r\n    // async createServiceRequest(service) {\r\n    //   this.selectedService = service;\r\n    //   this.requestForm = {\r\n    //     preferred_date: '',\r\n    //     notes: ''\r\n    //   };\r\n    //   // Show modal using Bootstrap\r\n    //   $(this.$refs.requestModal).modal('show');\r\n    // },\r\n\r\n    async submitRequest() {\r\n      try {\r\n        this.submitting = true;\r\n        \r\n        const requestData = {\r\n          service_id: this.selectedService.id,\r\n          preferred_date: this.requestForm.preferred_date,\r\n          notes: this.requestForm.notes\r\n        };\r\n\r\n        await customerAPI.createServiceRequest(requestData);\r\n        \r\n        // // Hide modal and show success message\r\n        // $(this.$refs.requestModal).modal('hide');\r\n        // this.$toast.success('Service request submitted successfully!');\r\n        \r\n      } catch (err) {\r\n        console.error('Error submitting request:', err);\r\n        this.$toast.error(err.message || 'Failed to submit request');\r\n      } finally {\r\n        this.submitting = false;\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.service-request {\r\n  padding: 20px;\r\n}\r\n\r\n.card {\r\n  height: 100%;\r\n  transition: transform 0.2s;\r\n}\r\n\r\n.card:hover {\r\n  transform: translateY(-5px);\r\n  box-shadow: 0 4px 8px rgba(0,0,0,0.1);\r\n}\r\n\r\n.service-details {\r\n  margin: 15px 0;\r\n}\r\n\r\n.modal-dialog {\r\n  max-width: 500px;\r\n}\r\n</style>\r\n"],"mappings":"AA4EA,SAAAA,UAAA,EAAAC,WAAA;AAEA;EACAC,KAAA;IACA;MACAC,QAAA;MACAC,OAAA;MACAC,KAAA;MACAC,eAAA;MACAC,UAAA;MACAC,WAAA;QACAC,cAAA;QACAC,KAAA;MACA;IACA;EACA;EAEAC,QAAA;IACAC,QAAA;MACA,MAAAC,KAAA,OAAAC,IAAA;MACA,OAAAD,KAAA,CAAAE,WAAA,GAAAC,KAAA;IACA;EACA;EAEA,MAAAC,QAAA;IACA,WAAAC,aAAA;EACA;EAEAC,OAAA;IACA,MAAAD,cAAA;MACA;QACA,KAAAd,OAAA;QACA,KAAAC,KAAA;QACA,MAAAe,QAAA,SAAApB,UAAA,CAAAqB,iBAAA;QACA,KAAAlB,QAAA,GAAAiB,QAAA,CAAAE,MAAA,CAAAC,OAAA,IAAAA,OAAA,CAAAC,SAAA;MACA,SAAAC,GAAA;QACAC,OAAA,CAAArB,KAAA,6BAAAoB,GAAA;QACA,KAAApB,KAAA;MACA;QACA,KAAAD,OAAA;MACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA,MAAAuB,cAAA;MACA;QACA,KAAApB,UAAA;QAEA,MAAAqB,WAAA;UACAC,UAAA,OAAAvB,eAAA,CAAAwB,EAAA;UACArB,cAAA,OAAAD,WAAA,CAAAC,cAAA;UACAC,KAAA,OAAAF,WAAA,CAAAE;QACA;QAEA,MAAAT,WAAA,CAAA8B,oBAAA,CAAAH,WAAA;;QAEA;QACA;QACA;MAEA,SAAAH,GAAA;QACAC,OAAA,CAAArB,KAAA,8BAAAoB,GAAA;QACA,KAAAO,MAAA,CAAA3B,KAAA,CAAAoB,GAAA,CAAAQ,OAAA;MACA;QACA,KAAA1B,UAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}