{"ast":null,"code":"import { serviceAPI, customerAPI } from '@/services/api';\nexport default {\n  data() {\n    return {\n      services: [],\n      loading: true,\n      error: null,\n      selectedService: null,\n      submitting: false,\n      requestForm: {\n        preferred_date: '',\n        notes: ''\n      },\n      selectedCategory: null,\n      categories: ['AC Repair', 'Plumbing', 'Electrical', 'Carpentry', 'Painting', 'Cleaning', 'Pest Control', 'Appliance Repair', 'Moving Services', 'Gardening']\n    };\n  },\n  computed: {\n    minDate() {\n      const today = new Date();\n      return today.toISOString().split('T')[0];\n    },\n    filteredServices() {\n      if (!this.selectedCategory) return this.services;\n      return this.services.filter(service => service.category === this.selectedCategory);\n    }\n  },\n  async created() {\n    await this.fetchServices();\n  },\n  methods: {\n    async fetchServices() {\n      try {\n        this.loading = true;\n        this.error = null;\n        const response = await serviceAPI.getPublicServices();\n        this.services = response.filter(service => service.is_active);\n      } catch (err) {\n        console.error('Error fetching services:', err);\n        this.error = 'Unable to load services. Please try again later.';\n      } finally {\n        this.loading = false;\n      }\n    },\n    filterByCategory(category) {\n      this.selectedCategory = this.selectedCategory === category ? null : category;\n    },\n    async createServiceRequest(service) {\n      try {\n        const requestData = {\n          service_id: service.id,\n          pin_code: prompt('Please enter your PIN code:'),\n          special_instructions: prompt('Any special instructions?') || ''\n        };\n        if (!requestData.pin_code) {\n          alert('PIN code is required');\n          return;\n        }\n        await customerAPI.createRequest(requestData);\n        this.$toast.success('Service request created successfully!');\n      } catch (err) {\n        console.error('Error creating request:', err);\n        this.$toast.error(err.message || 'Failed to create request');\n      }\n    },\n    async submitRequest() {\n      try {\n        this.submitting = true;\n        const requestData = {\n          service_id: this.selectedService.id,\n          preferred_date: this.requestForm.preferred_date,\n          notes: this.requestForm.notes\n        };\n        await customerAPI.createServiceRequest(requestData);\n\n        // // Hide modal and show success message\n        // $(this.$refs.requestModal).modal('hide');\n        // this.$toast.success('Service request submitted successfully!');\n      } catch (err) {\n        console.error('Error submitting request:', err);\n        this.$toast.error(err.message || 'Failed to submit request');\n      } finally {\n        this.submitting = false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["serviceAPI","customerAPI","data","services","loading","error","selectedService","submitting","requestForm","preferred_date","notes","selectedCategory","categories","computed","minDate","today","Date","toISOString","split","filteredServices","filter","service","category","created","fetchServices","methods","response","getPublicServices","is_active","err","console","filterByCategory","createServiceRequest","requestData","service_id","id","pin_code","prompt","special_instructions","alert","createRequest","$toast","success","message","submitRequest"],"sources":["src/views/ServiceRequest.vue"],"sourcesContent":["/* eslint-disable */\r\n<template>\r\n  <div class=\"service-request container\">\r\n    <h2 class=\"mb-4\">Available Services</h2>\r\n    \r\n    <!-- Loading and Error States -->\r\n    <div v-if=\"loading\" class=\"alert alert-info\">Loading services...</div>\r\n    <div v-if=\"error\" class=\"alert alert-danger\">{{ error }}</div>\r\n\r\n    <!-- Service Categories -->\r\n    <div v-if=\"!loading && !error\" class=\"mb-4\">\r\n      <div class=\"category-filters\">\r\n        <button \r\n          v-for=\"category in categories\"\r\n          :key=\"category\"\r\n          class=\"btn btn-outline-primary me-2 mb-2\"\r\n          :class=\"{ active: selectedCategory === category }\"\r\n          @click=\"filterByCategory(category)\">\r\n          {{ category }}\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Services Grid -->\r\n    <div v-if=\"!loading && !error\" class=\"row\">\r\n      <div v-for=\"service in filteredServices\" \r\n           :key=\"service.id\" \r\n           class=\"col-md-4 mb-4\">\r\n        <div class=\"card h-100\">\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">{{ service.name }}</h5>\r\n            <p class=\"card-text\">{{ service.description }}</p>\r\n            <div class=\"service-details\">\r\n              <p><strong>Category:</strong> {{ service.category }}</p>\r\n              <p><strong>Price:</strong> ${{ service.base_price }}</p>\r\n              <p><strong>Duration:</strong> {{ service.time_required }} hour(s)</p>\r\n            </div>\r\n            <button \r\n              @click=\"createServiceRequest(service)\"\r\n              class=\"btn btn-primary\"\r\n              :disabled=\"loading\">\r\n              Request Service\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Request Form Modal -->\r\n    <div class=\"modal fade\" id=\"requestModal\" tabindex=\"-1\" ref=\"requestModal\">\r\n      <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\">Request Service: {{ selectedService?.name }}</h5>\r\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            <form @submit.prevent=\"submitRequest\">\r\n              <div class=\"form-group\">\r\n                <label>Preferred Date</label>\r\n                <input \r\n                  type=\"date\" \r\n                  class=\"form-control\" \r\n                  v-model=\"requestForm.preferred_date\"\r\n                  :min=\"minDate\"\r\n                  required\r\n                >\r\n              </div>\r\n              <div class=\"form-group\">\r\n                <label>Notes</label>\r\n                <textarea \r\n                  class=\"form-control\" \r\n                  v-model=\"requestForm.notes\"\r\n                  rows=\"3\"\r\n                ></textarea>\r\n              </div>\r\n              <button \r\n                type=\"submit\" \r\n                class=\"btn btn-primary\"\r\n                :disabled=\"submitting\"\r\n              >\r\n                Submit Request\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { serviceAPI, customerAPI } from '@/services/api';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      services: [],\r\n      loading: true,\r\n      error: null,\r\n      selectedService: null,\r\n      submitting: false,\r\n      requestForm: {\r\n        preferred_date: '',\r\n        notes: ''\r\n      },\r\n      selectedCategory: null,\r\n      categories: [\r\n        'AC Repair',\r\n        'Plumbing',\r\n        'Electrical',\r\n        'Carpentry',\r\n        'Painting',\r\n        'Cleaning',\r\n        'Pest Control',\r\n        'Appliance Repair',\r\n        'Moving Services',\r\n        'Gardening'\r\n      ]\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    minDate() {\r\n      const today = new Date();\r\n      return today.toISOString().split('T')[0];\r\n    },\r\n    filteredServices() {\r\n      if (!this.selectedCategory) return this.services;\r\n      return this.services.filter(service => \r\n        service.category === this.selectedCategory\r\n      );\r\n    }\r\n  },\r\n\r\n  async created() {\r\n    await this.fetchServices();\r\n  },\r\n\r\n  methods: {\r\n    async fetchServices() {\r\n      try {\r\n        this.loading = true;\r\n        this.error = null;\r\n        const response = await serviceAPI.getPublicServices();\r\n        this.services = response.filter(service => service.is_active);\r\n      } catch (err) {\r\n        console.error('Error fetching services:', err);\r\n        this.error = 'Unable to load services. Please try again later.';\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n\r\n    filterByCategory(category) {\r\n      this.selectedCategory = this.selectedCategory === category ? null : category;\r\n    },\r\n\r\n    async createServiceRequest(service) {\r\n      try {\r\n        const requestData = {\r\n          service_id: service.id,\r\n          pin_code: prompt('Please enter your PIN code:'),\r\n          special_instructions: prompt('Any special instructions?') || ''\r\n        };\r\n\r\n        if (!requestData.pin_code) {\r\n          alert('PIN code is required');\r\n          return;\r\n        }\r\n\r\n        await customerAPI.createRequest(requestData);\r\n        this.$toast.success('Service request created successfully!');\r\n      } catch (err) {\r\n        console.error('Error creating request:', err);\r\n        this.$toast.error(err.message || 'Failed to create request');\r\n      }\r\n    },\r\n\r\n    async submitRequest() {\r\n      try {\r\n        this.submitting = true;\r\n        \r\n        const requestData = {\r\n          service_id: this.selectedService.id,\r\n          preferred_date: this.requestForm.preferred_date,\r\n          notes: this.requestForm.notes\r\n        };\r\n\r\n        await customerAPI.createServiceRequest(requestData);\r\n        \r\n        // // Hide modal and show success message\r\n        // $(this.$refs.requestModal).modal('hide');\r\n        // this.$toast.success('Service request submitted successfully!');\r\n        \r\n      } catch (err) {\r\n        console.error('Error submitting request:', err);\r\n        this.$toast.error(err.message || 'Failed to submit request');\r\n      } finally {\r\n        this.submitting = false;\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.service-request {\r\n  padding: 20px;\r\n}\r\n\r\n.card {\r\n  height: 100%;\r\n  transition: transform 0.2s;\r\n}\r\n\r\n.card:hover {\r\n  transform: translateY(-5px);\r\n  box-shadow: 0 4px 8px rgba(0,0,0,0.1);\r\n}\r\n\r\n.service-details {\r\n  margin: 15px 0;\r\n}\r\n\r\n.modal-dialog {\r\n  max-width: 500px;\r\n}\r\n\r\n.category-filters {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.btn.active {\r\n  background-color: #007bff;\r\n  color: white;\r\n}\r\n</style>\r\n"],"mappings":"AA4FA,SAAAA,UAAA,EAAAC,WAAA;AAEA;EACAC,KAAA;IACA;MACAC,QAAA;MACAC,OAAA;MACAC,KAAA;MACAC,eAAA;MACAC,UAAA;MACAC,WAAA;QACAC,cAAA;QACAC,KAAA;MACA;MACAC,gBAAA;MACAC,UAAA,GACA,aACA,YACA,cACA,aACA,YACA,YACA,gBACA,oBACA,mBACA;IAEA;EACA;EAEAC,QAAA;IACAC,QAAA;MACA,MAAAC,KAAA,OAAAC,IAAA;MACA,OAAAD,KAAA,CAAAE,WAAA,GAAAC,KAAA;IACA;IACAC,iBAAA;MACA,UAAAR,gBAAA,cAAAR,QAAA;MACA,YAAAA,QAAA,CAAAiB,MAAA,CAAAC,OAAA,IACAA,OAAA,CAAAC,QAAA,UAAAX,gBACA;IACA;EACA;EAEA,MAAAY,QAAA;IACA,WAAAC,aAAA;EACA;EAEAC,OAAA;IACA,MAAAD,cAAA;MACA;QACA,KAAApB,OAAA;QACA,KAAAC,KAAA;QACA,MAAAqB,QAAA,SAAA1B,UAAA,CAAA2B,iBAAA;QACA,KAAAxB,QAAA,GAAAuB,QAAA,CAAAN,MAAA,CAAAC,OAAA,IAAAA,OAAA,CAAAO,SAAA;MACA,SAAAC,GAAA;QACAC,OAAA,CAAAzB,KAAA,6BAAAwB,GAAA;QACA,KAAAxB,KAAA;MACA;QACA,KAAAD,OAAA;MACA;IACA;IAEA2B,iBAAAT,QAAA;MACA,KAAAX,gBAAA,QAAAA,gBAAA,KAAAW,QAAA,UAAAA,QAAA;IACA;IAEA,MAAAU,qBAAAX,OAAA;MACA;QACA,MAAAY,WAAA;UACAC,UAAA,EAAAb,OAAA,CAAAc,EAAA;UACAC,QAAA,EAAAC,MAAA;UACAC,oBAAA,EAAAD,MAAA;QACA;QAEA,KAAAJ,WAAA,CAAAG,QAAA;UACAG,KAAA;UACA;QACA;QAEA,MAAAtC,WAAA,CAAAuC,aAAA,CAAAP,WAAA;QACA,KAAAQ,MAAA,CAAAC,OAAA;MACA,SAAAb,GAAA;QACAC,OAAA,CAAAzB,KAAA,4BAAAwB,GAAA;QACA,KAAAY,MAAA,CAAApC,KAAA,CAAAwB,GAAA,CAAAc,OAAA;MACA;IACA;IAEA,MAAAC,cAAA;MACA;QACA,KAAArC,UAAA;QAEA,MAAA0B,WAAA;UACAC,UAAA,OAAA5B,eAAA,CAAA6B,EAAA;UACA1B,cAAA,OAAAD,WAAA,CAAAC,cAAA;UACAC,KAAA,OAAAF,WAAA,CAAAE;QACA;QAEA,MAAAT,WAAA,CAAA+B,oBAAA,CAAAC,WAAA;;QAEA;QACA;QACA;MAEA,SAAAJ,GAAA;QACAC,OAAA,CAAAzB,KAAA,8BAAAwB,GAAA;QACA,KAAAY,MAAA,CAAApC,KAAA,CAAAwB,GAAA,CAAAc,OAAA;MACA;QACA,KAAApC,UAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}