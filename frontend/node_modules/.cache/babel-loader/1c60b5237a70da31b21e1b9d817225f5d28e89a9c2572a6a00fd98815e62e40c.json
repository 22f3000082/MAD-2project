{"ast":null,"code":"import { ref, computed, onMounted, reactive } from 'vue';\nimport { professionalAPI } from '@/services/api';\nimport { useRouter } from 'vue-router';\nexport default {\n  name: 'ProfessionalDashboard',\n  data() {\n    return {\n      professionalName: '',\n      activeTab: 'pending',\n      loading: true,\n      serviceRequests: [],\n      profile: {\n        service_type: '',\n        experience: 0,\n        average_rating: 0,\n        total_reviews: 0,\n        is_approved: false,\n        description: '',\n        email: '',\n        phone: '',\n        date_created: new Date().toISOString()\n      },\n      reviews: [],\n      showDetailsModal: false,\n      showProfileModal: false,\n      selectedRequest: null,\n      isAvailable: true,\n      updatingProfile: false,\n      profileForm: {\n        description: '',\n        phone: '',\n        experience: 0\n      },\n      availableRequests: [],\n      error: null\n    };\n  },\n  computed: {\n    pendingRequests() {\n      return this.serviceRequests.filter(req => req.status === 'pending') || [];\n    },\n    inProgressRequests() {\n      return this.serviceRequests.filter(req => req.status === 'in_progress' || req.status === 'assigned') || [];\n    },\n    completedRequests() {\n      return this.serviceRequests.filter(req => req.status === 'completed' || req.status === 'closed') || [];\n    },\n    filteredRequests() {\n      if (this.activeTab === 'available') {\n        return this.availableRequests;\n      } else if (this.activeTab === 'pending') {\n        return this.pendingRequests;\n      } else if (this.activeTab === 'assigned') {\n        return this.inProgressRequests;\n      } else if (this.activeTab === 'completed') {\n        return this.completedRequests;\n      }\n      return [];\n    }\n  },\n  created() {\n    this.fetchData();\n  },\n  methods: {\n    checkAuth() {\n      const token = localStorage.getItem('token');\n      const user = JSON.parse(localStorage.getItem('user') || '{}');\n      if (!token) {\n        console.log('No authentication token found - redirecting to login');\n        // Add a small delay to prevent navigation errors during component initialization\n        setTimeout(() => {\n          this.$router.push('/login');\n        }, 100);\n        return false;\n      }\n      if (user.role !== 'professional') {\n        console.log('User is not a professional - redirecting');\n        setTimeout(() => {\n          this.$router.push('/login');\n        }, 100);\n        return false;\n      }\n      this.professionalName = user.name || 'Professional';\n      return true;\n    },\n    async fetchData() {\n      try {\n        // Only proceed if authentication check passed\n        if (!this.checkAuth()) {\n          return;\n        }\n        this.loading = true;\n        this.error = null;\n\n        // Only fetch data if we have a token\n        const token = localStorage.getItem('token');\n        if (!token) {\n          throw new Error('Authentication required');\n        }\n        await Promise.all([this.fetchProfile(), this.fetchRequests()]);\n      } catch (error) {\n        console.error('Dashboard data fetch error:', error);\n        this.error = error.message || 'Failed to load dashboard data';\n\n        // If token is missing or invalid, redirect to login\n        if (error.message.includes('authentication') || error.message.includes('token')) {\n          setTimeout(() => this.$router.push('/login'), 1000);\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n    async fetchProfile() {\n      try {\n        const profileData = await professionalAPI.getProfile();\n        this.profile = {\n          ...this.profile,\n          ...profileData\n        };\n\n        // Initialize profile form with current values\n        this.profileForm.description = profileData.description || '';\n        this.profileForm.phone = profileData.phone || '';\n        this.profileForm.experience = profileData.experience || 0;\n      } catch (error) {\n        console.error('Failed to load profile data:', error);\n        // Continue with default profile values\n      }\n    },\n    async fetchRequests() {\n      try {\n        const requestsData = await professionalAPI.getAssignments();\n        this.serviceRequests = requestsData || [];\n      } catch (error) {\n        console.error('Failed to load assignments:', error);\n        this.serviceRequests = [];\n      }\n\n      // Fetch reviews with error handling\n      this.fetchReviews();\n\n      // Fetch available requests with error handling\n      this.fetchAvailableRequests();\n    },\n    async fetchReviews() {\n      try {\n        const reviewsData = await professionalAPI.getReviews();\n        this.reviews = reviewsData || [];\n      } catch (error) {\n        console.error('Error fetching reviews:', error);\n        this.reviews = [];\n      }\n    },\n    async fetchAvailableRequests() {\n      try {\n        console.log('Fetching available service requests...');\n        // Updated to explicitly fetch ALL available service requests from service_requests table\n        const response = await professionalAPI.getAvailableRequests();\n\n        // Add dummy data if needed for testing\n        if (!response || response.length === 0) {\n          console.log('No requests from API, adding sample data for development');\n          this.availableRequests = this.generateSampleRequests();\n        } else {\n          this.availableRequests = response || [];\n\n          // Add profile images if missing\n          this.availableRequests = this.availableRequests.map(req => {\n            if (!req.customer.profile_image) {\n              req.customer.profile_image = 'https://via.placeholder.com/40';\n            }\n            if (!req.customer.address_area && req.pin_code) {\n              req.customer.address_area = `Area ${req.pin_code.substring(0, 3)}`;\n            }\n            return req;\n          });\n        }\n\n        // Sort by created date (newest first)\n        this.availableRequests.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));\n        console.log(`Loaded ${this.availableRequests.length} available requests`);\n      } catch (error) {\n        console.error('Error fetching available requests:', error);\n        // Provide sample data for development/testing\n        this.availableRequests = this.generateSampleRequests();\n      }\n    },\n    // Generate sample data for testing\n    generateSampleRequests() {\n      const serviceTypes = ['Plumbing Repair', 'Electrical Work', 'House Cleaning', 'Appliance Repair', 'Pest Control', 'Painting'];\n      const customerNames = ['John Doe', 'Jane Smith', 'Robert Johnson', 'Emily Clark', 'Michael Brown', 'Sophia Wilson'];\n      const areas = ['North', 'South', 'East', 'West', 'Central'];\n      const instructions = ['Please arrive before noon', 'The issue is in the kitchen', 'I need help with multiple fixtures', 'Emergency repair needed', 'Please bring all necessary tools', 'Call before arriving'];\n      return Array(6).fill().map((_, i) => ({\n        id: 1000 + i,\n        status: 'pending',\n        service: {\n          id: 100 + i,\n          name: serviceTypes[i % serviceTypes.length],\n          base_price: 500 + i * 100\n        },\n        customer: {\n          id: 200 + i,\n          customer_name: customerNames[i % customerNames.length],\n          phone: `+91 98765${10000 + i}`,\n          address: `123 Main St, ${areas[i % areas.length]} Area`,\n          address_area: `${areas[i % areas.length]} Area`,\n          profile_image: `https://randomuser.me/api/portraits/${i % 2 ? 'women' : 'men'}/${i + 1}.jpg`\n        },\n        pin_code: `${400000 + i * 1000}`,\n        special_instructions: instructions[i % instructions.length],\n        created_at: new Date(Date.now() - i * 24 * 60 * 60 * 1000).toISOString(),\n        // Each one day apart\n        exited_location: false\n      }));\n    },\n    async acceptRequest(requestId, closeModal = false) {\n      try {\n        const request = this.availableRequests.find(r => r.id === requestId) || this.serviceRequests.find(r => r.id === requestId);\n        if (!request) {\n          throw new Error('Request not found');\n        }\n\n        // First check if the request is already assigned to someone else\n        if (request.professional_id && request.professional_id !== this.profile.id) {\n          alert('This request has already been assigned to another professional.');\n          return;\n        }\n\n        // Accept the request\n        await professionalAPI.updateStatus(requestId, 'in_progress');\n\n        // Refresh data after accepting\n        await this.fetchData();\n        if (closeModal) {\n          this.showDetailsModal = false;\n        }\n\n        // Show success notification\n        alert('Service request accepted successfully. You can find it in the \"In Progress\" tab.');\n      } catch (error) {\n        console.error('Error accepting request:', error);\n        alert('Failed to accept request: ' + (error.message || 'Unknown error'));\n      }\n    },\n    async rejectRequest(requestId, closeModal = false) {\n      if (confirm('Are you sure you want to reject this request?')) {\n        try {\n          await professionalAPI.updateStatus(requestId, 'rejected');\n\n          // Add reason for rejection if in a modal\n          if (closeModal) {\n            const reason = prompt('Please provide a reason for rejection (optional):');\n            if (reason) {\n              await professionalAPI.addRejectionReason(requestId, reason);\n            }\n          }\n          await this.fetchData();\n          if (closeModal) {\n            this.showDetailsModal = false;\n          }\n          alert('Service request has been rejected.');\n        } catch (error) {\n          console.error('Error rejecting request:', error);\n          alert('Failed to reject request: ' + (error.message || 'Unknown error'));\n        }\n      }\n    },\n    async completeRequest(requestId, closeModal = false) {\n      try {\n        const request = this.serviceRequests.find(r => r.id === requestId);\n        if (!request) {\n          throw new Error('Request not found');\n        }\n\n        // Check if location exit is confirmed\n        if (!request.exited_location) {\n          // Ask for confirmation to exit location\n          if (confirm('Have you exited the customer location? This is required before completing the service.')) {\n            // If confirmed, mark as exited first\n            await professionalAPI.confirmLocationExit(requestId);\n            request.exited_location = true;\n          } else {\n            // If not confirmed, don't complete\n            alert('You must confirm you have exited the customer location before completing the service.');\n            return;\n          }\n        }\n\n        // Now complete the request\n        await professionalAPI.updateStatus(requestId, 'completed');\n        await this.fetchData();\n        if (closeModal) {\n          this.showDetailsModal = false;\n        }\n        alert('Service request marked as completed successfully. The customer will be notified to close the service.');\n      } catch (error) {\n        console.error('Error completing request:', error);\n        alert('Failed to complete the request: ' + (error.message || 'Unknown error'));\n      }\n    },\n    // Add the missing method for rejection reason\n    async addRejectionReason(requestId, reason) {\n      try {\n        await professionalAPI.addRejectionReason(requestId, reason);\n      } catch (error) {\n        console.error('Error adding rejection reason:', error);\n      }\n    },\n    viewRequestDetails(request) {\n      // Add the exited_location property if needed\n      this.selectedRequest = {\n        ...request,\n        exited_location: request.exited_location || false\n      };\n      this.showDetailsModal = true;\n    },\n    async updateAvailability() {\n      try {\n        await professionalAPI.updateAvailability(this.isAvailable);\n        alert(`You are now ${this.isAvailable ? 'available' : 'unavailable'} for new service requests.`);\n      } catch (error) {\n        console.error('Error updating availability:', error);\n        // Revert to previous state if there was an error\n        this.isAvailable = !this.isAvailable;\n      }\n    },\n    async updateProfile() {\n      try {\n        this.updatingProfile = true;\n        await professionalAPI.updateProfile(this.profileForm);\n\n        // Update local profile data\n        this.profile.description = this.profileForm.description;\n        this.profile.phone = this.profileForm.phone;\n        this.profile.experience = this.profileForm.experience;\n        alert('Profile updated successfully!');\n      } catch (error) {\n        console.error('Error updating profile:', error);\n        alert('Failed to update profile. Please try again.');\n      } finally {\n        this.updatingProfile = false;\n      }\n    },\n    formatDate(dateString) {\n      if (!dateString) return 'N/A';\n      const date = new Date(dateString);\n      return date.toLocaleString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    },\n    getStatusBadgeClass(status) {\n      const classes = {\n        pending: 'badge bg-warning',\n        rejected: 'badge bg-danger',\n        in_progress: 'badge bg-primary',\n        assigned: 'badge bg-info',\n        completed: 'badge bg-success',\n        closed: 'badge bg-secondary'\n      };\n      return classes[status] || 'badge bg-secondary';\n    },\n    getEmptyStateMessage() {\n      if (this.activeTab === 'available') {\n        return 'No service requests available in your area. Check back later for new opportunities.';\n      } else if (this.activeTab === 'pending') {\n        return 'No new service requests available at the moment. Check back later.';\n      } else if (this.activeTab === 'assigned') {\n        return 'You have no active service assignments.';\n      } else {\n        return 'You have not completed any service requests yet.';\n      }\n    }\n  },\n  mounted() {\n    // Don't call fetchData here since we're doing it in created/checkAuth\n  }\n};","map":{"version":3,"names":["ref","computed","onMounted","reactive","professionalAPI","useRouter","name","data","professionalName","activeTab","loading","serviceRequests","profile","service_type","experience","average_rating","total_reviews","is_approved","description","email","phone","date_created","Date","toISOString","reviews","showDetailsModal","showProfileModal","selectedRequest","isAvailable","updatingProfile","profileForm","availableRequests","error","pendingRequests","filter","req","status","inProgressRequests","completedRequests","filteredRequests","created","fetchData","methods","checkAuth","token","localStorage","getItem","user","JSON","parse","console","log","setTimeout","$router","push","role","Error","Promise","all","fetchProfile","fetchRequests","message","includes","profileData","getProfile","requestsData","getAssignments","fetchReviews","fetchAvailableRequests","reviewsData","getReviews","response","getAvailableRequests","length","generateSampleRequests","map","customer","profile_image","address_area","pin_code","substring","sort","a","b","created_at","serviceTypes","customerNames","areas","instructions","Array","fill","_","i","id","service","base_price","customer_name","address","special_instructions","now","exited_location","acceptRequest","requestId","closeModal","request","find","r","professional_id","alert","updateStatus","rejectRequest","confirm","reason","prompt","addRejectionReason","completeRequest","confirmLocationExit","viewRequestDetails","updateAvailability","updateProfile","formatDate","dateString","date","toLocaleString","year","month","day","hour","minute","getStatusBadgeClass","classes","pending","rejected","in_progress","assigned","completed","closed","getEmptyStateMessage","mounted"],"sources":["src/views/ProfessionalDashboard.vue"],"sourcesContent":["<template>\r\n  <div class=\"professional-dashboard\">\r\n    <div class=\"container py-4\">\r\n      <!-- Welcome Section -->\r\n      <div class=\"row mb-4\">\r\n        <div class=\"col-lg-8\">\r\n          <h2>Welcome, {{ professionalName }}!</h2>\r\n          <p class=\"text-muted\">Manage your service assignments and view customer requests</p>\r\n          \r\n          <div class=\"stats-cards row g-3 mt-3\">\r\n            <div class=\"col-md-4\">\r\n              <div class=\"card bg-primary text-white\">\r\n                <div class=\"card-body\">\r\n                  <h6 class=\"card-title\">Pending Requests</h6>\r\n                  <h3 class=\"mb-0\">{{ pendingRequests.length }}</h3>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-4\">\r\n              <div class=\"card bg-success text-white\">\r\n                <div class=\"card-body\">\r\n                  <h6 class=\"card-title\">In Progress</h6>\r\n                  <h3 class=\"mb-0\">{{ inProgressRequests.length }}</h3>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"col-md-4\">\r\n              <div class=\"card bg-info text-white\">\r\n                <div class=\"card-body\">\r\n                  <h6 class=\"card-title\">Completed</h6>\r\n                  <h3 class=\"mb-0\">{{ completedRequests.length }}</h3>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"col-lg-4 mt-4 mt-lg-0\">\r\n          <div class=\"card\">\r\n            <div class=\"card-body\">\r\n              <h5 class=\"card-title\">Your Service Profile</h5>\r\n              <div class=\"d-flex align-items-center mb-3\">\r\n                <div class=\"rating me-2\">\r\n                  <i v-for=\"i in 5\" :key=\"i\" class=\"fas fa-star\" \r\n                     :class=\"i <= Math.round(profile.average_rating) ? 'text-warning' : 'text-muted'\"></i>\r\n                </div>\r\n                <span>{{ profile.average_rating.toFixed(1) }} / 5 ({{ profile.total_reviews }} reviews)</span>\r\n              </div>\r\n              <p class=\"mb-1\"><strong>Service:</strong> {{ profile.service_type }}</p>\r\n              <p class=\"mb-1\"><strong>Experience:</strong> {{ profile.experience }} years</p>\r\n              <p class=\"mb-0\"><strong>Status:</strong> \r\n                <span class=\"badge\" :class=\"profile.is_approved ? 'bg-success' : 'bg-warning'\">\r\n                  {{ profile.is_approved ? 'Approved' : 'Pending Approval' }}\r\n                </span>\r\n              </p>\r\n              <div class=\"mt-3\">\r\n                <button class=\"btn btn-outline-primary btn-sm\" @click=\"showProfileModal = true\">\r\n                  <i class=\"fas fa-user-edit me-1\"></i> View Full Profile\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Job Availability Toggle -->\r\n      <div class=\"card mb-4\">\r\n        <div class=\"card-body d-flex justify-content-between align-items-center\">\r\n          <div>\r\n            <h5 class=\"mb-0\">Job Availability</h5>\r\n            <p class=\"text-muted mb-0\">Toggle your availability to receive new service requests</p>\r\n          </div>\r\n          <div class=\"form-check form-switch\">\r\n            <input class=\"form-check-input\" type=\"checkbox\" id=\"availabilitySwitch\" v-model=\"isAvailable\" @change=\"updateAvailability\">\r\n            <label class=\"form-check-label\" for=\"availabilitySwitch\">\r\n              <span class=\"badge\" :class=\"isAvailable ? 'bg-success' : 'bg-secondary'\">\r\n                {{ isAvailable ? 'Available' : 'Unavailable' }}\r\n              </span>\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Requests Tabs -->\r\n      <ul class=\"nav nav-tabs mb-4\">\r\n        <li class=\"nav-item\">\r\n          <a \r\n            class=\"nav-link\" \r\n            :class=\"{ active: activeTab === 'available' }\"\r\n            @click.prevent=\"activeTab = 'available'\"\r\n            href=\"#\"\r\n          >\r\n            <i class=\"fas fa-search me-1\"></i> Available Requests\r\n            <span class=\"badge bg-primary ms-1\" v-if=\"availableRequests.length\">{{ availableRequests.length }}</span>\r\n          </a>\r\n        </li>\r\n        <li class=\"nav-item\">\r\n          <a \r\n            class=\"nav-link\" \r\n            :class=\"{ active: activeTab === 'pending' }\"\r\n            @click.prevent=\"activeTab = 'pending'\"\r\n            href=\"#\"\r\n          >\r\n            <i class=\"fas fa-clock me-1\"></i> New Requests\r\n            <span class=\"badge bg-danger ms-1\" v-if=\"pendingRequests.length\">{{ pendingRequests.length }}</span>\r\n          </a>\r\n        </li>\r\n        <li class=\"nav-item\">\r\n          <a \r\n            class=\"nav-link\" \r\n            :class=\"{ active: activeTab === 'assigned' }\"\r\n            @click.prevent=\"activeTab = 'assigned'\"\r\n            href=\"#\"\r\n          >\r\n            <i class=\"fas fa-tools me-1\"></i> In Progress\r\n          </a>\r\n        </li>\r\n        <li class=\"nav-item\">\r\n          <a \r\n            class=\"nav-link\" \r\n            :class=\"{ active: activeTab === 'completed' }\"\r\n            @click.prevent=\"activeTab = 'completed'\"\r\n            href=\"#\"\r\n          >\r\n            <i class=\"fas fa-check-circle me-1\"></i> Completed\r\n          </a>\r\n        </li>\r\n        <li class=\"nav-item\">\r\n          <a \r\n            class=\"nav-link\" \r\n            :class=\"{ active: activeTab === 'reviews' }\"\r\n            @click.prevent=\"activeTab = 'reviews'\"\r\n            href=\"#\"\r\n          >\r\n            <i class=\"fas fa-star me-1\"></i> My Reviews\r\n          </a>\r\n        </li>\r\n      </ul>\r\n\r\n      <!-- Loading State -->\r\n      <div v-if=\"loading\" class=\"text-center my-5\">\r\n        <div class=\"spinner-border text-primary\" role=\"status\">\r\n          <span class=\"visually-hidden\">Loading...</span>\r\n        </div>\r\n        <p class=\"mt-2\">Loading service requests...</p>\r\n      </div>\r\n      \r\n      <!-- Empty State -->\r\n      <div v-else-if=\"filteredRequests.length === 0 && activeTab !== 'reviews'\" class=\"text-center py-5\">\r\n        <i class=\"fas fa-inbox fa-3x text-muted mb-3\"></i>\r\n        <h5>No service requests found</h5>\r\n        <p class=\"text-muted\">{{ getEmptyStateMessage() }}</p>\r\n      </div>\r\n      \r\n      <!-- Service Requests List -->\r\n      <div v-else-if=\"activeTab !== 'reviews'\" class=\"row g-4\">\r\n        <div v-for=\"request in filteredRequests\" :key=\"request.id\" class=\"col-md-6\">\r\n          <div class=\"card h-100\">\r\n            <div class=\"card-header d-flex justify-content-between align-items-center\">\r\n              <span :class=\"getStatusBadgeClass(request.status)\">\r\n                {{ request.status }}\r\n              </span>\r\n              <span class=\"text-muted small\">\r\n                <i class=\"fas fa-calendar me-1\"></i>\r\n                {{ formatDate(request.created_at) }}\r\n              </span>\r\n            </div>\r\n            <div class=\"card-body\">\r\n              <h5 class=\"card-title\">{{ request.service.name }}</h5>\r\n              <p class=\"card-text\">\r\n                <strong>Customer:</strong> {{ request.customer.customer_name }}\r\n              </p>\r\n              <p class=\"card-text\">\r\n                <strong>Location:</strong> PIN Code {{ request.pin_code }}\r\n              </p>\r\n              <div class=\"mb-3\">\r\n                <strong>Instructions:</strong>\r\n                <p class=\"mb-0\">{{ request.special_instructions || 'No special instructions' }}</p>\r\n              </div>\r\n              \r\n              <div class=\"d-flex justify-content-end gap-2\">\r\n                <!-- Actions for pending requests -->\r\n                <template v-if=\"request.status === 'pending'\">\r\n                  <button @click=\"acceptRequest(request.id)\" class=\"btn btn-success btn-sm\">\r\n                    <i class=\"fas fa-check me-1\"></i> Accept\r\n                  </button>\r\n                  <button @click=\"rejectRequest(request.id)\" class=\"btn btn-danger btn-sm\">\r\n                    <i class=\"fas fa-times me-1\"></i> Reject\r\n                  </button>\r\n                </template>\r\n                \r\n                <!-- Actions for in-progress requests -->\r\n                <button v-if=\"request.status === 'in_progress'\" @click=\"completeRequest(request.id)\" class=\"btn btn-primary btn-sm\">\r\n                  <i class=\"fas fa-check-circle me-1\"></i> Mark as Completed\r\n                </button>\r\n                \r\n                <!-- View details button for all requests -->\r\n                <button @click=\"viewRequestDetails(request)\" class=\"btn btn-outline-secondary btn-sm\">\r\n                  <i class=\"fas fa-eye me-1\"></i> Details\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <div v-if=\"request.status === 'completed'\" class=\"card-footer text-muted\">\r\n              <div v-if=\"request.review\" class=\"mt-2\">\r\n                <strong>Customer Review:</strong>\r\n                <div class=\"d-flex align-items-center\">\r\n                  <div class=\"rating me-2\">\r\n                    <i v-for=\"i in 5\" :key=\"i\" class=\"fas fa-star\" \r\n                       :class=\"i <= request.review.rating ? 'text-warning' : 'text-muted'\"></i>\r\n                  </div>\r\n                  <span>{{ request.review.remarks }}</span>\r\n                </div>\r\n              </div>\r\n              <div v-else>\r\n                <i class=\"fas fa-star-half-alt me-1\"></i> Awaiting customer review\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Available Requests List -->\r\n      <div v-else-if=\"activeTab === 'available'\" class=\"row g-4\">\r\n        <div class=\"col-12 mb-3\">\r\n          <div class=\"alert alert-info d-flex align-items-center\">\r\n            <i class=\"fas fa-info-circle me-2\"></i>\r\n            <div>\r\n              These are all available service requests from customers in your area. You can accept any request to provide service.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div v-if=\"availableRequests.length === 0\" class=\"text-center py-5\">\r\n          <i class=\"fas fa-search fa-3x text-muted mb-3\"></i>\r\n          <h5>No available service requests found</h5>\r\n          <p class=\"text-muted\">Check back later for new service requests in your area.</p>\r\n        </div>\r\n        \r\n        <div v-for=\"request in availableRequests\" :key=\"request.id\" class=\"col-md-6\">\r\n          <div class=\"card h-100\">\r\n            <div class=\"card-header d-flex justify-content-between align-items-center\">\r\n              <span class=\"badge bg-info\">Available</span>\r\n              <span class=\"text-muted small\">\r\n                <i class=\"fas fa-calendar me-1\"></i>\r\n                {{ formatDate(request.created_at) }}\r\n              </span>\r\n            </div>\r\n            <div class=\"card-body\">\r\n              <h5 class=\"card-title\">{{ request.service.name }}</h5>\r\n              <div class=\"mb-2 d-flex align-items-center\">\r\n                <div class=\"customer-avatar me-2\">\r\n                  <img :src=\"request.customer.profile_image || 'https://via.placeholder.com/40'\" \r\n                       alt=\"Customer\" class=\"rounded-circle\" width=\"40\" height=\"40\">\r\n                </div>\r\n                <div>\r\n                  <p class=\"card-text mb-0\">\r\n                    <strong>Customer:</strong> {{ request.customer.customer_name }}\r\n                  </p>\r\n                  <p class=\"card-text mb-0 small text-muted\">\r\n                    {{ request.customer.address_area || 'Area' }}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n              <p class=\"card-text\">\r\n                <strong>Location:</strong> PIN Code {{ request.pin_code }}\r\n              </p>\r\n              <div class=\"mb-3\">\r\n                <strong>Instructions:</strong>\r\n                <p class=\"mb-0\">{{ request.special_instructions || 'No special instructions' }}</p>\r\n              </div>\r\n              \r\n              <div class=\"d-flex justify-content-end gap-2\">\r\n                <button @click=\"acceptRequest(request.id)\" class=\"btn btn-success btn-sm\">\r\n                  <i class=\"fas fa-check me-1\"></i> Accept\r\n                </button>\r\n                <button @click=\"rejectRequest(request.id)\" class=\"btn btn-outline-danger btn-sm\">\r\n                  <i class=\"fas fa-times me-1\"></i> Reject\r\n                </button>\r\n                <button @click=\"viewRequestDetails(request)\" class=\"btn btn-outline-secondary btn-sm\">\r\n                  <i class=\"fas fa-eye me-1\"></i> Details\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Reviews Tab Content -->\r\n      <div v-if=\"activeTab === 'reviews'\" class=\"reviews-tab\">\r\n        <div v-if=\"reviews.length === 0\" class=\"text-center py-5\">\r\n          <i class=\"fas fa-star fa-3x text-muted mb-3\"></i>\r\n          <h5>No Reviews Yet</h5>\r\n          <p class=\"text-muted\">Complete service requests to receive customer reviews</p>\r\n        </div>\r\n\r\n        <div v-else class=\"card\">\r\n          <div class=\"card-header bg-white\">\r\n            <div class=\"d-flex justify-content-between align-items-center\">\r\n              <h5 class=\"mb-0\">Customer Reviews</h5>\r\n              <div class=\"rating-summary\">\r\n                <span class=\"badge bg-primary rounded-pill\">\r\n                  <i class=\"fas fa-star me-1\"></i> {{ profile.average_rating.toFixed(1) }}/5\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"card-body p-0\">\r\n            <div class=\"list-group list-group-flush\">\r\n              <div v-for=\"review in reviews\" :key=\"review.id\" class=\"list-group-item\">\r\n                <div class=\"d-flex justify-content-between align-items-start mb-2\">\r\n                  <div>\r\n                    <h6 class=\"mb-0\">{{ review.customer_name }}</h6>\r\n                    <small class=\"text-muted\">{{ formatDate(review.date_created) }}</small>\r\n                  </div>\r\n                  <div class=\"rating\">\r\n                    <i v-for=\"i in 5\" :key=\"i\" class=\"fas fa-star\" \r\n                       :class=\"i <= review.rating ? 'text-warning' : 'text-muted'\"></i>\r\n                  </div>\r\n                </div>\r\n                <p class=\"mb-0\">{{ review.remarks }}</p>\r\n                <small class=\"text-muted\">Service: {{ review.service_name }}</small>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Request Details Modal -->\r\n    <div class=\"modal fade\" :class=\"{ show: showDetailsModal }\" v-if=\"showDetailsModal\">\r\n      <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\">Request Details</h5>\r\n            <button type=\"button\" class=\"btn-close\" @click=\"showDetailsModal = false\"></button>\r\n          </div>\r\n          <div class=\"modal-body\" v-if=\"selectedRequest\">\r\n            <div class=\"mb-3\">\r\n              <h6>Service Information</h6>\r\n              <p class=\"mb-1\"><strong>Service:</strong> {{ selectedRequest.service.name }}</p>\r\n              <p class=\"mb-1\"><strong>Price:</strong> ₹{{ selectedRequest.service.base_price }}</p>\r\n              <p><strong>Status:</strong> \r\n                <span :class=\"getStatusBadgeClass(selectedRequest.status)\">\r\n                  {{ selectedRequest.status }}\r\n                </span>\r\n              </p>\r\n            </div>\r\n            \r\n            <div class=\"mb-3\">\r\n              <h6>Customer Information</h6>\r\n              <p class=\"mb-1\"><strong>Name:</strong> {{ selectedRequest.customer.customer_name }}</p>\r\n              <p class=\"mb-1\"><strong>Phone:</strong> {{ selectedRequest.customer.phone }}</p>\r\n              <p class=\"mb-1\"><strong>PIN Code:</strong> {{ selectedRequest.pin_code }}</p>\r\n              <p class=\"mb-0\">\r\n                <strong>Address:</strong> {{ selectedRequest.customer.address }}\r\n              </p>\r\n            </div>\r\n            \r\n            <div class=\"mb-3\">\r\n              <h6>Timeline</h6>\r\n              <ul class=\"timeline\">\r\n                <li class=\"mb-2\"><strong>Created:</strong> {{ formatDate(selectedRequest.created_at) }}</li>\r\n                <li v-if=\"selectedRequest.accepted_at\" class=\"mb-2\">\r\n                  <strong>Accepted:</strong> {{ formatDate(selectedRequest.accepted_at) }}\r\n                </li>\r\n                <li v-if=\"selectedRequest.completed_at\" class=\"mb-2\">\r\n                  <strong>Completed:</strong> {{ formatDate(selectedRequest.completed_at) }}\r\n                </li>\r\n                <li v-if=\"selectedRequest.closed_at\">\r\n                  <strong>Closed:</strong> {{ formatDate(selectedRequest.closed_at) }}\r\n                </li>\r\n              </ul>\r\n            </div>\r\n            \r\n            <div class=\"mb-0\">\r\n              <h6>Special Instructions</h6>\r\n              <p class=\"mb-0\">{{ selectedRequest.special_instructions || 'No special instructions provided.' }}</p>\r\n            </div>\r\n\r\n            <div v-if=\"selectedRequest.status === 'in_progress'\" class=\"mt-3\">\r\n              <div class=\"alert alert-warning\">\r\n                <i class=\"fas fa-exclamation-triangle me-2\"></i>\r\n                You must confirm that you have exited the customer location before marking the service as completed.\r\n              </div>\r\n              <div class=\"form-check\">\r\n                <input class=\"form-check-input\" type=\"checkbox\" id=\"exitedLocation\" v-model=\"selectedRequest.exited_location\">\r\n                <label class=\"form-check-label\" for=\"exitedLocation\">\r\n                  <strong>I confirm that I have exited the customer location</strong>\r\n                </label>\r\n              </div>\r\n            </div>\r\n            \r\n            <div v-if=\"selectedRequest.status === 'completed'\" class=\"mt-3\">\r\n              <div class=\"alert alert-success\">\r\n                <i class=\"fas fa-check-circle me-2\"></i>\r\n                You have marked this service as completed. Waiting for customer to close the service.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" @click=\"showDetailsModal = false\">Close</button>\r\n            \r\n            <!-- Action buttons based on status -->\r\n            <template v-if=\"selectedRequest && selectedRequest.status === 'pending'\">\r\n              <button @click=\"acceptRequest(selectedRequest.id, true)\" class=\"btn btn-success\">\r\n                <i class=\"fas fa-check me-1\"></i> Accept\r\n              </button>\r\n              <button @click=\"rejectRequest(selectedRequest.id, true)\" class=\"btn btn-danger\">\r\n                <i class=\"fas fa-times me-1\"></i> Reject\r\n              </button>\r\n            </template>\r\n            \r\n            <button v-if=\"selectedRequest && selectedRequest.status === 'in_progress'\" \r\n                    @click=\"completeRequest(selectedRequest.id, true)\" \r\n                    class=\"btn btn-primary\"\r\n                    :disabled=\"!selectedRequest.exited_location\">\r\n              <i class=\"fas fa-check-circle me-1\"></i> Mark as Completed\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Profile Modal -->\r\n    <div class=\"modal fade\" :class=\"{ show: showProfileModal }\" v-if=\"showProfileModal\">\r\n      <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\">Professional Profile</h5>\r\n            <button type=\"button\" class=\"btn-close\" @click=\"showProfileModal = false\"></button>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            <div class=\"row\">\r\n              <div class=\"col-md-4 text-center mb-4 mb-md-0\">\r\n                <div class=\"avatar-container mb-3\">\r\n                  <img src=\"https://via.placeholder.com/150\" alt=\"Profile\" class=\"rounded-circle img-thumbnail\">\r\n                </div>\r\n                <h4>{{ professionalName }}</h4>\r\n                <div class=\"rating mb-2\">\r\n                  <i v-for=\"i in 5\" :key=\"i\" class=\"fas fa-star\" \r\n                    :class=\"i <= Math.round(profile.average_rating) ? 'text-warning' : 'text-muted'\"></i>\r\n                  <span class=\"ms-1\">{{ profile.average_rating.toFixed(1) }}/5</span>\r\n                </div>\r\n                <p class=\"badge bg-primary\">{{ profile.service_type }}</p>\r\n              </div>\r\n              \r\n              <div class=\"col-md-8\">\r\n                <div class=\"mb-3\">\r\n                  <h6>About Me</h6>\r\n                  <p>{{ profile.description || 'No description provided.' }}</p>\r\n                </div>\r\n                \r\n                <div class=\"row\">\r\n                  <div class=\"col-md-6 mb-3\">\r\n                    <h6>Experience</h6>\r\n                    <p>{{ profile.experience }} years</p>\r\n                  </div>\r\n                  <div class=\"col-md-6 mb-3\">\r\n                    <h6>Joined</h6>\r\n                    <p>{{ formatDate(profile.date_created) }}</p>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div class=\"mb-3\">\r\n                  <h6>Specialization</h6>\r\n                  <p>{{ profile.service_type }}</p>\r\n                </div>\r\n                \r\n                <div class=\"mb-3\">\r\n                  <h6>Contact Information</h6>\r\n                  <p class=\"mb-1\"><i class=\"fas fa-envelope me-2\"></i> {{ profile.email }}</p>\r\n                  <p class=\"mb-0\"><i class=\"fas fa-phone me-2\"></i> {{ profile.phone || 'Not provided' }}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <hr>\r\n            \r\n            <div class=\"profile-edit-section\">\r\n              <h5 class=\"mb-3\">Edit Profile</h5>\r\n              <form @submit.prevent=\"updateProfile\">\r\n                <div class=\"mb-3\">\r\n                  <label class=\"form-label\">Description</label>\r\n                  <textarea v-model=\"profileForm.description\" class=\"form-control\" rows=\"3\"></textarea>\r\n                </div>\r\n                \r\n                <div class=\"row\">\r\n                  <div class=\"col-md-6 mb-3\">\r\n                    <label class=\"form-label\">Phone</label>\r\n                    <input type=\"tel\" v-model=\"profileForm.phone\" class=\"form-control\">\r\n                  </div>\r\n                  <div class=\"col-md-6 mb-3\">\r\n                    <label class=\"form-label\">Experience (years)</label>\r\n                    <input type=\"number\" v-model=\"profileForm.experience\" class=\"form-control\" min=\"0\">\r\n                  </div>\r\n                </div>\r\n                \r\n                <div class=\"text-end\">\r\n                  <button type=\"submit\" class=\"btn btn-primary\" :disabled=\"updatingProfile\">\r\n                    <span v-if=\"updatingProfile\" class=\"spinner-border spinner-border-sm me-1\"></span>\r\n                    Save Changes\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, computed, onMounted, reactive } from 'vue';\r\nimport { professionalAPI } from '@/services/api';\r\nimport { useRouter } from 'vue-router';\r\n\r\nexport default {\r\n  name: 'ProfessionalDashboard',\r\n  data() {\r\n    return {\r\n      professionalName: '',\r\n      activeTab: 'pending',\r\n      loading: true,\r\n      serviceRequests: [],\r\n      profile: {\r\n        service_type: '',\r\n        experience: 0,\r\n        average_rating: 0,\r\n        total_reviews: 0,\r\n        is_approved: false,\r\n        description: '',\r\n        email: '',\r\n        phone: '',\r\n        date_created: new Date().toISOString()\r\n      },\r\n      reviews: [],\r\n      showDetailsModal: false,\r\n      showProfileModal: false,\r\n      selectedRequest: null,\r\n      isAvailable: true,\r\n      updatingProfile: false,\r\n      profileForm: {\r\n        description: '',\r\n        phone: '',\r\n        experience: 0\r\n      },\r\n      availableRequests: [],\r\n      error: null\r\n    };\r\n  },\r\n  computed: {\r\n    pendingRequests() {\r\n      return this.serviceRequests.filter(req => req.status === 'pending') || [];\r\n    },\r\n    inProgressRequests() {\r\n      return this.serviceRequests.filter(req => \r\n        req.status === 'in_progress' || req.status === 'assigned'\r\n      ) || [];\r\n    },\r\n    completedRequests() {\r\n      return this.serviceRequests.filter(req => \r\n        req.status === 'completed' || req.status === 'closed'\r\n      ) || [];\r\n    },\r\n    filteredRequests() {\r\n      if (this.activeTab === 'available') {\r\n        return this.availableRequests;\r\n      } else if (this.activeTab === 'pending') {\r\n        return this.pendingRequests;\r\n      } else if (this.activeTab === 'assigned') {\r\n        return this.inProgressRequests;\r\n      } else if (this.activeTab === 'completed') {\r\n        return this.completedRequests;\r\n      }\r\n      return [];\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchData();\r\n  },\r\n  \r\n  methods: {\r\n    checkAuth() {\r\n      const token = localStorage.getItem('token');\r\n      const user = JSON.parse(localStorage.getItem('user') || '{}');\r\n      \r\n      if (!token) {\r\n        console.log('No authentication token found - redirecting to login');\r\n        // Add a small delay to prevent navigation errors during component initialization\r\n        setTimeout(() => {\r\n          this.$router.push('/login');\r\n        }, 100);\r\n        return false;\r\n      }\r\n      \r\n      if (user.role !== 'professional') {\r\n        console.log('User is not a professional - redirecting');\r\n        setTimeout(() => {\r\n          this.$router.push('/login');\r\n        }, 100);\r\n        return false;\r\n      }\r\n      \r\n      this.professionalName = user.name || 'Professional';\r\n      return true;\r\n    },\r\n    \r\n    async fetchData() {\r\n      try {\r\n        // Only proceed if authentication check passed\r\n        if (!this.checkAuth()) {\r\n          return;\r\n        }\r\n        \r\n        this.loading = true;\r\n        this.error = null;\r\n        \r\n        // Only fetch data if we have a token\r\n        const token = localStorage.getItem('token')\r\n        if (!token) {\r\n          throw new Error('Authentication required')\r\n        }\r\n        \r\n        await Promise.all([\r\n          this.fetchProfile(),\r\n          this.fetchRequests()\r\n        ])\r\n      } catch (error) {\r\n        console.error('Dashboard data fetch error:', error)\r\n        this.error = error.message || 'Failed to load dashboard data'\r\n        \r\n        // If token is missing or invalid, redirect to login\r\n        if (error.message.includes('authentication') || error.message.includes('token')) {\r\n          setTimeout(() => this.$router.push('/login'), 1000)\r\n        }\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n    async fetchProfile() {\r\n      try {\r\n        const profileData = await professionalAPI.getProfile();\r\n        this.profile = {\r\n          ...this.profile,\r\n          ...profileData\r\n        };\r\n        \r\n        // Initialize profile form with current values\r\n        this.profileForm.description = profileData.description || '';\r\n        this.profileForm.phone = profileData.phone || '';\r\n        this.profileForm.experience = profileData.experience || 0;\r\n      } catch (error) {\r\n        console.error('Failed to load profile data:', error);\r\n        // Continue with default profile values\r\n      }\r\n    },\r\n    async fetchRequests() {\r\n      try {\r\n        const requestsData = await professionalAPI.getAssignments();\r\n        this.serviceRequests = requestsData || [];\r\n      } catch (error) {\r\n        console.error('Failed to load assignments:', error);\r\n        this.serviceRequests = [];\r\n      }\r\n      \r\n      // Fetch reviews with error handling\r\n      this.fetchReviews();\r\n      \r\n      // Fetch available requests with error handling\r\n      this.fetchAvailableRequests();\r\n    },\r\n    \r\n    async fetchReviews() {\r\n      try {\r\n        const reviewsData = await professionalAPI.getReviews();\r\n        this.reviews = reviewsData || [];\r\n      } catch (error) {\r\n        console.error('Error fetching reviews:', error);\r\n        this.reviews = [];\r\n      }\r\n    },\r\n\r\n    async fetchAvailableRequests() {\r\n      try {\r\n        console.log('Fetching available service requests...');\r\n        // Updated to explicitly fetch ALL available service requests from service_requests table\r\n        const response = await professionalAPI.getAvailableRequests();\r\n        \r\n        // Add dummy data if needed for testing\r\n        if (!response || response.length === 0) {\r\n          console.log('No requests from API, adding sample data for development');\r\n          this.availableRequests = this.generateSampleRequests();\r\n        } else {\r\n          this.availableRequests = response || [];\r\n          \r\n          // Add profile images if missing\r\n          this.availableRequests = this.availableRequests.map(req => {\r\n            if (!req.customer.profile_image) {\r\n              req.customer.profile_image = 'https://via.placeholder.com/40';\r\n            }\r\n            if (!req.customer.address_area && req.pin_code) {\r\n              req.customer.address_area = `Area ${req.pin_code.substring(0, 3)}`;\r\n            }\r\n            return req;\r\n          });\r\n        }\r\n        \r\n        // Sort by created date (newest first)\r\n        this.availableRequests.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));\r\n        \r\n        console.log(`Loaded ${this.availableRequests.length} available requests`);\r\n      } catch (error) {\r\n        console.error('Error fetching available requests:', error);\r\n        // Provide sample data for development/testing\r\n        this.availableRequests = this.generateSampleRequests();\r\n      }\r\n    },\r\n    \r\n    // Generate sample data for testing\r\n    generateSampleRequests() {\r\n      const serviceTypes = [\r\n        'Plumbing Repair', 'Electrical Work', 'House Cleaning', \r\n        'Appliance Repair', 'Pest Control', 'Painting'\r\n      ];\r\n      \r\n      const customerNames = [\r\n        'John Doe', 'Jane Smith', 'Robert Johnson', \r\n        'Emily Clark', 'Michael Brown', 'Sophia Wilson'\r\n      ];\r\n      \r\n      const areas = ['North', 'South', 'East', 'West', 'Central'];\r\n      \r\n      const instructions = [\r\n        'Please arrive before noon', \r\n        'The issue is in the kitchen', \r\n        'I need help with multiple fixtures',\r\n        'Emergency repair needed',\r\n        'Please bring all necessary tools',\r\n        'Call before arriving'\r\n      ];\r\n      \r\n      return Array(6).fill().map((_, i) => ({\r\n        id: 1000 + i,\r\n        status: 'pending',\r\n        service: {\r\n          id: 100 + i,\r\n          name: serviceTypes[i % serviceTypes.length],\r\n          base_price: 500 + (i * 100)\r\n        },\r\n        customer: {\r\n          id: 200 + i,\r\n          customer_name: customerNames[i % customerNames.length],\r\n          phone: `+91 98765${10000 + i}`,\r\n          address: `123 Main St, ${areas[i % areas.length]} Area`,\r\n          address_area: `${areas[i % areas.length]} Area`,\r\n          profile_image: `https://randomuser.me/api/portraits/${i % 2 ? 'women' : 'men'}/${i + 1}.jpg`\r\n        },\r\n        pin_code: `${400000 + (i * 1000)}`,\r\n        special_instructions: instructions[i % instructions.length],\r\n        created_at: new Date(Date.now() - (i * 24 * 60 * 60 * 1000)).toISOString(), // Each one day apart\r\n        exited_location: false\r\n      }));\r\n    },\r\n  \r\n    async acceptRequest(requestId, closeModal = false) {\r\n      try {\r\n        const request = this.availableRequests.find(r => r.id === requestId) || \r\n                      this.serviceRequests.find(r => r.id === requestId);\r\n                      \r\n        if (!request) {\r\n          throw new Error('Request not found');\r\n        }\r\n        \r\n        // First check if the request is already assigned to someone else\r\n        if (request.professional_id && request.professional_id !== this.profile.id) {\r\n          alert('This request has already been assigned to another professional.');\r\n          return;\r\n        }\r\n        \r\n        // Accept the request\r\n        await professionalAPI.updateStatus(requestId, 'in_progress');\r\n        \r\n        // Refresh data after accepting\r\n        await this.fetchData();\r\n        \r\n        if (closeModal) {\r\n          this.showDetailsModal = false;\r\n        }\r\n        \r\n        // Show success notification\r\n        alert('Service request accepted successfully. You can find it in the \"In Progress\" tab.');\r\n      } catch (error) {\r\n        console.error('Error accepting request:', error);\r\n        alert('Failed to accept request: ' + (error.message || 'Unknown error'));\r\n      }\r\n    },\r\n\r\n    async rejectRequest(requestId, closeModal = false) {\r\n      if (confirm('Are you sure you want to reject this request?')) {\r\n        try {\r\n          await professionalAPI.updateStatus(requestId, 'rejected');\r\n          \r\n          // Add reason for rejection if in a modal\r\n          if (closeModal) {\r\n            const reason = prompt('Please provide a reason for rejection (optional):');\r\n            if (reason) {\r\n              await professionalAPI.addRejectionReason(requestId, reason);\r\n            }\r\n          }\r\n          \r\n          await this.fetchData();\r\n          \r\n          if (closeModal) {\r\n            this.showDetailsModal = false;\r\n          }\r\n          \r\n          alert('Service request has been rejected.');\r\n        } catch (error) {\r\n          console.error('Error rejecting request:', error);\r\n          alert('Failed to reject request: ' + (error.message || 'Unknown error'));\r\n        }\r\n      }\r\n    },\r\n\r\n    async completeRequest(requestId, closeModal = false) {\r\n      try {\r\n        const request = this.serviceRequests.find(r => r.id === requestId);\r\n        \r\n        if (!request) {\r\n          throw new Error('Request not found');\r\n        }\r\n        \r\n        // Check if location exit is confirmed\r\n        if (!request.exited_location) {\r\n          // Ask for confirmation to exit location\r\n          if (confirm('Have you exited the customer location? This is required before completing the service.')) {\r\n            // If confirmed, mark as exited first\r\n            await professionalAPI.confirmLocationExit(requestId);\r\n            request.exited_location = true;\r\n          } else {\r\n            // If not confirmed, don't complete\r\n            alert('You must confirm you have exited the customer location before completing the service.');\r\n            return;\r\n          }\r\n        }\r\n        \r\n        // Now complete the request\r\n        await professionalAPI.updateStatus(requestId, 'completed');\r\n        await this.fetchData();\r\n        \r\n        if (closeModal) {\r\n          this.showDetailsModal = false;\r\n        }\r\n        \r\n        alert('Service request marked as completed successfully. The customer will be notified to close the service.');\r\n      } catch (error) {\r\n        console.error('Error completing request:', error);\r\n        alert('Failed to complete the request: ' + (error.message || 'Unknown error'));\r\n      }\r\n    },\r\n    \r\n    // Add the missing method for rejection reason\r\n    async addRejectionReason(requestId, reason) {\r\n      try {\r\n        await professionalAPI.addRejectionReason(requestId, reason);\r\n      } catch (error) {\r\n        console.error('Error adding rejection reason:', error);\r\n      }\r\n    },\r\n\r\n    viewRequestDetails(request) {\r\n      // Add the exited_location property if needed\r\n      this.selectedRequest = {\r\n        ...request,\r\n        exited_location: request.exited_location || false\r\n      };\r\n      this.showDetailsModal = true;\r\n    },\r\n\r\n    async updateAvailability() {\r\n      try {\r\n        await professionalAPI.updateAvailability(this.isAvailable);\r\n        alert(`You are now ${this.isAvailable ? 'available' : 'unavailable'} for new service requests.`);\r\n      } catch (error) {\r\n        console.error('Error updating availability:', error);\r\n        // Revert to previous state if there was an error\r\n        this.isAvailable = !this.isAvailable;\r\n      }\r\n    },\r\n\r\n    async updateProfile() {\r\n      try {\r\n        this.updatingProfile = true;\r\n        await professionalAPI.updateProfile(this.profileForm);\r\n        \r\n        // Update local profile data\r\n        this.profile.description = this.profileForm.description;\r\n        this.profile.phone = this.profileForm.phone;\r\n        this.profile.experience = this.profileForm.experience;\r\n        \r\n        alert('Profile updated successfully!');\r\n      } catch (error) {\r\n        console.error('Error updating profile:', error);\r\n        alert('Failed to update profile. Please try again.');\r\n      } finally {\r\n        this.updatingProfile = false;\r\n      }\r\n    },\r\n\r\n    formatDate(dateString) {\r\n      if (!dateString) return 'N/A';\r\n      const date = new Date(dateString);\r\n      return date.toLocaleString('en-US', {\r\n        year: 'numeric',\r\n        month: 'short',\r\n        day: 'numeric',\r\n        hour: '2-digit',\r\n        minute: '2-digit'\r\n      });\r\n    },\r\n\r\n    getStatusBadgeClass(status) {\r\n      const classes = {\r\n        pending: 'badge bg-warning',\r\n        rejected: 'badge bg-danger',\r\n        in_progress: 'badge bg-primary',\r\n        assigned: 'badge bg-info',\r\n        completed: 'badge bg-success',\r\n        closed: 'badge bg-secondary'\r\n      };\r\n      return classes[status] || 'badge bg-secondary';\r\n    },\r\n\r\n    getEmptyStateMessage() {\r\n      if (this.activeTab === 'available') {\r\n        return 'No service requests available in your area. Check back later for new opportunities.';\r\n      } else if (this.activeTab === 'pending') {\r\n        return 'No new service requests available at the moment. Check back later.';\r\n      } else if (this.activeTab === 'assigned') {\r\n        return 'You have no active service assignments.';\r\n      } else {\r\n        return 'You have not completed any service requests yet.';\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    // Don't call fetchData here since we're doing it in created/checkAuth\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.professional-dashboard {\r\n  background-color: #f8f9fa;\r\n  min-height: 100vh;\r\n}\r\n\r\n.card {\r\n  border: none;\r\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\r\n  transition: transform 0.2s, box-shadow 0.2s;\r\n}\r\n\r\n.card:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.nav-tabs .nav-link {\r\n  cursor: pointer;\r\n  padding: 0.75rem 1rem;\r\n}\r\n\r\n.badge {\r\n  padding: 0.5em 0.8em;\r\n  font-weight: 500;\r\n}\r\n\r\n.modal.show {\r\n  display: block;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n}\r\n\r\n.rating {\r\n  display: inline-block;\r\n}\r\n\r\n.rating .fas {\r\n  color: #e0e0e0;\r\n}\r\n\r\n.rating .fas.text-warning {\r\n  color: #ffc107;\r\n}\r\n\r\n.timeline {\r\n  list-style: none;\r\n  padding-left: 0;\r\n}\r\n\r\n.timeline li {\r\n  position: relative;\r\n  padding-left: 1.5rem;\r\n}\r\n\r\n.timeline li:before {\r\n  content: \"\";\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0.5rem;\r\n  width: 0.5rem;\r\n  height: 0.5rem;\r\n  border-radius: 50%;\r\n  background-color: #0d6efd;\r\n}\r\n\r\n.avatar-container {\r\n  width: 150px;\r\n  height: 150px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.avatar-container img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n}\r\n\r\n.form-check-input[type=\"checkbox\"] {\r\n  width: 1.25em;\r\n  height: 1.25em;\r\n}\r\n\r\n.list-group-item {\r\n  border-left: none;\r\n  border-right: none;\r\n}\r\n\r\n/* Responsive adjustments */\r\n@media (max-width: 768px) {\r\n  .stats-cards {\r\n    margin-top: 1.5rem;\r\n  }\r\n  \r\n  .card-title {\r\n    font-size: 0.9rem;\r\n  }\r\n}\r\n\r\n/* Add new styles */\r\n.alert {\r\n  border-radius: 0.5rem;\r\n}\r\n\r\n.alert-info {\r\n  background-color: rgba(13, 202, 240, 0.1);\r\n  border-color: rgba(13, 202, 240, 0.2);\r\n  color: #055160;\r\n}\r\n\r\n.alert-warning {\r\n  background-color: rgba(255, 193, 7, 0.1);\r\n  border-color: rgba(255, 193, 7, 0.2);\r\n  color: #664d03;\r\n}\r\n\r\n.alert-success {\r\n  background-color: rgba(25, 135, 84, 0.1);\r\n  border-color: rgba(25, 135, 84, 0.2);\r\n  color: #0f5132;\r\n}\r\n\r\n/* Animation for new items */\r\n@keyframes highlight {\r\n  0% { background-color: rgba(25, 135, 84, 0.2); }\r\n  100% { background-color: transparent; }\r\n}\r\n\r\n.highlight-new {\r\n  animation:  2s ease-out;\r\n} \r\n\r\n.customer-avatar img {\r\n  object-fit: cover;\r\n  border: 2px solid #fff;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}