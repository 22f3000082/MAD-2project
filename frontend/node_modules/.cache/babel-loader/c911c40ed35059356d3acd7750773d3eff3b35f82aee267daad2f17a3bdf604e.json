{"ast":null,"code":"import { ref, reactive, onMounted } from 'vue';\nimport axios from 'axios';\nimport router from '@/router';\nexport default {\n  name: 'RegisterView',\n  setup() {\n    const loading = ref(false);\n    const error = ref('');\n    const services = ref([]);\n    const formData = reactive({\n      name: '',\n      email: '',\n      password: '',\n      role: '',\n      service_type: '',\n      experience: '',\n      description: '',\n      phone: '',\n      address: '',\n      pin_code: '',\n      documents: []\n    });\n    const errors = reactive({});\n    const fetchServiceTypes = async () => {\n      let retries = 3;\n      while (retries > 0) {\n        try {\n          const response = await axios.get('http://localhost:8080/api/service-types', {\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            },\n            withCredentials: true\n          });\n          services.value = response.data;\n          break;\n        } catch (err) {\n          console.error('Error fetching services:', err);\n          error.value = 'Failed to load service types. Please refresh the page.';\n          retries--;\n          if (retries > 0) {\n            await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second before retrying\n          }\n        }\n      }\n    };\n    const handleFileUpload = event => {\n      formData.documents = Array.from(event.target.files);\n    };\n    const handleSubmit = async () => {\n      try {\n        loading.value = true;\n        error.value = '';\n\n        // Clear previous errors\n        Object.keys(errors).forEach(key => errors[key] = '');\n\n        // Basic validation\n        if (!formData.name) errors.name = 'Name is required';\n        if (!formData.email) errors.email = 'Email is required';\n        if (!formData.password) errors.password = 'Password is required';\n        if (!formData.role) errors.role = 'Role is required';\n\n        // Role-specific validation\n        if (formData.role === 'professional') {\n          if (!formData.service_type) errors.service_type = 'Service type is required';\n          if (!formData.experience) errors.experience = 'Experience is required';\n        } else if (formData.role === 'customer') {\n          if (!formData.phone) errors.phone = 'Phone is required';\n          if (!formData.address) errors.address = 'Address is required';\n          if (!formData.pin_code) errors.pin_code = 'PIN code is required';\n        }\n\n        // Check if there are any errors\n        if (Object.values(errors).some(error => error)) {\n          return;\n        }\n        const formDataToSend = new FormData();\n\n        // Append all form data\n        Object.keys(formData).forEach(key => {\n          if (key === 'documents') {\n            formData.documents.forEach(file => {\n              formDataToSend.append('documents', file);\n            });\n          } else {\n            formDataToSend.append(key, formData[key]);\n          }\n        });\n        const response = await axios.post('http://localhost:8080/auth/register', formDataToSend, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n            'Accept': 'application/json'\n          },\n          withCredentials: true\n        });\n        console.log('Registration successful:', response.data);\n\n        // Show success message\n        error.value = '';\n        alert('Registration successful! Please login to continue.');\n\n        // Redirect to login page\n        router.push('/login');\n      } catch (err) {\n        console.error('Registration error:', err);\n        error.value = err.response?.data?.message || err.response?.data?.error || 'Registration failed. Please try again.';\n      } finally {\n        loading.value = false;\n      }\n    };\n    onMounted(fetchServiceTypes);\n    return {\n      formData,\n      errors,\n      loading,\n      error,\n      services,\n      handleSubmit,\n      handleFileUpload\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}