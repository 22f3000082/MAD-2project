{"ast":null,"code":"import { ref, computed } from 'vue';\nimport { customerAPI } from '@/services/api';\nexport default {\n  name: 'ServiceReviewForm',\n  props: {\n    requestId: {\n      type: [Number, String],\n      required: true\n    },\n    serviceName: {\n      type: String,\n      default: 'Service'\n    },\n    serviceDate: {\n      type: String,\n      default: null\n    },\n    professionalName: {\n      type: String,\n      default: ''\n    }\n  },\n  emits: ['close', 'submitted'],\n  setup(props, {\n    emit\n  }) {\n    const rating = ref(0);\n    const remarks = ref('');\n    const recommendService = ref(true);\n    const submitting = ref(false);\n    const submitDisabled = computed(() => {\n      return rating.value === 0 || !remarks.value.trim();\n    });\n    const getRatingText = () => {\n      const ratingTexts = ['Select a rating', 'Poor', 'Fair', 'Good', 'Very Good', 'Excellent'];\n      return ratingTexts[rating.value] || 'Select a rating';\n    };\n    const submitReview = async () => {\n      if (submitDisabled.value) return;\n      submitting.value = true;\n      try {\n        const reviewData = {\n          rating: rating.value,\n          remarks: remarks.value,\n          recommended: recommendService.value\n        };\n        await customerAPI.addReview(props.requestId, reviewData);\n        emit('submitted');\n      } catch (error) {\n        console.error('Error submitting review:', error);\n        alert('Failed to submit review: ' + (error.message || 'Unknown error'));\n      } finally {\n        submitting.value = false;\n      }\n    };\n    const close = () => {\n      emit('close');\n    };\n    const formatDate = dateString => {\n      if (!dateString) return '';\n      const date = new Date(dateString);\n      return date.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      });\n    };\n    return {\n      rating,\n      remarks,\n      recommendService,\n      submitting,\n      submitDisabled,\n      getRatingText,\n      submitReview,\n      close,\n      formatDate\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","customerAPI","name","props","requestId","type","Number","String","required","serviceName","default","serviceDate","professionalName","emits","setup","emit","rating","remarks","recommendService","submitting","submitDisabled","value","trim","getRatingText","ratingTexts","submitReview","reviewData","recommended","addReview","error","console","alert","message","close","formatDate","dateString","date","Date","toLocaleDateString","year","month","day"],"sources":["src/components/ServiceReviewForm.vue"],"sourcesContent":["<template>\r\n  <div class=\"service-review-form\">\r\n    <div class=\"modal-header\">\r\n      <h5 class=\"modal-title\">Review Your Service</h5>\r\n      <button type=\"button\" class=\"btn-close\" @click=\"close\"></button>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n      <div class=\"service-summary mb-4 p-3 bg-light rounded\">\r\n        <div class=\"d-flex align-items-center mb-2\">\r\n          <div class=\"service-icon me-3\">\r\n            <i class=\"fas fa-tools fa-2x text-primary\"></i>\r\n          </div>\r\n          <div>\r\n            <h5 class=\"mb-0\">{{ serviceName }}</h5>\r\n            <p class=\"mb-0 text-muted\">{{ formatDate(serviceDate) }}</p>\r\n          </div>\r\n        </div>\r\n        <div v-if=\"professionalName\" class=\"mt-2\">\r\n          <span class=\"text-muted\">Professional:</span> {{ professionalName }}\r\n        </div>\r\n      </div>\r\n      \r\n      <form @submit.prevent=\"submitReview\">\r\n        <div class=\"mb-4\">\r\n          <label class=\"form-label d-block\">Rating</label>\r\n          <div class=\"rating-container d-flex flex-column align-items-center\">\r\n            <div class=\"stars mb-2\">\r\n              <i v-for=\"star in 5\" \r\n                 :key=\"star\" \r\n                 class=\"fas fa-star fa-2x\" \r\n                 :class=\"{ 'text-warning': star <= rating, 'text-muted': star > rating }\"\r\n                 @click=\"rating = star\"></i>\r\n            </div>\r\n            <div class=\"rating-text\">\r\n              {{ getRatingText() }}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"mb-3\">\r\n          <label for=\"reviewRemarks\" class=\"form-label\">Your Feedback</label>\r\n          <textarea\r\n            id=\"reviewRemarks\"\r\n            class=\"form-control\"\r\n            v-model=\"remarks\"\r\n            rows=\"4\"\r\n            placeholder=\"Share your experience with this service...\"\r\n            required\r\n          ></textarea>\r\n          <div class=\"form-text\">Your review helps other customers and improves our service.</div>\r\n        </div>\r\n        \r\n        <div class=\"mb-4\">\r\n          <div class=\"form-check\">\r\n            <input class=\"form-check-input\" type=\"checkbox\" v-model=\"recommendService\" id=\"recommendCheck\">\r\n            <label class=\"form-check-label\" for=\"recommendCheck\">\r\n              I would recommend this service to others\r\n            </label>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"text-end\">\r\n          <button type=\"button\" class=\"btn btn-secondary me-2\" @click=\"close\">\r\n            Cancel\r\n          </button>\r\n          <button type=\"submit\" class=\"btn btn-primary\" :disabled=\"submitDisabled || submitting\">\r\n            <span v-if=\"submitting\" class=\"spinner-border spinner-border-sm me-2\"></span>\r\n            Submit Review\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, computed } from 'vue';\r\nimport { customerAPI } from '@/services/api';\r\n\r\nexport default {\r\n  name: 'ServiceReviewForm',\r\n  props: {\r\n    requestId: {\r\n      type: [Number, String],\r\n      required: true\r\n    },\r\n    serviceName: {\r\n      type: String,\r\n      default: 'Service'\r\n    },\r\n    serviceDate: {\r\n      type: String,\r\n      default: null\r\n    },\r\n    professionalName: {\r\n      type: String,\r\n      default: ''\r\n    }\r\n  },\r\n  emits: ['close', 'submitted'],\r\n  setup(props, { emit }) {\r\n    const rating = ref(0);\r\n    const remarks = ref('');\r\n    const recommendService = ref(true);\r\n    const submitting = ref(false);\r\n    \r\n    const submitDisabled = computed(() => {\r\n      return rating.value === 0 || !remarks.value.trim();\r\n    });\r\n    \r\n    const getRatingText = () => {\r\n      const ratingTexts = [\r\n        'Select a rating',\r\n        'Poor',\r\n        'Fair',\r\n        'Good',\r\n        'Very Good',\r\n        'Excellent'\r\n      ];\r\n      return ratingTexts[rating.value] || 'Select a rating';\r\n    };\r\n    \r\n    const submitReview = async () => {\r\n      if (submitDisabled.value) return;\r\n      \r\n      submitting.value = true;\r\n      try {\r\n        const reviewData = {\r\n          rating: rating.value,\r\n          remarks: remarks.value,\r\n          recommended: recommendService.value\r\n        };\r\n        \r\n        await customerAPI.addReview(props.requestId, reviewData);\r\n        emit('submitted');\r\n      } catch (error) {\r\n        console.error('Error submitting review:', error);\r\n        alert('Failed to submit review: ' + (error.message || 'Unknown error'));\r\n      } finally {\r\n        submitting.value = false;\r\n      }\r\n    };\r\n    \r\n    const close = () => {\r\n      emit('close');\r\n    };\r\n    \r\n    const formatDate = (dateString) => {\r\n      if (!dateString) return '';\r\n      const date = new Date(dateString);\r\n      return date.toLocaleDateString('en-US', {\r\n        year: 'numeric',\r\n        month: 'short',\r\n        day: 'numeric'\r\n      });\r\n    };\r\n    \r\n    return {\r\n      rating,\r\n      remarks,\r\n      recommendService,\r\n      submitting,\r\n      submitDisabled,\r\n      getRatingText,\r\n      submitReview,\r\n      close,\r\n      formatDate\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.stars {\r\n  cursor: pointer;\r\n  user-select: none;\r\n}\r\n\r\n.stars i {\r\n  margin: 0 5px;\r\n  transition: all 0.2s;\r\n}\r\n\r\n.stars i:hover {\r\n  transform: scale(1.2);\r\n}\r\n\r\n.stars i.text-warning {\r\n  color: #ffc107;\r\n}\r\n\r\n.stars i.text-muted {\r\n  color: #e0e0e0;\r\n}\r\n\r\n.rating-text {\r\n  font-weight: 500;\r\n  min-height: 24px;\r\n}\r\n\r\n.service-icon {\r\n  width: 50px;\r\n  height: 50px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border-radius: 50%;\r\n  background-color: rgba(13, 110, 253, 0.1);\r\n}\r\n</style>\r\n"],"mappings":"AA4EA,SAAAA,GAAA,EAAAC,QAAA;AACA,SAAAC,WAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACAC,SAAA;MACAC,IAAA,GAAAC,MAAA,EAAAC,MAAA;MACAC,QAAA;IACA;IACAC,WAAA;MACAJ,IAAA,EAAAE,MAAA;MACAG,OAAA;IACA;IACAC,WAAA;MACAN,IAAA,EAAAE,MAAA;MACAG,OAAA;IACA;IACAE,gBAAA;MACAP,IAAA,EAAAE,MAAA;MACAG,OAAA;IACA;EACA;EACAG,KAAA;EACAC,MAAAX,KAAA;IAAAY;EAAA;IACA,MAAAC,MAAA,GAAAjB,GAAA;IACA,MAAAkB,OAAA,GAAAlB,GAAA;IACA,MAAAmB,gBAAA,GAAAnB,GAAA;IACA,MAAAoB,UAAA,GAAApB,GAAA;IAEA,MAAAqB,cAAA,GAAApB,QAAA;MACA,OAAAgB,MAAA,CAAAK,KAAA,WAAAJ,OAAA,CAAAI,KAAA,CAAAC,IAAA;IACA;IAEA,MAAAC,aAAA,GAAAA,CAAA;MACA,MAAAC,WAAA,IACA,mBACA,QACA,QACA,QACA,aACA,YACA;MACA,OAAAA,WAAA,CAAAR,MAAA,CAAAK,KAAA;IACA;IAEA,MAAAI,YAAA,SAAAA,CAAA;MACA,IAAAL,cAAA,CAAAC,KAAA;MAEAF,UAAA,CAAAE,KAAA;MACA;QACA,MAAAK,UAAA;UACAV,MAAA,EAAAA,MAAA,CAAAK,KAAA;UACAJ,OAAA,EAAAA,OAAA,CAAAI,KAAA;UACAM,WAAA,EAAAT,gBAAA,CAAAG;QACA;QAEA,MAAApB,WAAA,CAAA2B,SAAA,CAAAzB,KAAA,CAAAC,SAAA,EAAAsB,UAAA;QACAX,IAAA;MACA,SAAAc,KAAA;QACAC,OAAA,CAAAD,KAAA,6BAAAA,KAAA;QACAE,KAAA,gCAAAF,KAAA,CAAAG,OAAA;MACA;QACAb,UAAA,CAAAE,KAAA;MACA;IACA;IAEA,MAAAY,KAAA,GAAAA,CAAA;MACAlB,IAAA;IACA;IAEA,MAAAmB,UAAA,GAAAC,UAAA;MACA,KAAAA,UAAA;MACA,MAAAC,IAAA,OAAAC,IAAA,CAAAF,UAAA;MACA,OAAAC,IAAA,CAAAE,kBAAA;QACAC,IAAA;QACAC,KAAA;QACAC,GAAA;MACA;IACA;IAEA;MACAzB,MAAA;MACAC,OAAA;MACAC,gBAAA;MACAC,UAAA;MACAC,cAAA;MACAG,aAAA;MACAE,YAAA;MACAQ,KAAA;MACAC;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}