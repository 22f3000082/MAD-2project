{"ast":null,"code":"import axios from 'axios';\nimport router from '@/router';\n\n// Create axios instance with custom config\nconst api = axios.create({\n  baseURL: 'http://localhost:8080',\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  withCredentials: true // Important for CORS with credentials\n});\n\n// Request interceptor - simplified\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    // Use both header formats to ensure compatibility\n    config.headers['Authentication-Token'] = token;\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Response interceptor\napi.interceptors.response.use(response => response, error => {\n  console.error('Response error:', error.response?.data || error.message);\n  if (error.response) {\n    switch (error.response.status) {\n      case 401:\n        // Unauthorized - clear storage and redirect to login\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        router.push('/login');\n        break;\n      case 403:\n        // Forbidden - redirect to home\n        router.push('/');\n        break;\n      case 500:\n        console.error('Server error:', error.response.data);\n        break;\n    }\n    // Return the error message from the backend if available\n    if (error.response.data && error.response.data.message) {\n      return Promise.reject(new Error(error.response.data.message));\n    }\n  }\n  return Promise.reject(error);\n});\n\n// API Services\n// API Services\nexport const authService = {\n  async register(userData) {\n    try {\n      // Ensure professionals have a selected service type\n      if (userData.role === 'professional' && !userData.service_type) {\n        throw new Error(\"Professionals must select a service type.\");\n      }\n      console.log('Sending registration data:', userData);\n      const response = await api.post('/auth/register', userData);\n      console.log('Registration response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Registration error:', error.response?.data || error.message);\n\n      // Capture and return specific backend errors\n      throw error.response?.data || {\n        message: \"Registration failed. Please try again.\"\n      };\n    }\n  },\n  async login(credentials) {\n    try {\n      console.log('Attempting login:', credentials);\n      const response = await api.post('/auth/login', credentials);\n      if (response.data.token) {\n        localStorage.setItem('token', response.data.token);\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n\n        // Simplified navigation\n        const path = `/${response.data.user.role}/dashboard`;\n        router.push(path).catch(err => {\n          console.error('Navigation error:', err);\n        });\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Login error:', error.response?.data || error.message);\n      throw error;\n    }\n  },\n  async logout() {\n    try {\n      await api.post('/auth/logout');\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n\n      // Only navigate if not already on login page\n      if (router.currentRoute.path !== '/login') {\n        router.push('/login').catch(err => {\n          if (err.name !== 'NavigationDuplicated') {\n            console.error('Navigation error:', err);\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Logout error:', error.response?.data || error.message);\n      // Still clear local storage and redirect even if API call fails\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n\n      // Only navigate if not already on login page\n      if (router.currentRoute.path !== '/login') {\n        router.push('/login').catch(err => {\n          if (err.name !== 'NavigationDuplicated') {\n            console.error('Navigation error:', err);\n          }\n        });\n      }\n    }\n  },\n  getCurrentUser() {\n    const userStr = localStorage.getItem('user');\n    return userStr ? JSON.parse(userStr) : null;\n  }\n};\nexport const serviceAPI = {\n  async getServices(params = {}) {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      const response = await api.get('/api/admin/services', {\n        params,\n        headers: {\n          'Authentication-Token': token\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching services:', error);\n      throw error;\n    }\n  },\n  async getServiceById(id) {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      const response = await api.get(`/api/services/${id}`, {\n        headers: {\n          'Authentication-Token': token\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching service:', error);\n      throw error;\n    }\n  },\n  // Add a new method to fetch service types directly\n  async getServiceTypes() {\n    try {\n      const response = await api.get('/api/service-types');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching service types:', error);\n      throw error;\n    }\n  }\n};\nexport const customerAPI = {\n  async getRequests() {\n    try {\n      const response = await api.get('/api/customer/requests');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching requests:', error);\n      throw error;\n    }\n  },\n  async createRequest(data) {\n    try {\n      const response = await api.post('/api/customer/requests', data);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating request:', error);\n      throw error;\n    }\n  },\n  async updateRequest(requestId, data) {\n    try {\n      const response = await api.put(`/api/customer/requests/${requestId}`, data);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating request:', error);\n      throw error;\n    }\n  },\n  async closeRequest(requestId) {\n    try {\n      const response = await api.put(`/api/customer/requests/${requestId}/close`);\n      return response.data;\n    } catch (error) {\n      console.error('Error closing request:', error);\n      throw error;\n    }\n  },\n  async addReview(requestId, reviewData) {\n    try {\n      const response = await api.post(`/api/customer/requests/${requestId}/review`, reviewData);\n      return response.data;\n    } catch (error) {\n      console.error('Error adding review:', error);\n      throw error;\n    }\n  }\n};\nexport const professionalAPI = {\n  async getAssignments(status = null) {\n    try {\n      console.log('Fetching professional assignments', status ? `with status: ${status}` : '');\n      const params = status ? {\n        status\n      } : {};\n      const response = await api.get('/api/professional/assignments', {\n        params\n      });\n      console.log('Received assignments:', response.data.length);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching assignments:', error);\n      throw error;\n    }\n  },\n  async updateStatus(requestId, status) {\n    try {\n      console.log(`Updating request ${requestId} status to ${status}`);\n      const response = await api.put(`/api/professional/requests/${requestId}`, {\n        status\n      });\n      console.log('Status update response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating status:', error);\n      throw error;\n    }\n  },\n  async getProfile() {\n    try {\n      console.log('Fetching professional profile');\n      const response = await api.get('/api/professional/profile');\n      console.log('Retrieved profile data');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching profile:', error);\n      throw error;\n    }\n  },\n  async updateProfile(data) {\n    try {\n      console.log('Updating professional profile with data:', data);\n      const response = await api.put('/api/professional/profile', data);\n      console.log('Profile update response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      throw error;\n    }\n  }\n};\nexport const adminAPI = {\n  async getUsers(role = null) {\n    try {\n      console.log('Fetching users...');\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      const params = role ? {\n        role\n      } : {};\n      const response = await api.get('/api/admin/users', {\n        params\n      });\n\n      // Ensure users have the 'name' property for display\n      return response.data.map(user => {\n        if (!user.name) {\n          // Set a fallback name if none is provided\n          user.name = user.username || `User ${user.id}`;\n        }\n        return user;\n      });\n    } catch (error) {\n      console.error('Error fetching users:', error.response?.data || error.message);\n      if (error.response?.status === 401) {\n        console.log('Unauthorized. Please check your token.');\n      }\n      throw error;\n    }\n  },\n  async approveUser(userId) {\n    try {\n      console.log(`Approving professional with ID: ${userId}`);\n      const response = await api.post(`/api/admin/professionals/${userId}/approve`);\n      console.log('Professional approved:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error approving user:', error);\n      throw error;\n    }\n  },\n  async blockUser(userId, reason = 'Violation of terms of service') {\n    try {\n      console.log(`Blocking user with ID: ${userId}, reason: ${reason}`);\n      const response = await api.post(`/api/admin/users/${userId}/block`, {\n        reason\n      });\n      console.log('User blocked:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error blocking user:', error);\n      throw error;\n    }\n  },\n  async unblockUser(userId) {\n    try {\n      console.log(`Unblocking user with ID: ${userId}`);\n      const response = await api.post(`/api/admin/users/${userId}/unblock`);\n      console.log('User unblocked:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error unblocking user:', error);\n      throw error;\n    }\n  },\n  async getServices() {\n    try {\n      console.log('Fetching services...');\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      const response = await api.get('/api/admin/services');\n\n      // Transform services to expected format\n      return response.data.map(service => ({\n        id: service.id,\n        name: service.name,\n        description: service.description || '',\n        basePrice: service.base_price,\n        timeRequired: service.time_required,\n        category: service.category || 'General',\n        status: service.is_active !== false ? 'active' : 'inactive'\n      }));\n    } catch (error) {\n      console.error('Error fetching services:', error.response?.data || error.message);\n      throw error;\n    }\n  },\n  async createService(serviceData) {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      const formattedData = {\n        name: serviceData.name,\n        description: serviceData.description,\n        base_price: Number(serviceData.basePrice),\n        time_required: Number(serviceData.timeRequired),\n        category: serviceData.category || 'General'\n      };\n      const response = await api.post('/api/admin/services', formattedData, {\n        headers: {\n          'Authentication-Token': token\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error creating service:', error.response?.data || error);\n      if (error.response?.status === 400) {\n        throw new Error(`Validation error: ${error.response.data.message || 'Invalid data'}`);\n      }\n      throw error;\n    }\n  },\n  async updateService(serviceId, serviceData) {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      const response = await api.put(`/api/admin/services/${serviceId}`, serviceData, {\n        headers: {\n          'Authentication-Token': token\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error updating service:', error);\n      throw error;\n    }\n  },\n  async deleteService(serviceId) {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      const response = await api.delete(`/api/admin/services/${serviceId}`, {\n        headers: {\n          'Authentication-Token': token\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting service:', error);\n      throw error;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","router","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","console","data","message","status","removeItem","push","Error","authService","register","userData","role","service_type","log","post","login","credentials","setItem","JSON","stringify","user","path","catch","err","logout","currentRoute","name","getCurrentUser","userStr","parse","serviceAPI","getServices","params","get","getServiceById","id","getServiceTypes","customerAPI","getRequests","createRequest","updateRequest","requestId","put","closeRequest","addReview","reviewData","professionalAPI","getAssignments","length","updateStatus","getProfile","updateProfile","adminAPI","getUsers","map","username","approveUser","userId","blockUser","reason","unblockUser","service","description","basePrice","base_price","timeRequired","time_required","category","is_active","createService","serviceData","formattedData","Number","updateService","serviceId","deleteService","delete"],"sources":["C:/Users/91829/OneDrive/Documents/VS CODE/Household_service_22f3000082/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios'\r\nimport router from '@/router'\r\n\r\n// Create axios instance with custom config\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:8080',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json'\r\n    \r\n  },\r\n  withCredentials: true // Important for CORS with credentials\r\n})\r\n\r\n// Request interceptor - simplified\r\napi.interceptors.request.use(config => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    // Use both header formats to ensure compatibility\r\n    config.headers['Authentication-Token'] = token;\r\n    config.headers['Authorization'] = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n}, error => Promise.reject(error));\r\n\r\n// Response interceptor\r\napi.interceptors.response.use(\r\n  response => response,\r\n  error => {\r\n    console.error('Response error:', error.response?.data || error.message)\r\n    if (error.response) {\r\n      switch (error.response.status) {\r\n        case 401:\r\n          // Unauthorized - clear storage and redirect to login\r\n          localStorage.removeItem('token')\r\n          localStorage.removeItem('user')\r\n          router.push('/login')\r\n          break\r\n        case 403:\r\n          // Forbidden - redirect to home\r\n          router.push('/')\r\n          break\r\n        case 500:\r\n          console.error('Server error:', error.response.data)\r\n          break\r\n      }\r\n      // Return the error message from the backend if available\r\n      if (error.response.data && error.response.data.message) {\r\n        return Promise.reject(new Error(error.response.data.message))\r\n      }\r\n    }\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// API Services\r\n// API Services\r\nexport const authService = {\r\n  async register(userData) {\r\n    try {\r\n      // Ensure professionals have a selected service type\r\n      if (userData.role === 'professional' && !userData.service_type) {\r\n        throw new Error(\"Professionals must select a service type.\");\r\n      }\r\n\r\n      console.log('Sending registration data:', userData);\r\n\r\n      const response = await api.post('/auth/register', userData);\r\n\r\n      console.log('Registration response:', response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Registration error:', error.response?.data || error.message);\r\n\r\n      // Capture and return specific backend errors\r\n      throw error.response?.data || { message: \"Registration failed. Please try again.\" };\r\n    }\r\n  },\r\n\r\n  async login(credentials) {\r\n    try {\r\n      console.log('Attempting login:', credentials)\r\n      const response = await api.post('/auth/login', credentials)\r\n      \r\n      if (response.data.token) {\r\n        localStorage.setItem('token', response.data.token)\r\n        localStorage.setItem('user', JSON.stringify(response.data.user))\r\n        \r\n        // Simplified navigation\r\n        const path = `/${response.data.user.role}/dashboard`\r\n        router.push(path).catch(err => {\r\n          console.error('Navigation error:', err)\r\n        })\r\n      }\r\n      \r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Login error:', error.response?.data || error.message)\r\n      throw error\r\n    }\r\n  },\r\n\r\n  async logout() {\r\n    try {\r\n      await api.post('/auth/logout')\r\n      localStorage.removeItem('token')\r\n      localStorage.removeItem('user')\r\n\r\n      // Only navigate if not already on login page\r\n      if (router.currentRoute.path !== '/login') {\r\n      router.push('/login').catch(err => {\r\n          if (err.name !== 'NavigationDuplicated') {\r\n            console.error('Navigation error:', err)\r\n          }\r\n        })\r\n      }\r\n    } catch (error) {\r\n      console.error('Logout error:', error.response?.data || error.message)\r\n      // Still clear local storage and redirect even if API call fails\r\n      localStorage.removeItem('token')\r\n      localStorage.removeItem('user')\r\n\r\n      // Only navigate if not already on login page\r\n      if (router.currentRoute.path !== '/login') {\r\n      router.push('/login').catch(err => {\r\n          if (err.name !== 'NavigationDuplicated') {\r\n            console.error('Navigation error:', err)\r\n          }\r\n        })\r\n      }\r\n    }\r\n  },\r\n\r\n  getCurrentUser() {\r\n    const userStr = localStorage.getItem('user')\r\n    return userStr ? JSON.parse(userStr) : null\r\n  }\r\n}\r\n\r\nexport const serviceAPI = {\r\n  async getServices(params = {}) {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n\r\n      const response = await api.get('/api/admin/services', { \r\n        params,\r\n        headers: {\r\n          'Authentication-Token': token\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching services:', error)\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getServiceById(id) {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n\r\n      const response = await api.get(`/api/services/${id}`, {\r\n        headers: {\r\n          'Authentication-Token': token\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching service:', error)\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  // Add a new method to fetch service types directly\r\n  async getServiceTypes() {\r\n    try {\r\n      const response = await api.get('/api/service-types');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching service types:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport const customerAPI = {\r\n  async getRequests() {\r\n    try {\r\n      const response = await api.get('/api/customer/requests')\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error fetching requests:', error)\r\n      throw error\r\n    }\r\n  },\r\n\r\n  async createRequest(data) {\r\n    try {\r\n      const response = await api.post('/api/customer/requests', data)\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error creating request:', error)\r\n      throw error\r\n    }\r\n  },\r\n\r\n  async updateRequest(requestId, data) {\r\n    try {\r\n      const response = await api.put(`/api/customer/requests/${requestId}`, data)\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error updating request:', error)\r\n      throw error\r\n    }\r\n  },\r\n\r\n  async closeRequest(requestId) {\r\n    try {\r\n      const response = await api.put(`/api/customer/requests/${requestId}/close`)\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error closing request:', error)\r\n      throw error\r\n    }\r\n  },\r\n\r\n  async addReview(requestId, reviewData) {\r\n    try {\r\n      const response = await api.post(`/api/customer/requests/${requestId}/review`, reviewData)\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error adding review:', error)\r\n      throw error\r\n    }\r\n  }\r\n}\r\n\r\nexport const professionalAPI = {\r\n  async getAssignments(status = null) {\r\n    try {\r\n      console.log('Fetching professional assignments', status ? `with status: ${status}` : '')\r\n      const params = status ? { status } : {}\r\n      const response = await api.get('/api/professional/assignments', { params })\r\n      console.log('Received assignments:', response.data.length)\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error fetching assignments:', error)\r\n      throw error\r\n    }\r\n  },\r\n\r\n  async updateStatus(requestId, status) {\r\n    try {\r\n      console.log(`Updating request ${requestId} status to ${status}`)\r\n      const response = await api.put(`/api/professional/requests/${requestId}`, { status })\r\n      console.log('Status update response:', response.data)\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error updating status:', error)\r\n      throw error\r\n    }\r\n  },\r\n\r\n  async getProfile() {\r\n    try {\r\n      console.log('Fetching professional profile')\r\n      const response = await api.get('/api/professional/profile')\r\n      console.log('Retrieved profile data')\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error fetching profile:', error)\r\n      throw error\r\n    }\r\n  },\r\n\r\n  async updateProfile(data) {\r\n    try {\r\n      console.log('Updating professional profile with data:', data)\r\n      const response = await api.put('/api/professional/profile', data)\r\n      console.log('Profile update response:', response.data)\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error updating profile:', error)\r\n      throw error\r\n    }\r\n  }\r\n}\r\n\r\nexport const adminAPI = {\r\n  async getUsers(role = null) {\r\n    try {\r\n      console.log('Fetching users...');\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n\r\n      const params = role ? { role } : {};\r\n      const response = await api.get('/api/admin/users', { params });\r\n      \r\n      // Ensure users have the 'name' property for display\r\n      return response.data.map(user => {\r\n        if (!user.name) {\r\n          // Set a fallback name if none is provided\r\n          user.name = user.username || `User ${user.id}`;\r\n        }\r\n        return user;\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching users:', error.response?.data || error.message);\r\n      if (error.response?.status === 401) {\r\n        console.log('Unauthorized. Please check your token.');\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async approveUser(userId) {\r\n    try {\r\n      console.log(`Approving professional with ID: ${userId}`);\r\n      const response = await api.post(`/api/admin/professionals/${userId}/approve`);\r\n      console.log('Professional approved:', response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error approving user:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async blockUser(userId, reason = 'Violation of terms of service') {\r\n    try {\r\n      console.log(`Blocking user with ID: ${userId}, reason: ${reason}`);\r\n      const response = await api.post(`/api/admin/users/${userId}/block`, { reason });\r\n      console.log('User blocked:', response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error blocking user:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async unblockUser(userId) {\r\n    try {\r\n      console.log(`Unblocking user with ID: ${userId}`);\r\n      const response = await api.post(`/api/admin/users/${userId}/unblock`);\r\n      console.log('User unblocked:', response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error unblocking user:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getServices() {\r\n    try {\r\n      console.log('Fetching services...');\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n\r\n      const response = await api.get('/api/admin/services');\r\n      \r\n      // Transform services to expected format\r\n      return response.data.map(service => ({\r\n        id: service.id,\r\n        name: service.name,\r\n        description: service.description || '',\r\n        basePrice: service.base_price,\r\n        timeRequired: service.time_required,\r\n        category: service.category || 'General',\r\n        status: service.is_active !== false ? 'active' : 'inactive'\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching services:', error.response?.data || error.message);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async createService(serviceData) {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n\r\n      const formattedData = {\r\n        name: serviceData.name,\r\n        description: serviceData.description,\r\n        base_price: Number(serviceData.basePrice),\r\n        time_required: Number(serviceData.timeRequired),\r\n        category: serviceData.category || 'General'\r\n      };\r\n\r\n      const response = await api.post('/api/admin/services', formattedData, {\r\n        headers: {\r\n          'Authentication-Token': token\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating service:', error.response?.data || error);\r\n      if (error.response?.status === 400) {\r\n        throw new Error(`Validation error: ${error.response.data.message || 'Invalid data'}`);\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async updateService(serviceId, serviceData) {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n\r\n      const response = await api.put(`/api/admin/services/${serviceId}`, serviceData, {\r\n        headers: {\r\n          'Authentication-Token': token\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error updating service:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async deleteService(serviceId) {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n\r\n      const response = await api.delete(`/api/admin/services/${serviceId}`, {\r\n        headers: {\r\n          'Authentication-Token': token\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error deleting service:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default api"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}