{"ast":null,"code":"import { authService } from '@/services/api';\nexport default {\n  name: 'LoginView',\n  data() {\n    return {\n      formData: {\n        email: '',\n        password: ''\n      },\n      errors: {},\n      loginError: '',\n      isLoading: false,\n      showPassword: false\n    };\n  },\n  methods: {\n    togglePassword() {\n      this.showPassword = !this.showPassword;\n    },\n    validateForm() {\n      this.errors = {};\n      let isValid = true;\n      if (!this.formData.email) {\n        this.errors.email = 'Email is required';\n        isValid = false;\n      } else if (!/\\S+@\\S+\\.\\S+/.test(this.formData.email)) {\n        this.errors.email = 'Please enter a valid email address';\n        isValid = false;\n      }\n      if (!this.formData.password) {\n        this.errors.password = 'Password is required';\n        isValid = false;\n      }\n      return isValid;\n    },\n    async handleSubmit() {\n      this.loginError = '';\n      if (!this.validateForm()) {\n        return;\n      }\n      this.isLoading = true;\n      try {\n        const response = await authService.login(this.formData);\n\n        // Redirect based on user role\n        switch (response.user.role) {\n          case 'admin':\n            await this.$router.push('/admin/dashboard');\n            break;\n          case 'customer':\n            await this.$router.push('/customer/dashboard');\n            break;\n          case 'professional':\n            if (!response.user.is_approved) {\n              this.loginError = 'Your account is pending approval. Please wait for admin verification.';\n              localStorage.removeItem('token');\n              localStorage.removeItem('user');\n              return;\n            }\n            await this.$router.push('/professional/dashboard');\n            break;\n          default:\n            await this.$router.push('/');\n        }\n      } catch (error) {\n        console.error('Login error:', error);\n        if (error.response?.status === 401) {\n          this.loginError = 'Invalid email or password';\n        } else if (error.message) {\n          this.loginError = error.message;\n        } else {\n          this.loginError = 'Network error. Please check your connection and try again.';\n        }\n      } finally {\n        this.isLoading = false;\n      }\n    }\n  },\n  created() {\n    // Clear any existing auth data on component mount\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}