{"ast":null,"code":"import { customerAPI, serviceAPI } from '@/services/api';\nexport default {\n  name: 'CustomerDashboard',\n  data() {\n    return {\n      userName: JSON.parse(localStorage.getItem('user'))?.name || 'Customer',\n      activeTab: 'active',\n      searchQuery: {\n        name: '',\n        pinCode: '',\n        category: ''\n      },\n      services: [],\n      categories: [],\n      serviceRequests: [],\n      showNewRequestModal: false,\n      showReviewModal: false,\n      isLoading: false,\n      newRequest: {\n        service_id: '',\n        pin_code: '',\n        special_instructions: ''\n      },\n      review: {\n        rating: 0,\n        remarks: ''\n      },\n      selectedRequest: null\n    };\n  },\n  computed: {\n    filteredRequests() {\n      return this.serviceRequests.filter(request => {\n        if (this.activeTab === 'active') {\n          return ['pending', 'assigned', 'in_progress'].includes(request.status);\n        } else {\n          return ['completed', 'closed'].includes(request.status);\n        }\n      });\n    }\n  },\n  methods: {\n    async fetchServices() {\n      try {\n        const response = await serviceAPI.getServices();\n        this.services = response;\n        this.categories = [...new Set(response.map(service => service.category))];\n      } catch (error) {\n        console.error('Error fetching services:', error);\n      }\n    },\n    async fetchRequests() {\n      try {\n        const response = await customerAPI.getRequests();\n        this.serviceRequests = response;\n      } catch (error) {\n        console.error('Error fetching requests:', error);\n      }\n    },\n    async searchServices() {\n      try {\n        const response = await serviceAPI.searchServices(this.searchQuery);\n        this.services = response;\n      } catch (error) {\n        console.error('Error searching services:', error);\n      }\n    },\n    async createRequest() {\n      this.isLoading = true;\n      try {\n        await customerAPI.createRequest(this.newRequest);\n        this.showNewRequestModal = false;\n        this.newRequest = {\n          service_id: '',\n          pin_code: '',\n          special_instructions: ''\n        };\n        await this.fetchRequests();\n      } catch (error) {\n        console.error('Error creating request:', error);\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    async closeRequest(request) {\n      if (confirm('Are you sure you want to close this request?')) {\n        try {\n          await customerAPI.closeRequest(request.id);\n          await this.fetchRequests();\n        } catch (error) {\n          console.error('Error closing request:', error);\n        }\n      }\n    },\n    editRequest(request) {\n      // Implement edit functionality\n      console.log('Edit request:', request);\n    },\n    addReview(request) {\n      this.selectedRequest = request;\n      this.review = {\n        rating: 0,\n        remarks: ''\n      };\n      this.showReviewModal = true;\n    },\n    async submitReview() {\n      if (!this.selectedRequest) return;\n      this.isLoading = true;\n      try {\n        await customerAPI.addReview(this.selectedRequest.id, this.review);\n        this.showReviewModal = false;\n        await this.fetchRequests();\n      } catch (error) {\n        console.error('Error submitting review:', error);\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    formatDate(date) {\n      return new Date(date).toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    },\n    getStatusBadgeClass(status) {\n      const classes = {\n        pending: 'badge bg-warning',\n        assigned: 'badge bg-info',\n        in_progress: 'badge bg-primary',\n        completed: 'badge bg-success',\n        closed: 'badge bg-secondary'\n      };\n      return classes[status] || 'badge bg-secondary';\n    }\n  },\n  async created() {\n    await Promise.all([this.fetchServices(), this.fetchRequests()]);\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}