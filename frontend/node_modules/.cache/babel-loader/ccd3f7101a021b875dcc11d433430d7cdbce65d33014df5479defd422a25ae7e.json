{"ast":null,"code":"import { customerAPI } from '@/services/api';\nexport default {\n  name: 'ServiceReviewForm',\n  props: {\n    requestId: {\n      type: Number,\n      required: true\n    },\n    serviceName: {\n      type: String,\n      default: 'Service'\n    },\n    serviceDate: {\n      type: String,\n      default: null\n    },\n    professionalName: {\n      type: String,\n      default: 'Professional'\n    }\n  },\n  data() {\n    return {\n      rating: 0,\n      hoverRating: 0,\n      remarks: '',\n      isSubmitting: false,\n      validationErrors: {\n        rating: '',\n        remarks: ''\n      }\n    };\n  },\n  methods: {\n    setRating(value) {\n      this.rating = value;\n      this.validationErrors.rating = '';\n    },\n    getRatingText() {\n      const texts = ['Select a rating', 'Poor', 'Fair', 'Good', 'Very Good', 'Excellent'];\n      return texts[this.rating] || texts[0];\n    },\n    validateForm() {\n      let isValid = true;\n      this.validationErrors = {\n        rating: '',\n        remarks: ''\n      };\n      if (!this.rating || this.rating < 1) {\n        this.validationErrors.rating = 'Please select a rating';\n        isValid = false;\n      }\n      if (!this.remarks.trim()) {\n        this.validationErrors.remarks = 'Please provide some comments about your experience';\n        isValid = false;\n      } else if (this.remarks.length < 5) {\n        this.validationErrors.remarks = 'Comments must be at least 5 characters';\n        isValid = false;\n      }\n      return isValid;\n    },\n    async submitReview() {\n      try {\n        if (!this.validateForm()) {\n          return;\n        }\n        this.isSubmitting = true;\n        const reviewData = {\n          rating: this.rating,\n          remarks: this.remarks\n        };\n        await customerAPI.addReview(this.requestId, reviewData);\n\n        // Clear form and emit event\n        this.rating = 0;\n        this.remarks = '';\n        this.$emit('submitted');\n      } catch (error) {\n        console.error('Error submitting review:', error);\n        alert('Failed to submit review: ' + (error.message || 'Unknown error'));\n      } finally {\n        this.isSubmitting = false;\n      }\n    },\n    formatDate(dateString) {\n      if (!dateString) return 'N/A';\n      const date = new Date(dateString);\n      return date.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      });\n    }\n  }\n};","map":{"version":3,"names":["customerAPI","name","props","requestId","type","Number","required","serviceName","String","default","serviceDate","professionalName","data","rating","hoverRating","remarks","isSubmitting","validationErrors","methods","setRating","value","getRatingText","texts","validateForm","isValid","trim","length","submitReview","reviewData","addReview","$emit","error","console","alert","message","formatDate","dateString","date","Date","toLocaleDateString","year","month","day"],"sources":["src/components/ServiceReviewForm.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"modal-header\">\r\n      <h5 class=\"modal-title\">Rate Your Service</h5>\r\n      <button type=\"button\" class=\"btn-close\" @click=\"$emit('close')\"></button>\r\n    </div>\r\n    <div class=\"modal-body\">\r\n      <div class=\"service-review-form\">\r\n        <div class=\"text-center mb-4\">\r\n          <h5>{{ serviceName }}</h5>\r\n          <p class=\"text-muted small\">\r\n            Completed on {{ formatDate(serviceDate) }} by {{ professionalName }}\r\n          </p>\r\n        </div>\r\n        \r\n        <form @submit.prevent=\"submitReview\">\r\n          <!-- Star Rating Component -->\r\n          <div class=\"mb-4 text-center\">\r\n            <label class=\"form-label d-block\">Your Rating</label>\r\n            <div class=\"star-rating\">\r\n              <span \r\n                v-for=\"star in 5\" \r\n                :key=\"star\" \r\n                class=\"star-rating-item\"\r\n                :class=\"{ 'selected': star <= rating }\"\r\n                @click=\"setRating(star)\"\r\n                @mouseover=\"hoverRating = star\"\r\n                @mouseleave=\"hoverRating = 0\"\r\n              >\r\n                <i class=\"fas fa-star\" :class=\"{ \r\n                  'text-warning': star <= (hoverRating || rating),\r\n                  'text-muted': star > (hoverRating || rating)\r\n                }\"></i>\r\n              </span>\r\n            </div>\r\n            <div class=\"rating-text mt-2\">\r\n              {{ getRatingText() }}\r\n            </div>\r\n            <div class=\"text-danger\" v-if=\"validationErrors.rating\">\r\n              {{ validationErrors.rating }}\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- Comments Field -->\r\n          <div class=\"mb-4\">\r\n            <label for=\"reviewRemarks\" class=\"form-label\">Your Comments</label>\r\n            <textarea\r\n              id=\"reviewRemarks\"\r\n              v-model=\"remarks\"\r\n              class=\"form-control\"\r\n              rows=\"4\"\r\n              placeholder=\"Share your experience with this service professional...\"\r\n            ></textarea>\r\n            <div class=\"text-danger\" v-if=\"validationErrors.remarks\">\r\n              {{ validationErrors.remarks }}\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- Submit Button -->\r\n          <div class=\"d-flex justify-content-end\">\r\n            <button type=\"button\" class=\"btn btn-secondary me-2\" @click=\"$emit('close')\">Cancel</button>\r\n            <button type=\"submit\" class=\"btn btn-primary\" :disabled=\"isSubmitting\">\r\n              <span v-if=\"isSubmitting\" class=\"spinner-border spinner-border-sm me-1\"></span>\r\n              Submit Review\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { customerAPI } from '@/services/api';\r\n\r\nexport default {\r\n  name: 'ServiceReviewForm',\r\n  props: {\r\n    requestId: {\r\n      type: Number,\r\n      required: true\r\n    },\r\n    serviceName: {\r\n      type: String,\r\n      default: 'Service'\r\n    },\r\n    serviceDate: {\r\n      type: String,\r\n      default: null\r\n    },\r\n    professionalName: {\r\n      type: String,\r\n      default: 'Professional'\r\n    }\r\n  },\r\n  \r\n  data() {\r\n    return {\r\n      rating: 0,\r\n      hoverRating: 0,\r\n      remarks: '',\r\n      isSubmitting: false,\r\n      validationErrors: {\r\n        rating: '',\r\n        remarks: ''\r\n      }\r\n    };\r\n  },\r\n  \r\n  methods: {\r\n    setRating(value) {\r\n      this.rating = value;\r\n      this.validationErrors.rating = '';\r\n    },\r\n    \r\n    getRatingText() {\r\n      const texts = [\r\n        'Select a rating',\r\n        'Poor',\r\n        'Fair',\r\n        'Good',\r\n        'Very Good',\r\n        'Excellent'\r\n      ];\r\n      return texts[this.rating] || texts[0];\r\n    },\r\n    \r\n    validateForm() {\r\n      let isValid = true;\r\n      this.validationErrors = {\r\n        rating: '',\r\n        remarks: ''\r\n      };\r\n      \r\n      if (!this.rating || this.rating < 1) {\r\n        this.validationErrors.rating = 'Please select a rating';\r\n        isValid = false;\r\n      }\r\n      \r\n      if (!this.remarks.trim()) {\r\n        this.validationErrors.remarks = 'Please provide some comments about your experience';\r\n        isValid = false;\r\n      } else if (this.remarks.length < 5) {\r\n        this.validationErrors.remarks = 'Comments must be at least 5 characters';\r\n        isValid = false;\r\n      }\r\n      \r\n      return isValid;\r\n    },\r\n    \r\n    async submitReview() {\r\n      try {\r\n        if (!this.validateForm()) {\r\n          return;\r\n        }\r\n        \r\n        this.isSubmitting = true;\r\n        \r\n        const reviewData = {\r\n          rating: this.rating,\r\n          remarks: this.remarks\r\n        };\r\n        \r\n        await customerAPI.addReview(this.requestId, reviewData);\r\n        \r\n        // Clear form and emit event\r\n        this.rating = 0;\r\n        this.remarks = '';\r\n        this.$emit('submitted');\r\n      } catch (error) {\r\n        console.error('Error submitting review:', error);\r\n        alert('Failed to submit review: ' + (error.message || 'Unknown error'));\r\n      } finally {\r\n        this.isSubmitting = false;\r\n      }\r\n    },\r\n    \r\n    formatDate(dateString) {\r\n      if (!dateString) return 'N/A';\r\n      const date = new Date(dateString);\r\n      return date.toLocaleDateString('en-US', {\r\n        year: 'numeric',\r\n        month: 'short',\r\n        day: 'numeric'\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.star-rating {\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 8px;\r\n  font-size: 1.75rem;\r\n}\r\n\r\n.star-rating-item {\r\n  cursor: pointer;\r\n  transition: transform 0.1s;\r\n}\r\n\r\n.star-rating-item:hover {\r\n  transform: scale(1.2);\r\n}\r\n\r\n.star-rating-item.selected {\r\n  transform: scale(1.1);\r\n}\r\n\r\n.rating-text {\r\n  font-weight: 500;\r\n  height: 1.5rem; /* Fixed height to prevent layout shifts */\r\n}\r\n\r\n.text-warning {\r\n  color: #ffc107 !important;\r\n}\r\n\r\n.text-muted {\r\n  color: #dee2e6 !important;\r\n}\r\n</style>\r\n"],"mappings":"AAyEA,SAAAA,WAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACAC,SAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,QAAA;IACA;IACAC,WAAA;MACAH,IAAA,EAAAI,MAAA;MACAC,OAAA;IACA;IACAC,WAAA;MACAN,IAAA,EAAAI,MAAA;MACAC,OAAA;IACA;IACAE,gBAAA;MACAP,IAAA,EAAAI,MAAA;MACAC,OAAA;IACA;EACA;EAEAG,KAAA;IACA;MACAC,MAAA;MACAC,WAAA;MACAC,OAAA;MACAC,YAAA;MACAC,gBAAA;QACAJ,MAAA;QACAE,OAAA;MACA;IACA;EACA;EAEAG,OAAA;IACAC,UAAAC,KAAA;MACA,KAAAP,MAAA,GAAAO,KAAA;MACA,KAAAH,gBAAA,CAAAJ,MAAA;IACA;IAEAQ,cAAA;MACA,MAAAC,KAAA,IACA,mBACA,QACA,QACA,QACA,aACA,YACA;MACA,OAAAA,KAAA,MAAAT,MAAA,KAAAS,KAAA;IACA;IAEAC,aAAA;MACA,IAAAC,OAAA;MACA,KAAAP,gBAAA;QACAJ,MAAA;QACAE,OAAA;MACA;MAEA,UAAAF,MAAA,SAAAA,MAAA;QACA,KAAAI,gBAAA,CAAAJ,MAAA;QACAW,OAAA;MACA;MAEA,UAAAT,OAAA,CAAAU,IAAA;QACA,KAAAR,gBAAA,CAAAF,OAAA;QACAS,OAAA;MACA,gBAAAT,OAAA,CAAAW,MAAA;QACA,KAAAT,gBAAA,CAAAF,OAAA;QACAS,OAAA;MACA;MAEA,OAAAA,OAAA;IACA;IAEA,MAAAG,aAAA;MACA;QACA,UAAAJ,YAAA;UACA;QACA;QAEA,KAAAP,YAAA;QAEA,MAAAY,UAAA;UACAf,MAAA,OAAAA,MAAA;UACAE,OAAA,OAAAA;QACA;QAEA,MAAAf,WAAA,CAAA6B,SAAA,MAAA1B,SAAA,EAAAyB,UAAA;;QAEA;QACA,KAAAf,MAAA;QACA,KAAAE,OAAA;QACA,KAAAe,KAAA;MACA,SAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,6BAAAA,KAAA;QACAE,KAAA,gCAAAF,KAAA,CAAAG,OAAA;MACA;QACA,KAAAlB,YAAA;MACA;IACA;IAEAmB,WAAAC,UAAA;MACA,KAAAA,UAAA;MACA,MAAAC,IAAA,OAAAC,IAAA,CAAAF,UAAA;MACA,OAAAC,IAAA,CAAAE,kBAAA;QACAC,IAAA;QACAC,KAAA;QACAC,GAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}