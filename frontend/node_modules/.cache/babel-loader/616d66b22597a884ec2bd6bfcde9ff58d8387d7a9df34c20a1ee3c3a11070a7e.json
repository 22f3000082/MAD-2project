{"ast":null,"code":"import { ref, onMounted, computed } from 'vue';\nimport { Modal } from 'bootstrap';\nimport Chart from 'chart.js/auto';\nimport { adminAPI } from '@/services/api';\nexport default {\n  name: 'AdminDashboard',\n  setup() {\n    // State\n    const stats = ref({\n      totalUsers: 0,\n      activeServices: 0,\n      pendingApprovals: 0,\n      blockedUsers: 0\n    });\n    const users = ref([]);\n    const services = ref([]);\n    const currentTab = ref('users');\n    const userSearch = ref('');\n    const serviceSearch = ref('');\n    const userTypeFilter = ref('');\n    const serviceForm = ref({\n      name: '',\n      description: '',\n      basePrice: '',\n      timeRequired: ''\n    });\n    const editingService = ref(null);\n    const selectedUser = ref(null);\n    const requestsChart = ref(null);\n    const usersChart = ref(null);\n\n    // Tabs configuration\n    const tabs = [{\n      id: 'users',\n      name: 'Users Management',\n      icon: 'fas fa-users'\n    }, {\n      id: 'services',\n      name: 'Services',\n      icon: 'fas fa-tools'\n    }, {\n      id: 'analytics',\n      name: 'Analytics',\n      icon: 'fas fa-chart-bar'\n    }];\n\n    // Computed properties\n    const filteredUsers = computed(() => {\n      return users.value.filter(user => {\n        const matchesSearch = user.name.toLowerCase().includes(userSearch.value.toLowerCase());\n        const matchesType = !userTypeFilter.value || user.role === userTypeFilter.value;\n        return matchesSearch && matchesType;\n      });\n    });\n    const filteredServices = computed(() => {\n      return services.value.filter(service => service.name.toLowerCase().includes(serviceSearch.value.toLowerCase()));\n    });\n\n    // Methods\n    const loadDashboardData = async () => {\n      try {\n        const [usersData, servicesData] = await Promise.all([adminAPI.getUsers(), adminAPI.getServices()]);\n        users.value = usersData;\n        services.value = servicesData;\n        updateStats();\n      } catch (error) {\n        console.error('Error loading dashboard data:', error);\n      }\n    };\n    const updateStats = () => {\n      stats.value = {\n        totalUsers: users.value.length,\n        activeServices: services.value.filter(s => s.status === 'active').length,\n        pendingApprovals: users.value.filter(u => u.role === 'professional' && !u.approved).length,\n        blockedUsers: users.value.filter(u => u.status === 'blocked').length\n      };\n    };\n    const showNewServiceModal = () => {\n      editingService.value = null;\n      serviceForm.value = {\n        name: '',\n        description: '',\n        basePrice: '',\n        timeRequired: ''\n      };\n      new Modal(document.getElementById('serviceModal')).show();\n    };\n    const editService = service => {\n      editingService.value = service;\n      serviceForm.value = {\n        ...service\n      };\n      new Modal(document.getElementById('serviceModal')).show();\n    };\n    const saveService = async () => {\n      try {\n        if (editingService.value) {\n          await adminAPI.updateService(editingService.value.id, serviceForm.value);\n        } else {\n          await adminAPI.createService(serviceForm.value);\n        }\n        await loadDashboardData();\n        new Modal(document.getElementById('serviceModal')).hide();\n      } catch (error) {\n        console.error('Error saving service:', error);\n      }\n    };\n    const deleteService = async serviceId => {\n      if (confirm('Are you sure you want to delete this service?')) {\n        try {\n          await adminAPI.deleteService(serviceId);\n          await loadDashboardData();\n        } catch (error) {\n          console.error('Error deleting service:', error);\n        }\n      }\n    };\n    const approveUser = async userId => {\n      try {\n        await adminAPI.approveUser(userId);\n        await loadDashboardData();\n      } catch (error) {\n        console.error('Error approving user:', error);\n      }\n    };\n    const toggleUserBlock = async user => {\n      try {\n        await adminAPI.blockUser(user.id);\n        await loadDashboardData();\n      } catch (error) {\n        console.error('Error toggling user block status:', error);\n      }\n    };\n    const viewUserDetails = user => {\n      selectedUser.value = user;\n      new Modal(document.getElementById('userDetailsModal')).show();\n    };\n    const initCharts = () => {\n      // Requests Chart\n      const requestsCtx = document.querySelector('#requestsChart');\n      if (requestsCtx) {\n        requestsChart.value = new Chart(requestsCtx, {\n          type: 'bar',\n          data: {\n            labels: ['Pending', 'In Progress', 'Completed', 'Cancelled'],\n            datasets: [{\n              label: 'Service Requests',\n              data: [12, 19, 3, 5],\n              backgroundColor: ['rgba(255, 206, 86, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(255, 99, 132, 0.2)'],\n              borderColor: ['rgba(255, 206, 86, 1)', 'rgba(54, 162, 235, 1)', 'rgba(75, 192, 192, 1)', 'rgba(255, 99, 132, 1)'],\n              borderWidth: 1\n            }]\n          }\n        });\n      }\n\n      // Users Chart\n      const usersCtx = document.querySelector('#usersChart');\n      if (usersCtx) {\n        usersChart.value = new Chart(usersCtx, {\n          type: 'line',\n          data: {\n            labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\n            datasets: [{\n              label: 'New Users',\n              data: [65, 59, 80, 81, 56, 55],\n              fill: false,\n              borderColor: 'rgb(75, 192, 192)',\n              tension: 0.1\n            }]\n          }\n        });\n      }\n    };\n\n    // Lifecycle hooks\n    onMounted(() => {\n      loadDashboardData();\n      initCharts();\n    });\n    return {\n      stats,\n      users,\n      services,\n      currentTab,\n      tabs,\n      userSearch,\n      serviceSearch,\n      userTypeFilter,\n      serviceForm,\n      editingService,\n      selectedUser,\n      filteredUsers,\n      filteredServices,\n      showNewServiceModal,\n      editService,\n      saveService,\n      deleteService,\n      approveUser,\n      toggleUserBlock,\n      viewUserDetails,\n      refreshUsers: loadDashboardData\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}