{"ast":null,"code":"import { ref, computed, onMounted } from 'vue';\nimport { professionalAPI } from '@/services/api';\nexport default {\n  name: 'ProfessionalDashboard',\n  setup() {\n    // State\n    const user = JSON.parse(localStorage.getItem('user') || '{}');\n    const professionalName = ref(user.name || 'Professional');\n    const activeTab = ref('pending');\n    const loading = ref(true);\n    const serviceRequests = ref([]);\n    const profile = ref({\n      service_type: '',\n      experience: 0,\n      average_rating: 0,\n      total_reviews: 0,\n      is_approved: false\n    });\n    const showDetailsModal = ref(false);\n    const selectedRequest = ref(null);\n\n    // Computed properties\n    const pendingRequests = computed(() => serviceRequests.value.filter(req => req.status === 'pending'));\n    const inProgressRequests = computed(() => serviceRequests.value.filter(req => req.status === 'in_progress' || req.status === 'assigned'));\n    const completedRequests = computed(() => serviceRequests.value.filter(req => req.status === 'completed' || req.status === 'closed'));\n    const filteredRequests = computed(() => {\n      if (activeTab.value === 'pending') {\n        return pendingRequests.value;\n      } else if (activeTab.value === 'assigned') {\n        return inProgressRequests.value;\n      } else if (activeTab.value === 'completed') {\n        return completedRequests.value;\n      }\n      return [];\n    });\n\n    // Methods\n    const fetchData = async () => {\n      loading.value = true;\n      try {\n        const [requestsData, profileData] = await Promise.all([professionalAPI.getAssignments(), professionalAPI.getProfile()]);\n        serviceRequests.value = requestsData;\n        profile.value = profileData;\n      } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n      } finally {\n        loading.value = false;\n      }\n    };\n    const acceptRequest = async (requestId, closeModal = false) => {\n      try {\n        await professionalAPI.updateStatus(requestId, 'in_progress');\n        await fetchData();\n        if (closeModal) {\n          showDetailsModal.value = false;\n        }\n      } catch (error) {\n        console.error('Error accepting request:', error);\n      }\n    };\n    const rejectRequest = async (requestId, closeModal = false) => {\n      if (confirm('Are you sure you want to reject this request?')) {\n        try {\n          await professionalAPI.updateStatus(requestId, 'rejected');\n          await fetchData();\n          if (closeModal) {\n            showDetailsModal.value = false;\n          }\n        } catch (error) {\n          console.error('Error rejecting request:', error);\n        }\n      }\n    };\n    const completeRequest = async (requestId, closeModal = false) => {\n      try {\n        await professionalAPI.updateStatus(requestId, 'completed');\n        await fetchData();\n        if (closeModal) {\n          showDetailsModal.value = false;\n        }\n      } catch (error) {\n        console.error('Error completing request:', error);\n      }\n    };\n    const viewRequestDetails = request => {\n      selectedRequest.value = request;\n      showDetailsModal.value = true;\n    };\n    const formatDate = dateString => {\n      if (!dateString) return 'N/A';\n      const date = new Date(dateString);\n      return date.toLocaleString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    };\n    const getStatusBadgeClass = status => {\n      const classes = {\n        pending: 'badge bg-warning',\n        rejected: 'badge bg-danger',\n        in_progress: 'badge bg-primary',\n        assigned: 'badge bg-info',\n        completed: 'badge bg-success',\n        closed: 'badge bg-secondary'\n      };\n      return classes[status] || 'badge bg-secondary';\n    };\n    const getEmptyStateMessage = () => {\n      if (activeTab.value === 'pending') {\n        return 'No new service requests available at the moment. Check back later.';\n      } else if (activeTab.value === 'assigned') {\n        return 'You have no active service assignments.';\n      } else {\n        return 'You have not completed any service requests yet.';\n      }\n    };\n\n    // Lifecycle hooks\n    onMounted(fetchData);\n    return {\n      professionalName,\n      activeTab,\n      loading,\n      serviceRequests,\n      profile,\n      pendingRequests,\n      inProgressRequests,\n      completedRequests,\n      filteredRequests,\n      showDetailsModal,\n      selectedRequest,\n      acceptRequest,\n      rejectRequest,\n      completeRequest,\n      viewRequestDetails,\n      formatDate,\n      getStatusBadgeClass,\n      getEmptyStateMessage\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}