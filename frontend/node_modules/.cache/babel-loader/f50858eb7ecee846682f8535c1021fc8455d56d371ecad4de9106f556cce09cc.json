{"ast":null,"code":"import { ref, onMounted, computed } from 'vue';\nimport { Modal } from 'bootstrap';\nimport Chart from 'chart.js/auto';\nimport { adminAPI } from '@/services/api';\nexport default {\n  name: 'AdminDashboard',\n  setup() {\n    // State\n    const stats = ref({\n      totalUsers: 0,\n      activeServices: 0,\n      pendingApprovals: 0,\n      blockedUsers: 0\n    });\n    const users = ref([]);\n    const services = ref([]);\n    const currentTab = ref('users');\n    const userSearch = ref('');\n    const serviceSearch = ref('');\n    const userTypeFilter = ref('');\n    const serviceForm = ref({\n      name: '',\n      description: '',\n      basePrice: '',\n      timeRequired: ''\n    });\n    const editingService = ref(null);\n    const selectedUser = ref(null);\n    const requestsChart = ref(null);\n    const usersChart = ref(null);\n\n    // Tabs configuration\n    const tabs = [{\n      id: 'users',\n      name: 'Users Management',\n      icon: 'fas fa-users'\n    }, {\n      id: 'services',\n      name: 'Services',\n      icon: 'fas fa-tools'\n    }, {\n      id: 'analytics',\n      name: 'Analytics',\n      icon: 'fas fa-chart-bar'\n    }];\n\n    // Computed properties\n    const filteredUsers = computed(() => {\n      return users.value.filter(user => {\n        const matchesSearch = user.name.toLowerCase().includes(userSearch.value.toLowerCase());\n        const matchesType = !userTypeFilter.value || user.role === userTypeFilter.value;\n        return matchesSearch && matchesType;\n      });\n    });\n    const filteredServices = computed(() => {\n      return services.value.filter(service => service.name.toLowerCase().includes(serviceSearch.value.toLowerCase()));\n    });\n\n    // Methods\n    const loadDashboardData = async () => {\n      try {\n        const [usersData, servicesData] = await Promise.all([adminAPI.getUsers(), adminAPI.getServices()]);\n        users.value = usersData;\n        services.value = servicesData;\n        updateStats();\n      } catch (error) {\n        console.error('Error loading dashboard data:', error);\n      }\n    };\n    const updateStats = () => {\n      stats.value = {\n        totalUsers: users.value.length,\n        activeServices: services.value.filter(s => s.status === 'active').length,\n        pendingApprovals: users.value.filter(u => u.role === 'professional' && !u.approved).length,\n        blockedUsers: users.value.filter(u => u.status === 'blocked').length\n      };\n    };\n    const showNewServiceModal = () => {\n      editingService.value = null;\n      serviceForm.value = {\n        name: '',\n        description: '',\n        basePrice: '',\n        timeRequired: ''\n      };\n      new Modal(document.getElementById('serviceModal')).show();\n    };\n    const editService = service => {\n      editingService.value = service;\n      serviceForm.value = {\n        ...service\n      };\n      new Modal(document.getElementById('serviceModal')).show();\n    };\n    const saveService = async () => {\n      try {\n        if (editingService.value) {\n          await adminAPI.updateService(editingService.value.id, serviceForm.value);\n        } else {\n          await adminAPI.createService(serviceForm.value);\n        }\n        await loadDashboardData();\n        new Modal(document.getElementById('serviceModal')).hide();\n      } catch (error) {\n        console.error('Error saving service:', error);\n      }\n    };\n    const deleteService = async serviceId => {\n      if (confirm('Are you sure you want to delete this service?')) {\n        try {\n          await adminAPI.deleteService(serviceId);\n          await loadDashboardData();\n        } catch (error) {\n          console.error('Error deleting service:', error);\n        }\n      }\n    };\n    const approveUser = async userId => {\n      try {\n        if (confirm('Are you sure you want to approve this professional?')) {\n          await adminAPI.approveUser(userId);\n          alert('Professional approved successfully');\n          await loadDashboardData();\n        }\n      } catch (error) {\n        console.error('Error approving user:', error);\n        alert('Failed to approve professional: ' + error.message);\n      }\n    };\n    const toggleUserBlock = async user => {\n      try {\n        if (user.is_blocked) {\n          // Unblock user\n          if (confirm('Are you sure you want to unblock this user?')) {\n            await adminAPI.unblockUser(user.id);\n            alert('User unblocked successfully');\n          }\n        } else {\n          // Block user with reason\n          const reason = prompt('Please enter a reason for blocking this user:', 'Violation of terms of service');\n          if (reason) {\n            await adminAPI.blockUser(user.id, reason);\n            alert('User blocked successfully');\n          }\n        }\n        await loadDashboardData();\n      } catch (error) {\n        console.error('Error toggling user block status:', error);\n        alert('Operation failed: ' + error.message);\n      }\n    };\n    const viewUserDetails = user => {\n      selectedUser.value = user;\n      new Modal(document.getElementById('userDetailsModal')).show();\n    };\n    const initCharts = () => {\n      // Requests Chart\n      const requestsCtx = document.querySelector('#requestsChart');\n      if (requestsCtx) {\n        requestsChart.value = new Chart(requestsCtx, {\n          type: 'bar',\n          data: {\n            labels: ['Pending', 'In Progress', 'Completed', 'Cancelled'],\n            datasets: [{\n              label: 'Service Requests',\n              data: [12, 19, 3, 5],\n              backgroundColor: ['rgba(255, 206, 86, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(255, 99, 132, 0.2)'],\n              borderColor: ['rgba(255, 206, 86, 1)', 'rgba(54, 162, 235, 1)', 'rgba(75, 192, 192, 1)', 'rgba(255, 99, 132, 1)'],\n              borderWidth: 1\n            }]\n          }\n        });\n      }\n\n      // Users Chart\n      const usersCtx = document.querySelector('#usersChart');\n      if (usersCtx) {\n        usersChart.value = new Chart(usersCtx, {\n          type: 'line',\n          data: {\n            labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\n            datasets: [{\n              label: 'New Users',\n              data: [65, 59, 80, 81, 56, 55],\n              fill: false,\n              borderColor: 'rgb(75, 192, 192)',\n              tension: 0.1\n            }]\n          }\n        });\n      }\n    };\n\n    // Lifecycle hooks\n    onMounted(() => {\n      loadDashboardData();\n      initCharts();\n    });\n    return {\n      stats,\n      users,\n      services,\n      currentTab,\n      tabs,\n      userSearch,\n      serviceSearch,\n      userTypeFilter,\n      serviceForm,\n      editingService,\n      selectedUser,\n      filteredUsers,\n      filteredServices,\n      showNewServiceModal,\n      editService,\n      saveService,\n      deleteService,\n      approveUser,\n      toggleUserBlock,\n      viewUserDetails,\n      refreshUsers: loadDashboardData\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","Modal","Chart","adminAPI","name","setup","stats","totalUsers","activeServices","pendingApprovals","blockedUsers","users","services","currentTab","userSearch","serviceSearch","userTypeFilter","serviceForm","description","basePrice","timeRequired","editingService","selectedUser","requestsChart","usersChart","tabs","id","icon","filteredUsers","value","filter","user","matchesSearch","toLowerCase","includes","matchesType","role","filteredServices","service","loadDashboardData","usersData","servicesData","Promise","all","getUsers","getServices","updateStats","error","console","length","s","status","u","approved","showNewServiceModal","document","getElementById","show","editService","saveService","updateService","createService","hide","deleteService","serviceId","confirm","approveUser","userId","alert","message","toggleUserBlock","is_blocked","unblockUser","reason","prompt","blockUser","viewUserDetails","initCharts","requestsCtx","querySelector","type","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","usersCtx","fill","tension","refreshUsers"],"sources":["src/views/AdminDashboard.vue"],"sourcesContent":["<template>\r\n  <div class=\"admin-dashboard\">\r\n    <!-- Top Stats Cards -->\r\n    <div class=\"container-fluid py-4\">\r\n      <div class=\"row g-4 mb-4\">\r\n        <div class=\"col-xl-3 col-sm-6\">\r\n          <div class=\"card bg-primary text-white\">\r\n            <div class=\"card-body\">\r\n              <div class=\"d-flex justify-content-between align-items-center\">\r\n                <div>\r\n                  <h6 class=\"card-title mb-0\">Total Users</h6>\r\n                  <h2 class=\"mt-2 mb-0\">{{ stats.totalUsers }}</h2>\r\n                </div>\r\n                <div class=\"icon-shape bg-white text-primary rounded-circle\">\r\n                  <i class=\"fas fa-users fa-2x\"></i>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-xl-3 col-sm-6\">\r\n          <div class=\"card bg-success text-white\">\r\n            <div class=\"card-body\">\r\n              <div class=\"d-flex justify-content-between align-items-center\">\r\n                <div>\r\n                  <h6 class=\"card-title mb-0\">Active Services</h6>\r\n                  <h2 class=\"mt-2 mb-0\">{{ stats.activeServices }}</h2>\r\n                </div>\r\n                <div class=\"icon-shape bg-white text-success rounded-circle\">\r\n                  <i class=\"fas fa-tools fa-2x\"></i>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-xl-3 col-sm-6\">\r\n          <div class=\"card bg-warning text-white\">\r\n            <div class=\"card-body\">\r\n              <div class=\"d-flex justify-content-between align-items-center\">\r\n                <div>\r\n                  <h6 class=\"card-title mb-0\">Pending Approvals</h6>\r\n                  <h2 class=\"mt-2 mb-0\">{{ stats.pendingApprovals }}</h2>\r\n                </div>\r\n                <div class=\"icon-shape bg-white text-warning rounded-circle\">\r\n                  <i class=\"fas fa-clock fa-2x\"></i>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-xl-3 col-sm-6\">\r\n          <div class=\"card bg-danger text-white\">\r\n            <div class=\"card-body\">\r\n              <div class=\"d-flex justify-content-between align-items-center\">\r\n                <div>\r\n                  <h6 class=\"card-title mb-0\">Blocked Users</h6>\r\n                  <h2 class=\"mt-2 mb-0\">{{ stats.blockedUsers }}</h2>\r\n                </div>\r\n                <div class=\"icon-shape bg-white text-danger rounded-circle\">\r\n                  <i class=\"fas fa-ban fa-2x\"></i>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Main Content Tabs -->\r\n      <div class=\"card\">\r\n        <div class=\"card-header\">\r\n          <ul class=\"nav nav-tabs card-header-tabs\">\r\n            <li class=\"nav-item\" v-for=\"tab in tabs\" :key=\"tab.id\">\r\n              <a class=\"nav-link\" :class=\"{ active: currentTab === tab.id }\" \r\n                 @click=\"currentTab = tab.id\" href=\"#\">\r\n                <i :class=\"tab.icon\"></i> {{ tab.name }}\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"card-body\">\r\n          <!-- Users Management Tab -->\r\n          <div v-if=\"currentTab === 'users'\" class=\"users-management\">\r\n            <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n              <div class=\"d-flex gap-2\">\r\n                <input v-model=\"userSearch\" type=\"text\" class=\"form-control\" \r\n                       placeholder=\"Search users...\">\r\n                <select v-model=\"userTypeFilter\" class=\"form-select\">\r\n                  <option value=\"\">All Users</option>\r\n                  <option value=\"professional\">Professionals</option>\r\n                  <option value=\"customer\">Customers</option>\r\n                </select>\r\n              </div>\r\n              <div class=\"d-flex gap-2\">\r\n                <button class=\"btn btn-outline-primary\" @click=\"refreshUsers\">\r\n                  <i class=\"fas fa-sync-alt\"></i> Refresh\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"table-responsive\">\r\n              <table class=\"table table-hover\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>ID</th>\r\n                    <th>Name</th>\r\n                    <th>Role</th>\r\n                    <th>Status</th>\r\n                    <th>Actions</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr v-for=\"user in filteredUsers\" :key=\"user.id\">\r\n                    <td>{{ user.id }}</td>\r\n                    <td>{{ user.name }}</td>\r\n                    <td>\r\n                      <span class=\"badge\" \r\n                            :class=\"user.role === 'professional' ? 'bg-info' : 'bg-secondary'\">\r\n                        {{ user.role }}\r\n                      </span>\r\n                    </td>\r\n                    <td>\r\n                      <span class=\"badge\" \r\n                            :class=\"user.status === 'active' ? 'bg-success' : 'bg-danger'\">\r\n                        {{ user.status }}\r\n                      </span>\r\n                    </td>\r\n                    <td>\r\n                      <div class=\"btn-group\">\r\n                        <button v-if=\"user.role === 'professional' && !user.approved\"\r\n                                class=\"btn btn-sm btn-success\" \r\n                                @click=\"approveUser(user.id)\">\r\n                          <i class=\"fas fa-check\"></i> Approve\r\n                        </button>\r\n                        <button class=\"btn btn-sm\" \r\n                                :class=\"user.status === 'active' ? 'btn-danger' : 'btn-success'\"\r\n                                @click=\"toggleUserBlock(user)\">\r\n                          <i class=\"fas\" :class=\"user.status === 'active' ? 'fa-ban' : 'fa-unlock'\"></i>\r\n                          {{ user.status === 'active' ? 'Block' : 'Unblock' }}\r\n                        </button>\r\n                        <button class=\"btn btn-sm btn-info\" @click=\"viewUserDetails(user)\">\r\n                          <i class=\"fas fa-eye\"></i> View\r\n                        </button>\r\n                      </div>\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Services Management Tab -->\r\n          <div v-if=\"currentTab === 'services'\" class=\"services-management\">\r\n            <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n              <div class=\"d-flex gap-2\">\r\n                <input v-model=\"serviceSearch\" type=\"text\" class=\"form-control\" \r\n                       placeholder=\"Search services...\">\r\n              </div>\r\n              <button class=\"btn btn-primary\" @click=\"showNewServiceModal\">\r\n                <i class=\"fas fa-plus\"></i> New Service\r\n              </button>\r\n            </div>\r\n\r\n            <div class=\"table-responsive\">\r\n              <table class=\"table table-hover\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>ID</th>\r\n                    <th>Name</th>\r\n                    <th>Base Price</th>\r\n                    <th>Time Required</th>\r\n                    <th>Status</th>\r\n                    <th>Actions</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr v-for=\"service in filteredServices\" :key=\"service.id\">\r\n                    <td>{{ service.id }}</td>\r\n                    <td>{{ service.name }}</td>\r\n                    <td>₹{{ service.basePrice }}</td>\r\n                    <td>{{ service.timeRequired }}</td>\r\n                    <td>\r\n                      <span class=\"badge\" \r\n                            :class=\"service.status === 'active' ? 'bg-success' : 'bg-danger'\">\r\n                        {{ service.status }}\r\n                      </span>\r\n                    </td>\r\n                    <td>\r\n                      <div class=\"btn-group\">\r\n                        <button class=\"btn btn-sm btn-warning\" @click=\"editService(service)\">\r\n                          <i class=\"fas fa-edit\"></i> Edit\r\n                        </button>\r\n                        <button class=\"btn btn-sm btn-danger\" @click=\"deleteService(service.id)\">\r\n                          <i class=\"fas fa-trash\"></i> Delete\r\n                        </button>\r\n                      </div>\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Analytics Tab -->\r\n          <div v-if=\"currentTab === 'analytics'\" class=\"analytics\">\r\n            <div class=\"row\">\r\n              <div class=\"col-md-6\">\r\n                <div class=\"card\">\r\n                  <div class=\"card-body\">\r\n                    <h5 class=\"card-title\">Service Requests by Status</h5>\r\n                    <canvas ref=\"requestsChart\"></canvas>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-md-6\">\r\n                <div class=\"card\">\r\n                  <div class=\"card-body\">\r\n                    <h5 class=\"card-title\">User Registration Trend</h5>\r\n                    <canvas ref=\"usersChart\"></canvas>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- New/Edit Service Modal -->\r\n    <div class=\"modal fade\" id=\"serviceModal\" tabindex=\"-1\">\r\n      <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\">{{ editingService ? 'Edit' : 'New' }} Service</h5>\r\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            <form @submit.prevent=\"saveService\">\r\n              <div class=\"mb-3\">\r\n                <label class=\"form-label\">Service Name</label>\r\n                <input v-model=\"serviceForm.name\" type=\"text\" class=\"form-control\" required>\r\n              </div>\r\n              <div class=\"mb-3\">\r\n                <label class=\"form-label\">Description</label>\r\n                <textarea v-model=\"serviceForm.description\" class=\"form-control\" rows=\"3\" required></textarea>\r\n              </div>\r\n              <div class=\"mb-3\">\r\n                <label class=\"form-label\">Base Price (₹)</label>\r\n                <input v-model=\"serviceForm.basePrice\" type=\"number\" class=\"form-control\" required>\r\n              </div>\r\n              <div class=\"mb-3\">\r\n                <label class=\"form-label\">Time Required (hours)</label>\r\n                <input v-model=\"serviceForm.timeRequired\" type=\"number\" class=\"form-control\" required>\r\n              </div>\r\n              <div class=\"text-end\">\r\n                <button type=\"button\" class=\"btn btn-secondary me-2\" data-bs-dismiss=\"modal\">Cancel</button>\r\n                <button type=\"submit\" class=\"btn btn-primary\">Save</button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- User Details Modal -->\r\n    <div class=\"modal fade\" id=\"userDetailsModal\" tabindex=\"-1\">\r\n      <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\">User Details</h5>\r\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\r\n          </div>\r\n          <div class=\"modal-body\" v-if=\"selectedUser\">\r\n            <div class=\"row\">\r\n              <div class=\"col-md-6\">\r\n                <h6>Basic Information</h6>\r\n                <table class=\"table\">\r\n                  <tr>\r\n                    <th>Name:</th>\r\n                    <td>{{ selectedUser.name }}</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <th>Email:</th>\r\n                    <td>{{ selectedUser.email }}</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <th>Role:</th>\r\n                    <td>{{ selectedUser.role }}</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <th>Status:</th>\r\n                    <td>{{ selectedUser.status }}</td>\r\n                  </tr>\r\n                </table>\r\n              </div>\r\n              <div class=\"col-md-6\" v-if=\"selectedUser.role === 'professional'\">\r\n                <h6>Professional Details</h6>\r\n                <table class=\"table\">\r\n                  <tr>\r\n                    <th>Service Type:</th>\r\n                    <td>{{ selectedUser.serviceType }}</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <th>Experience:</th>\r\n                    <td>{{ selectedUser.experience }} years</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <th>Rating:</th>\r\n                    <td>\r\n                      <div class=\"stars\">\r\n                        <i v-for=\"n in 5\" :key=\"n\"\r\n                           class=\"fas fa-star\"\r\n                           :class=\"n <= selectedUser.rating ? 'text-warning' : 'text-muted'\"></i>\r\n                        ({{ selectedUser.rating }}/5)\r\n                      </div>\r\n                    </td>\r\n                  </tr>\r\n                </table>\r\n              </div>\r\n            </div>\r\n            <div class=\"mt-4\" v-if=\"selectedUser.role === 'professional'\">\r\n              <h6>Recent Reviews</h6>\r\n              <div class=\"reviews-list\">\r\n                <div v-for=\"review in selectedUser.reviews\" :key=\"review.id\" class=\"review-item\">\r\n                  <div class=\"stars mb-1\">\r\n                    <i v-for=\"n in 5\" :key=\"n\"\r\n                       class=\"fas fa-star\"\r\n                       :class=\"n <= review.rating ? 'text-warning' : 'text-muted'\"></i>\r\n                  </div>\r\n                  <p class=\"mb-1\">{{ review.comment }}</p>\r\n                  <small class=\"text-muted\">{{ review.date }}</small>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, computed } from 'vue'\r\nimport { Modal } from 'bootstrap'\r\nimport Chart from 'chart.js/auto'\r\nimport { adminAPI } from '@/services/api'\r\n\r\nexport default {\r\n  name: 'AdminDashboard',\r\n  setup() {\r\n    // State\r\n    const stats = ref({\r\n      totalUsers: 0,\r\n      activeServices: 0,\r\n      pendingApprovals: 0,\r\n      blockedUsers: 0\r\n    })\r\n    const users = ref([])\r\n    const services = ref([])\r\n    const currentTab = ref('users')\r\n    const userSearch = ref('')\r\n    const serviceSearch = ref('')\r\n    const userTypeFilter = ref('')\r\n    const serviceForm = ref({\r\n      name: '',\r\n      description: '',\r\n      basePrice: '',\r\n      timeRequired: ''\r\n    })\r\n    const editingService = ref(null)\r\n    const selectedUser = ref(null)\r\n    const requestsChart = ref(null)\r\n    const usersChart = ref(null)\r\n\r\n    // Tabs configuration\r\n    const tabs = [\r\n      { id: 'users', name: 'Users Management', icon: 'fas fa-users' },\r\n      { id: 'services', name: 'Services', icon: 'fas fa-tools' },\r\n      { id: 'analytics', name: 'Analytics', icon: 'fas fa-chart-bar' }\r\n    ]\r\n\r\n    // Computed properties\r\n    const filteredUsers = computed(() => {\r\n      return users.value.filter(user => {\r\n        const matchesSearch = user.name.toLowerCase().includes(userSearch.value.toLowerCase())\r\n        const matchesType = !userTypeFilter.value || user.role === userTypeFilter.value\r\n        return matchesSearch && matchesType\r\n      })\r\n    })\r\n\r\n    const filteredServices = computed(() => {\r\n      return services.value.filter(service =>\r\n        service.name.toLowerCase().includes(serviceSearch.value.toLowerCase())\r\n      )\r\n    })\r\n\r\n    // Methods\r\n    const loadDashboardData = async () => {\r\n      try {\r\n        const [usersData, servicesData] = await Promise.all([\r\n          adminAPI.getUsers(),\r\n          adminAPI.getServices()\r\n        ])\r\n        users.value = usersData\r\n        services.value = servicesData\r\n        updateStats()\r\n      } catch (error) {\r\n        console.error('Error loading dashboard data:', error)\r\n      }\r\n    }\r\n\r\n    const updateStats = () => {\r\n      stats.value = {\r\n        totalUsers: users.value.length,\r\n        activeServices: services.value.filter(s => s.status === 'active').length,\r\n        pendingApprovals: users.value.filter(u => u.role === 'professional' && !u.approved).length,\r\n        blockedUsers: users.value.filter(u => u.status === 'blocked').length\r\n      }\r\n    }\r\n\r\n    const showNewServiceModal = () => {\r\n      editingService.value = null\r\n      serviceForm.value = {\r\n        name: '',\r\n        description: '',\r\n        basePrice: '',\r\n        timeRequired: ''\r\n      }\r\n      new Modal(document.getElementById('serviceModal')).show()\r\n    }\r\n\r\n    const editService = (service) => {\r\n      editingService.value = service\r\n      serviceForm.value = { ...service }\r\n      new Modal(document.getElementById('serviceModal')).show()\r\n    }\r\n\r\n    const saveService = async () => {\r\n      try {\r\n        if (editingService.value) {\r\n          await adminAPI.updateService(editingService.value.id, serviceForm.value)\r\n        } else {\r\n          await adminAPI.createService(serviceForm.value)\r\n        }\r\n        await loadDashboardData()\r\n        new Modal(document.getElementById('serviceModal')).hide()\r\n      } catch (error) {\r\n        console.error('Error saving service:', error)\r\n      }\r\n    }\r\n\r\n    const deleteService = async (serviceId) => {\r\n      if (confirm('Are you sure you want to delete this service?')) {\r\n        try {\r\n          await adminAPI.deleteService(serviceId)\r\n          await loadDashboardData()\r\n        } catch (error) {\r\n          console.error('Error deleting service:', error)\r\n        }\r\n      }\r\n    }\r\n\r\n    const approveUser = async (userId) => {\r\n      try {\r\n        if (confirm('Are you sure you want to approve this professional?')) {\r\n          await adminAPI.approveUser(userId);\r\n          alert('Professional approved successfully');\r\n          await loadDashboardData();\r\n        }\r\n      } catch (error) {\r\n        console.error('Error approving user:', error);\r\n        alert('Failed to approve professional: ' + error.message);\r\n      }\r\n    };\r\n\r\n    const toggleUserBlock = async (user) => {\r\n      try {\r\n        if (user.is_blocked) {\r\n          // Unblock user\r\n          if (confirm('Are you sure you want to unblock this user?')) {\r\n            await adminAPI.unblockUser(user.id);\r\n            alert('User unblocked successfully');\r\n          }\r\n        } else {\r\n          // Block user with reason\r\n          const reason = prompt('Please enter a reason for blocking this user:', 'Violation of terms of service');\r\n          if (reason) {\r\n            await adminAPI.blockUser(user.id, reason);\r\n            alert('User blocked successfully');\r\n          }\r\n        }\r\n        await loadDashboardData();\r\n      } catch (error) {\r\n        console.error('Error toggling user block status:', error);\r\n        alert('Operation failed: ' + error.message);\r\n      }\r\n    };\r\n\r\n    const viewUserDetails = (user) => {\r\n      selectedUser.value = user\r\n      new Modal(document.getElementById('userDetailsModal')).show()\r\n    }\r\n\r\n    const initCharts = () => {\r\n      // Requests Chart\r\n      const requestsCtx = document.querySelector('#requestsChart')\r\n      if (requestsCtx) {\r\n        requestsChart.value = new Chart(requestsCtx, {\r\n          type: 'bar',\r\n          data: {\r\n            labels: ['Pending', 'In Progress', 'Completed', 'Cancelled'],\r\n            datasets: [{\r\n              label: 'Service Requests',\r\n              data: [12, 19, 3, 5],\r\n              backgroundColor: [\r\n                'rgba(255, 206, 86, 0.2)',\r\n                'rgba(54, 162, 235, 0.2)',\r\n                'rgba(75, 192, 192, 0.2)',\r\n                'rgba(255, 99, 132, 0.2)'\r\n              ],\r\n              borderColor: [\r\n                'rgba(255, 206, 86, 1)',\r\n                'rgba(54, 162, 235, 1)',\r\n                'rgba(75, 192, 192, 1)',\r\n                'rgba(255, 99, 132, 1)'\r\n              ],\r\n              borderWidth: 1\r\n            }]\r\n          }\r\n        })\r\n      }\r\n\r\n      // Users Chart\r\n      const usersCtx = document.querySelector('#usersChart')\r\n      if (usersCtx) {\r\n        usersChart.value = new Chart(usersCtx, {\r\n          type: 'line',\r\n          data: {\r\n            labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\r\n            datasets: [{\r\n              label: 'New Users',\r\n              data: [65, 59, 80, 81, 56, 55],\r\n              fill: false,\r\n              borderColor: 'rgb(75, 192, 192)',\r\n              tension: 0.1\r\n            }]\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n    // Lifecycle hooks\r\n    onMounted(() => {\r\n      loadDashboardData()\r\n      initCharts()\r\n    })\r\n\r\n    return {\r\n      stats,\r\n      users,\r\n      services,\r\n      currentTab,\r\n      tabs,\r\n      userSearch,\r\n      serviceSearch,\r\n      userTypeFilter,\r\n      serviceForm,\r\n      editingService,\r\n      selectedUser,\r\n      filteredUsers,\r\n      filteredServices,\r\n      showNewServiceModal,\r\n      editService,\r\n      saveService,\r\n      deleteService,\r\n      approveUser,\r\n      toggleUserBlock,\r\n      viewUserDetails,\r\n      refreshUsers: loadDashboardData\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.admin-dashboard {\r\n  background-color: #f8f9fa;\r\n  min-height: 100vh;\r\n}\r\n\r\n.icon-shape {\r\n  width: 48px;\r\n  height: 48px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.card {\r\n  border: none;\r\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.nav-tabs .nav-link {\r\n  cursor: pointer;\r\n}\r\n\r\n.table th {\r\n  font-weight: 600;\r\n  background-color: #f8f9fa;\r\n}\r\n\r\n.reviews-list {\r\n  max-height: 300px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.review-item {\r\n  padding: 1rem;\r\n  border-bottom: 1px solid #dee2e6;\r\n}\r\n\r\n.review-item:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.stars {\r\n  color: #ffc107;\r\n}\r\n\r\n.btn-group {\r\n  gap: 0.25rem;\r\n}\r\n\r\n.modal-body {\r\n  max-height: 80vh;\r\n  overflow-y: auto;\r\n}\r\n</style>\r\n"],"mappings":"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ACAE,IAAA;UACAC,IAAA;YACAC,MAAA;YACAC,QAAA;cACAC,KAAA;cACAH,IAAA;cACAI,eAAA,GACA,2BACA,2BACA,2BACA,0BACA;cACAC,WAAA,GACA,yBACA,yBACA,yBACA,wBACA;cACAC,WAAA;YACA;UACA;QACA;MACA;;MAEA;MACA,MAAAC,QAAA,GAAAjC,QAAA,CAAAwB,aAAA;MACA,IAAAS,QAAA;QACAhE,UAAA,CAAAK,KAAA,OAAA3B,KAAA,CAAAsF,QAAA;UACAR,IAAA;UACAC,IAAA;YACAC,MAAA;YACAC,QAAA;cACAC,KAAA;cACAH,IAAA;cACAQ,IAAA;cACAH,WAAA;cACAI,OAAA;YACA;UACA;QACA;MACA;IACA;;IAEA;IACA3F,SAAA;MACAwC,iBAAA;MACAsC,UAAA;IACA;IAEA;MACAvE,KAAA;MACAK,KAAA;MACAC,QAAA;MACAC,UAAA;MACAY,IAAA;MACAX,UAAA;MACAC,aAAA;MACAC,cAAA;MACAC,WAAA;MACAI,cAAA;MACAC,YAAA;MACAM,aAAA;MACAS,gBAAA;MACAiB,mBAAA;MACAI,WAAA;MACAC,WAAA;MACAI,aAAA;MACAG,WAAA;MACAI,eAAA;MACAM,eAAA;MACAe,YAAA,EAAApD;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}