{"ast":null,"code":"import axios from 'axios';\nimport router from '@/router';\n\n// Create axios instance with custom config\nconst api = axios.create({\n  baseURL: 'http://localhost:8080',\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  withCredentials: true // Important for CORS with credentials\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    // Use consistent header format based on what backend expects\n    config.headers['Authentication-Token'] = token;\n\n    // Log for debugging\n    console.log(`Request to ${config.url} with token: ${token.substring(0, 15)}...`);\n  } else {\n    console.warn(`No token found for request to: ${config.url}`);\n  }\n  return config;\n}, error => {\n  console.error('Request interceptor error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(response => response, error => {\n  console.error('Response error:', error.response?.data || error.message);\n  if (error.response) {\n    switch (error.response.status) {\n      case 401:\n        // Unauthorized - clear storage and redirect to login\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        router.push('/login');\n        break;\n      case 403:\n        // Forbidden - redirect to home\n        router.push('/');\n        break;\n      case 500:\n        console.error('Server error:', error.response.data);\n        break;\n    }\n    // Return the error message from the backend if available\n    if (error.response.data && error.response.data.message) {\n      return Promise.reject(new Error(error.response.data.message));\n    }\n  }\n  return Promise.reject(error);\n});\n\n// API Services\n// API Services\nexport const authService = {\n  async register(userData) {\n    try {\n      // Ensure professionals have a selected service type\n      if (userData.role === 'professional' && !userData.service_type) {\n        throw new Error(\"Professionals must select a service type.\");\n      }\n      console.log('Sending registration data:', userData);\n      const response = await api.post('/auth/register', userData);\n      console.log('Registration response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Registration error:', error.response?.data || error.message);\n\n      // Capture and return specific backend errors\n      throw error.response?.data || {\n        message: \"Registration failed. Please try again.\"\n      };\n    }\n  },\n  async login(credentials) {\n    try {\n      console.log('Attempting login:', credentials);\n      const response = await api.post('/auth/login', credentials);\n      console.log('Login response:', response.data);\n      if (response.data.token) {\n        // Store auth data - ensure token is saved correctly\n        const token = response.data.token;\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n\n        // Verify token was saved correctly\n        const savedToken = localStorage.getItem('token');\n        console.log(`Token saved successfully: ${savedToken ? 'Yes' : 'No'}`);\n        console.log(`Saved token (first 15 chars): ${savedToken ? savedToken.substring(0, 15) : 'None'}`);\n\n        // Debug: Check the localStorage item immediately\n        console.log('localStorage.token:', localStorage.getItem('token'));\n        console.log('localStorage.user:', localStorage.getItem('user'));\n\n        // Get target route path\n        const targetPath = `/${response.data.user.role}/dashboard`;\n\n        // Short delay to ensure token is saved before redirection\n        setTimeout(() => {\n          // Only navigate if not already on target page\n          // if (router.currentRoute.path !== targetPath) {\n          router.push(targetPath).catch(err => {\n            if (err.name !== 'NavigationDuplicated') {\n              console.error('Navigation error:', err);\n            }\n          });\n        }, 500);\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Login error:', error.response?.data || error.message);\n      throw error;\n    }\n  },\n  async logout() {\n    try {\n      await api.post('/auth/logout');\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n\n      // Only navigate if not already on login page\n      if (router.currentRoute.path !== '/login') {\n        router.push('/login').catch(err => {\n          if (err.name !== 'NavigationDuplicated') {\n            console.error('Navigation error:', err);\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Logout error:', error.response?.data || error.message);\n      // Still clear local storage and redirect even if API call fails\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n\n      // Only navigate if not already on login page\n      if (router.currentRoute.path !== '/login') {\n        router.push('/login').catch(err => {\n          if (err.name !== 'NavigationDuplicated') {\n            console.error('Navigation error:', err);\n          }\n        });\n      }\n    }\n  },\n  getCurrentUser() {\n    const userStr = localStorage.getItem('user');\n    return userStr ? JSON.parse(userStr) : null;\n  }\n};\nexport const serviceAPI = {\n  async getServices(params = {}) {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      const response = await api.get('/api/admin/services', {\n        params,\n        headers: {\n          'Authentication-Token': token\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching services:', error);\n      throw error;\n    }\n  },\n  async getServiceById(id) {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      const response = await api.get(`/api/services/${id}`, {\n        headers: {\n          'Authentication-Token': token\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching service:', error);\n      throw error;\n    }\n  },\n  // Add a new method to fetch service types directly\n  async getServiceTypes() {\n    try {\n      const response = await api.get('/api/service-types');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching service types:', error);\n      throw error;\n    }\n  }\n};\nexport const customerAPI = {\n  async getRequests() {\n    try {\n      const response = await api.get('/api/customer/requests');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching requests:', error);\n      throw error;\n    }\n  },\n  async createRequest(data) {\n    try {\n      const response = await api.post('/api/customer/requests', data);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating request:', error);\n      throw error;\n    }\n  },\n  async updateRequest(requestId, data) {\n    try {\n      const response = await api.put(`/api/customer/requests/${requestId}`, data);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating request:', error);\n      throw error;\n    }\n  },\n  async closeRequest(requestId) {\n    try {\n      const response = await api.put(`/api/customer/requests/${requestId}/close`);\n      return response.data;\n    } catch (error) {\n      console.error('Error closing request:', error);\n      throw error;\n    }\n  },\n  async addReview(requestId, reviewData) {\n    try {\n      const response = await api.post(`/api/customer/requests/${requestId}/review`, reviewData);\n      return response.data;\n    } catch (error) {\n      console.error('Error adding review:', error);\n      throw error;\n    }\n  }\n};\nexport const professionalAPI = {\n  async getAssignments(status = null) {\n    try {\n      console.log('Fetching professional assignments', status ? `with status: ${status}` : '');\n      const params = status ? {\n        status\n      } : {};\n      const response = await api.get('/api/professional/assignments', {\n        params\n      });\n      console.log('Received assignments:', response.data.length);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching assignments:', error);\n      throw error;\n    }\n  },\n  async updateStatus(requestId, status) {\n    try {\n      console.log(`Updating request ${requestId} status to ${status}`);\n      const response = await api.put(`/api/professional/requests/${requestId}`, {\n        status\n      });\n      console.log('Status update response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating status:', error);\n      throw error;\n    }\n  },\n  async getProfile() {\n    try {\n      console.log('Fetching professional profile');\n      const response = await api.get('/api/professional/profile');\n      console.log('Retrieved profile data');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching profile:', error);\n      throw error;\n    }\n  },\n  async updateProfile(data) {\n    try {\n      console.log('Updating professional profile with data:', data);\n      const response = await api.put('/api/professional/profile', data);\n      console.log('Profile update response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      throw error;\n    }\n  }\n};\nexport const adminAPI = {\n  async getUsers(role = null) {\n    try {\n      console.log('Fetching users...');\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      const params = role ? {\n        role\n      } : {};\n      const response = await api.get('/api/admin/users', {\n        params\n      });\n\n      // Ensure users have the 'name' property for display\n      return response.data.map(user => {\n        if (!user.name) {\n          // Set a fallback name if none is provided\n          user.name = user.username || `User ${user.id}`;\n        }\n        return user;\n      });\n    } catch (error) {\n      console.error('Error fetching users:', error.response?.data || error.message);\n      if (error.response?.status === 401) {\n        console.log('Unauthorized. Please check your token.');\n      }\n      throw error;\n    }\n  },\n  async approveUser(userId) {\n    try {\n      console.log(`Approving professional with ID: ${userId}`);\n      const response = await api.post(`/api/admin/professionals/${userId}/approve`);\n      console.log('Professional approved:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error approving user:', error);\n      throw error;\n    }\n  },\n  async blockUser(userId, reason = 'Violation of terms of service') {\n    try {\n      console.log(`Blocking user with ID: ${userId}, reason: ${reason}`);\n      const response = await api.post(`/api/admin/users/${userId}/block`, {\n        reason\n      });\n      console.log('User blocked:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error blocking user:', error);\n      throw error;\n    }\n  },\n  async unblockUser(userId) {\n    try {\n      console.log(`Unblocking user with ID: ${userId}`);\n      const response = await api.post(`/api/admin/users/${userId}/unblock`);\n      console.log('User unblocked:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error unblocking user:', error);\n      throw error;\n    }\n  },\n  async getServices() {\n    try {\n      console.log('Fetching services...');\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      const response = await api.get('/api/admin/services');\n\n      // Transform services to expected format\n      return response.data.map(service => ({\n        id: service.id,\n        name: service.name,\n        description: service.description || '',\n        basePrice: service.base_price,\n        timeRequired: service.time_required,\n        category: service.category || 'General',\n        status: service.is_active !== false ? 'active' : 'inactive'\n      }));\n    } catch (error) {\n      console.error('Error fetching services:', error.response?.data || error.message);\n      throw error;\n    }\n  },\n  async createService(serviceData) {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      const formattedData = {\n        name: serviceData.name,\n        description: serviceData.description,\n        base_price: Number(serviceData.basePrice),\n        time_required: Number(serviceData.timeRequired),\n        category: serviceData.category || 'General'\n      };\n      const response = await api.post('/api/admin/services', formattedData, {\n        headers: {\n          'Authentication-Token': token\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error creating service:', error.response?.data || error);\n      if (error.response?.status === 400) {\n        throw new Error(`Validation error: ${error.response.data.message || 'Invalid data'}`);\n      }\n      throw error;\n    }\n  },\n  async updateService(serviceId, serviceData) {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      const response = await api.put(`/api/admin/services/${serviceId}`, serviceData, {\n        headers: {\n          'Authentication-Token': token\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error updating service:', error);\n      throw error;\n    }\n  },\n  async deleteService(serviceId) {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      const response = await api.delete(`/api/admin/services/${serviceId}`, {\n        headers: {\n          'Authentication-Token': token\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting service:', error);\n      throw error;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","router","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","token","localStorage","getItem","console","log","url","substring","warn","error","Promise","reject","response","data","message","status","removeItem","push","Error","authService","register","userData","role","service_type","post","login","credentials","setItem","JSON","stringify","user","savedToken","targetPath","setTimeout","catch","err","name","logout","currentRoute","path","getCurrentUser","userStr","parse","serviceAPI","getServices","params","get","getServiceById","id","getServiceTypes","customerAPI","getRequests","createRequest","updateRequest","requestId","put","closeRequest","addReview","reviewData","professionalAPI","getAssignments","length","updateStatus","getProfile","updateProfile","adminAPI","getUsers","map","username","approveUser","userId","blockUser","reason","unblockUser","service","description","basePrice","base_price","timeRequired","time_required","category","is_active","createService","serviceData","formattedData","Number","updateService","serviceId","deleteService","delete"],"sources":["C:/Users/91829/OneDrive/Documents/VS CODE/Household_service_22f3000082/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios'\r\nimport router from '@/router'\r\n\r\n// Create axios instance with custom config\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:8080',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json'\r\n    \r\n  },\r\n  withCredentials: true // Important for CORS with credentials\r\n})\r\n\r\n// Request interceptor\r\napi.interceptors.request.use(config => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    // Use consistent header format based on what backend expects\r\n    config.headers['Authentication-Token'] = token;\r\n    \r\n    // Log for debugging\r\n    console.log(`Request to ${config.url} with token: ${token.substring(0, 15)}...`);\r\n  } else {\r\n    console.warn(`No token found for request to: ${config.url}`);\r\n  }\r\n  return config;\r\n}, error => {\r\n  console.error('Request interceptor error:', error);\r\n  return Promise.reject(error);\r\n});\r\n\r\n// Response interceptor\r\napi.interceptors.response.use(\r\n  response => response,\r\n  error => {\r\n    console.error('Response error:', error.response?.data || error.message)\r\n    if (error.response) {\r\n      switch (error.response.status) {\r\n        case 401:\r\n          // Unauthorized - clear storage and redirect to login\r\n          localStorage.removeItem('token')\r\n          localStorage.removeItem('user')\r\n          router.push('/login')\r\n          break\r\n        case 403:\r\n          // Forbidden - redirect to home\r\n          router.push('/')\r\n          break\r\n        case 500:\r\n          console.error('Server error:', error.response.data)\r\n          break\r\n      }\r\n      // Return the error message from the backend if available\r\n      if (error.response.data && error.response.data.message) {\r\n        return Promise.reject(new Error(error.response.data.message))\r\n      }\r\n    }\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// API Services\r\n// API Services\r\nexport const authService = {\r\n  async register(userData) {\r\n    try {\r\n      // Ensure professionals have a selected service type\r\n      if (userData.role === 'professional' && !userData.service_type) {\r\n        throw new Error(\"Professionals must select a service type.\");\r\n      }\r\n\r\n      console.log('Sending registration data:', userData);\r\n\r\n      const response = await api.post('/auth/register', userData);\r\n\r\n      console.log('Registration response:', response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Registration error:', error.response?.data || error.message);\r\n\r\n      // Capture and return specific backend errors\r\n      throw error.response?.data || { message: \"Registration failed. Please try again.\" };\r\n    }\r\n  },\r\n\r\n  async login(credentials) {\r\n    try {\r\n      console.log('Attempting login:', credentials)\r\n      const response = await api.post('/auth/login', credentials)\r\n      console.log('Login response:', response.data)\r\n      \r\n      if (response.data.token) {\r\n        // Store auth data - ensure token is saved correctly\r\n        const token = response.data.token\r\n        localStorage.setItem('token', token)\r\n        localStorage.setItem('user', JSON.stringify(response.data.user))\r\n        \r\n        // Verify token was saved correctly\r\n        const savedToken = localStorage.getItem('token')\r\n        console.log(`Token saved successfully: ${savedToken ? 'Yes' : 'No'}`)\r\n        console.log(`Saved token (first 15 chars): ${savedToken ? savedToken.substring(0, 15) : 'None'}`)\r\n        \r\n        // Debug: Check the localStorage item immediately\r\n        console.log('localStorage.token:', localStorage.getItem('token'))\r\n        console.log('localStorage.user:', localStorage.getItem('user'))\r\n\r\n        // Get target route path\r\n        const targetPath = `/${response.data.user.role}/dashboard`\r\n        \r\n        // Short delay to ensure token is saved before redirection\r\n        setTimeout(() => {\r\n          // Only navigate if not already on target page\r\n          // if (router.currentRoute.path !== targetPath) {\r\n            router.push(targetPath).catch(err => {\r\n              if (err.name !== 'NavigationDuplicated') {\r\n                console.error('Navigation error:', err)\r\n              }\r\n            })\r\n          }\r\n        , 500)\r\n      }\r\n      \r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Login error:', error.response?.data || error.message)\r\n      throw error\r\n    }\r\n  },\r\n\r\n  async logout() {\r\n    try {\r\n      await api.post('/auth/logout')\r\n      localStorage.removeItem('token')\r\n      localStorage.removeItem('user')\r\n\r\n      // Only navigate if not already on login page\r\n      if (router.currentRoute.path !== '/login') {\r\n      router.push('/login').catch(err => {\r\n          if (err.name !== 'NavigationDuplicated') {\r\n            console.error('Navigation error:', err)\r\n          }\r\n        })\r\n      }\r\n    } catch (error) {\r\n      console.error('Logout error:', error.response?.data || error.message)\r\n      // Still clear local storage and redirect even if API call fails\r\n      localStorage.removeItem('token')\r\n      localStorage.removeItem('user')\r\n\r\n      // Only navigate if not already on login page\r\n      if (router.currentRoute.path !== '/login') {\r\n      router.push('/login').catch(err => {\r\n          if (err.name !== 'NavigationDuplicated') {\r\n            console.error('Navigation error:', err)\r\n          }\r\n        })\r\n      }\r\n    }\r\n  },\r\n\r\n  getCurrentUser() {\r\n    const userStr = localStorage.getItem('user')\r\n    return userStr ? JSON.parse(userStr) : null\r\n  }\r\n}\r\n\r\nexport const serviceAPI = {\r\n  async getServices(params = {}) {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n\r\n      const response = await api.get('/api/admin/services', { \r\n        params,\r\n        headers: {\r\n          'Authentication-Token': token\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching services:', error)\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getServiceById(id) {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n\r\n      const response = await api.get(`/api/services/${id}`, {\r\n        headers: {\r\n          'Authentication-Token': token\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching service:', error)\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  // Add a new method to fetch service types directly\r\n  async getServiceTypes() {\r\n    try {\r\n      const response = await api.get('/api/service-types');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching service types:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport const customerAPI = {\r\n  async getRequests() {\r\n    try {\r\n      const response = await api.get('/api/customer/requests')\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error fetching requests:', error)\r\n      throw error\r\n    }\r\n  },\r\n\r\n  async createRequest(data) {\r\n    try {\r\n      const response = await api.post('/api/customer/requests', data)\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error creating request:', error)\r\n      throw error\r\n    }\r\n  },\r\n\r\n  async updateRequest(requestId, data) {\r\n    try {\r\n      const response = await api.put(`/api/customer/requests/${requestId}`, data)\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error updating request:', error)\r\n      throw error\r\n    }\r\n  },\r\n\r\n  async closeRequest(requestId) {\r\n    try {\r\n      const response = await api.put(`/api/customer/requests/${requestId}/close`)\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error closing request:', error)\r\n      throw error\r\n    }\r\n  },\r\n\r\n  async addReview(requestId, reviewData) {\r\n    try {\r\n      const response = await api.post(`/api/customer/requests/${requestId}/review`, reviewData)\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error adding review:', error)\r\n      throw error\r\n    }\r\n  }\r\n}\r\n\r\nexport const professionalAPI = {\r\n  async getAssignments(status = null) {\r\n    try {\r\n      console.log('Fetching professional assignments', status ? `with status: ${status}` : '')\r\n      const params = status ? { status } : {}\r\n      const response = await api.get('/api/professional/assignments', { params })\r\n      console.log('Received assignments:', response.data.length)\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error fetching assignments:', error)\r\n      throw error\r\n    }\r\n  },\r\n\r\n  async updateStatus(requestId, status) {\r\n    try {\r\n      console.log(`Updating request ${requestId} status to ${status}`)\r\n      const response = await api.put(`/api/professional/requests/${requestId}`, { status })\r\n      console.log('Status update response:', response.data)\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error updating status:', error)\r\n      throw error\r\n    }\r\n  },\r\n\r\n  async getProfile() {\r\n    try {\r\n      console.log('Fetching professional profile')\r\n      const response = await api.get('/api/professional/profile')\r\n      console.log('Retrieved profile data')\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error fetching profile:', error)\r\n      throw error\r\n    }\r\n  },\r\n\r\n  async updateProfile(data) {\r\n    try {\r\n      console.log('Updating professional profile with data:', data)\r\n      const response = await api.put('/api/professional/profile', data)\r\n      console.log('Profile update response:', response.data)\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error updating profile:', error)\r\n      throw error\r\n    }\r\n  }\r\n}\r\n\r\nexport const adminAPI = {\r\n  async getUsers(role = null) {\r\n    try {\r\n      console.log('Fetching users...');\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n\r\n      const params = role ? { role } : {};\r\n      const response = await api.get('/api/admin/users', { params });\r\n      \r\n      // Ensure users have the 'name' property for display\r\n      return response.data.map(user => {\r\n        if (!user.name) {\r\n          // Set a fallback name if none is provided\r\n          user.name = user.username || `User ${user.id}`;\r\n        }\r\n        return user;\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching users:', error.response?.data || error.message);\r\n      if (error.response?.status === 401) {\r\n        console.log('Unauthorized. Please check your token.');\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async approveUser(userId) {\r\n    try {\r\n      console.log(`Approving professional with ID: ${userId}`);\r\n      const response = await api.post(`/api/admin/professionals/${userId}/approve`);\r\n      console.log('Professional approved:', response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error approving user:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async blockUser(userId, reason = 'Violation of terms of service') {\r\n    try {\r\n      console.log(`Blocking user with ID: ${userId}, reason: ${reason}`);\r\n      const response = await api.post(`/api/admin/users/${userId}/block`, { reason });\r\n      console.log('User blocked:', response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error blocking user:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async unblockUser(userId) {\r\n    try {\r\n      console.log(`Unblocking user with ID: ${userId}`);\r\n      const response = await api.post(`/api/admin/users/${userId}/unblock`);\r\n      console.log('User unblocked:', response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error unblocking user:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getServices() {\r\n    try {\r\n      console.log('Fetching services...');\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n\r\n      const response = await api.get('/api/admin/services');\r\n      \r\n      // Transform services to expected format\r\n      return response.data.map(service => ({\r\n        id: service.id,\r\n        name: service.name,\r\n        description: service.description || '',\r\n        basePrice: service.base_price,\r\n        timeRequired: service.time_required,\r\n        category: service.category || 'General',\r\n        status: service.is_active !== false ? 'active' : 'inactive'\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching services:', error.response?.data || error.message);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async createService(serviceData) {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n\r\n      const formattedData = {\r\n        name: serviceData.name,\r\n        description: serviceData.description,\r\n        base_price: Number(serviceData.basePrice),\r\n        time_required: Number(serviceData.timeRequired),\r\n        category: serviceData.category || 'General'\r\n      };\r\n\r\n      const response = await api.post('/api/admin/services', formattedData, {\r\n        headers: {\r\n          'Authentication-Token': token\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating service:', error.response?.data || error);\r\n      if (error.response?.status === 400) {\r\n        throw new Error(`Validation error: ${error.response.data.message || 'Invalid data'}`);\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async updateService(serviceId, serviceData) {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n\r\n      const response = await api.put(`/api/admin/services/${serviceId}`, serviceData, {\r\n        headers: {\r\n          'Authentication-Token': token\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error updating service:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async deleteService(serviceId) {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n\r\n      const response = await api.delete(`/api/admin/services/${serviceId}`, {\r\n        headers: {\r\n          'Authentication-Token': token\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error deleting service:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default api"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}