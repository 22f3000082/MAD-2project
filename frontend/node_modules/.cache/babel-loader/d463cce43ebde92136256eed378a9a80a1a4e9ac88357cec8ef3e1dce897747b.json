{"ast":null,"code":"import axios from 'axios';\nimport router from '@/router';\n\n// Create axios instance with custom config\nconst api = axios.create({\n  baseURL: 'http://localhost:8080',\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  withCredentials: true // Important for CORS with credentials\n});\n\n// Add this interceptor at the top of your api.js\napi.interceptors.request.use(config => {\n  // Define routes that don't need authentication\n  const publicRoutes = ['/auth/login', '/auth/register', '/auth/logout', '/api/service-types', '/api/services', '/api/services/public', '/api/customer/services' // Add this as a public route\n  ];\n\n  // Check if the current request URL is for a public route\n  const isPublicRoute = publicRoutes.some(route => config.url.includes(route));\n  const token = localStorage.getItem('token');\n  if (token) {\n    // Flask-Security expects raw token without 'Bearer' prefix\n    config.headers['Authentication-Token'] = token;\n\n    // Only log non-sensitive requests to avoid exposing tokens in logs\n    if (!config.url.includes('/auth/')) {\n      console.log(`Request to ${config.url} with token available`);\n    }\n  } else if (!isPublicRoute) {\n    console.warn(`No token found for request to: ${config.url}`);\n\n    // Only redirect if the request is not already for a public route\n    // and we're not on a public page\n    const publicPaths = ['/login', '/register', '/'];\n    if (!publicPaths.includes(window.location.pathname)) {\n      console.log('Redirecting to login due to missing token');\n      window.location.href = '/login';\n    }\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Response interceptor\napi.interceptors.response.use(response => response, error => {\n  // Specific handling for CORS errors\n  if (error.message === 'Network Error') {\n    console.error('CORS or Network error detected:', error);\n    console.log('Request details:', error.config?.url, error.config?.method);\n\n    // Log available request headers for debugging\n    if (error.config?.headers) {\n      console.log('Request headers:', Object.keys(error.config.headers).map(k => `${k}: ${error.config.headers[k]}`));\n    }\n    return Promise.reject(new Error('Network error - This might be due to CORS issues or server unavailability.'));\n  }\n  console.error('Response error:', error.response?.data || error.message);\n  if (error.response) {\n    // Get current route before switch statement\n    const currentPath = router.currentRoute.value?.path || router.currentRoute?.path;\n    switch (error.response.status) {\n      case 401:\n        // Unauthorized - clear storage and redirect to login only if not already on login page\n        console.log('401 Unauthorized response - clearing auth and redirecting');\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        if (currentPath !== '/login') {\n          router.push('/login').catch(err => {\n            if (err.name !== 'NavigationDuplicated') {\n              console.error('Navigation error when redirecting to login:', err);\n            }\n          });\n        } else {\n          console.log('Already on login page, not redirecting');\n        }\n        break;\n      case 403:\n        router.push('/');\n        break;\n      case 500:\n        console.error('Server error:', error.response.data);\n        break;\n      default:\n        // Handle other status codes\n        break;\n    }\n\n    // Return the error message from the backend if available\n    if (error.response.data?.message) {\n      return Promise.reject(new Error(error.response.data.message));\n    }\n  }\n  return Promise.reject(error);\n});\n\n// API Services\n// API Services\nexport const authService = {\n  async register(userData) {\n    try {\n      // Ensure professionals have a selected service type\n      if (userData.role === 'professional' && !userData.service_type) {\n        throw new Error(\"Professionals must select a service type.\");\n      }\n      console.log('Sending registration data:', userData);\n      const response = await api.post('/auth/register', userData);\n      console.log('Registration response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Registration error:', error.response?.data || error.message);\n\n      // Capture and return specific backend errors\n      throw error.response?.data || {\n        message: \"Registration failed. Please try again.\"\n      };\n    }\n  },\n  async login(credentials) {\n    try {\n      // Check if credentials is empty or invalid\n      if (!credentials || !credentials.email || !credentials.password) {\n        console.error('Invalid login credentials:', credentials);\n        throw new Error('Email and password are required');\n      }\n      console.log(`Attempting login for user: ${credentials.email}`);\n      const response = await api.post('/auth/login', credentials);\n      if (response.data.token) {\n        localStorage.setItem('token', response.data.token);\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n\n        // Simplified navigation\n        const path = `/${response.data.user.role}/dashboard`;\n        console.log(`Login successful, navigating to: ${path}`);\n        router.push(path).catch(err => {\n          console.error('Navigation error:', err);\n        });\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Login error:', error.response?.data || error.message);\n      throw error;\n    }\n  },\n  async logout() {\n    try {\n      await api.post('/auth/logout');\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n\n      // Only navigate if not already on login page\n      if (router.currentRoute.value.path !== '/login') {\n        // Use catch with explicit handling for NavigationDuplicated\n        router.push('/login').catch(err => {\n          // Only print errors other than NavigationDuplicated\n          if (err.name !== 'NavigationDuplicated') {\n            console.error('Navigation error:', err);\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Logout error:', error.response?.data || error.message);\n      // Still clear local storage even if API call fails\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n\n      // Only navigate if not already on login page\n      if (router.currentRoute.value.path !== '/login') {\n        router.push('/login').catch(err => {\n          // Only print errors other than NavigationDuplicated\n          if (err.name !== 'NavigationDuplicated') {\n            console.error('Navigation error:', err);\n          }\n        });\n      }\n    }\n  },\n  getCurrentUser() {\n    const userStr = localStorage.getItem('user');\n    return userStr ? JSON.parse(userStr) : null;\n  }\n};\nexport const serviceAPI = {\n  async getServiceById(id) {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      const response = await api.get(`/api/services/${id}`, {\n        headers: {\n          'Authentication-Token': token\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching service:', error);\n      throw error;\n    }\n  },\n  // Add a new method to fetch service types directly\n  async getServiceTypes() {\n    try {\n      console.log('Calling API for service categories...');\n\n      // Try the dedicated service-types endpoint\n      try {\n        const response = await api.get('/api/service-types');\n        console.log('Service types API response:', response.data);\n        if (Array.isArray(response.data) && response.data.length > 0) {\n          return response.data;\n        } else {\n          console.warn('Service types endpoint returned empty array or invalid data');\n        }\n      } catch (error) {\n        console.error('Service types endpoint failed:', error.message);\n      }\n\n      // If the above fails, try the debug endpoint as fallback\n      try {\n        const debugResponse = await api.get('/api/debug/service-types');\n        console.log('Debug service types response:', debugResponse.data);\n        if (debugResponse.data.default_categories && Array.isArray(debugResponse.data.default_categories) && debugResponse.data.default_categories.length > 0) {\n          return debugResponse.data.default_categories;\n        }\n      } catch (debugError) {\n        console.error('Debug service types endpoint failed:', debugError.message);\n      }\n\n      // Final fallback: return hardcoded list\n      console.warn('Falling back to hardcoded service types');\n      return ['AC Repair', 'Plumbing', 'Electrical', 'Carpentry', 'Painting', 'Cleaning', 'Pest Control', 'Appliance Repair', 'Moving Services', 'Gardening'];\n    } catch (error) {\n      console.error('Error fetching service types:', error);\n      // Return default categories instead of throwing\n      return ['AC Repair', 'Plumbing', 'Electrical', 'Carpentry', 'Painting', 'Cleaning', 'Pest Control', 'Appliance Repair', 'Moving Services', 'Gardening'];\n    }\n  },\n  async getServices() {\n    try {\n      console.log('Fetching services...');\n      // Try multiple endpoints with fallback mechanism\n      try {\n        // First try the public services endpoint\n        const response = await api.get('/api/services/public');\n        console.log('Got services from public endpoint:', response.data.length);\n        return response.data;\n      } catch (error) {\n        console.warn('Public services endpoint failed, trying customer endpoint:', error.message);\n        try {\n          // Then try customer services endpoint\n          const customerResponse = await api.get('/api/customer/services');\n          console.log('Got services from customer endpoint:', customerResponse.data.length);\n          return customerResponse.data;\n        } catch (error) {\n          console.warn('Customer services endpoint failed, trying admin endpoint:', error.message);\n\n          // Finally try admin services endpoint\n          const adminResponse = await api.get('/api/admin/services');\n          console.log('Got services from admin endpoint:', adminResponse.data.length);\n          return adminResponse.data;\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching services:', error);\n      // Return empty array instead of throwing to prevent UI breaks\n      return [];\n    }\n  },\n  // Enhanced version of getPublicServices with multiple fallbacks\n  async getPublicServices() {\n    try {\n      console.log('Fetching public services for customers...');\n\n      // Try the dedicated public endpoint first\n      try {\n        const response = await api.get('/api/services/public');\n        console.log(`Received ${response.data.length} public services from public endpoint`);\n        return formatServiceData(response.data);\n      } catch (publicError) {\n        console.warn('Public services endpoint failed, trying regular services endpoint:', publicError.message);\n\n        // Try the general services endpoint second\n        try {\n          const generalResponse = await api.get('/api/services');\n          console.log(`Received ${generalResponse.data.length} services from general endpoint`);\n          return formatServiceData(generalResponse.data);\n        } catch (generalError) {\n          console.warn('General services endpoint failed, trying customer services endpoint:', generalError.message);\n\n          // Try customer-specific endpoint third\n          try {\n            const customerResponse = await api.get('/api/customer/services');\n            console.log(`Received ${customerResponse.data.length} services from customer endpoint`);\n            return formatServiceData(customerResponse.data);\n          } catch (customerError) {\n            console.warn('Customer services endpoint failed, trying admin endpoint as last resort:', customerError.message);\n\n            // Last resort - try admin endpoint but only return active services\n            const adminResponse = await api.get('/api/admin/services');\n            console.log(`Received ${adminResponse.data.length} services from admin endpoint`);\n            const activeServices = adminResponse.data.filter(service => service.is_active === true || service.status === 'active');\n            console.log(`Filtered down to ${activeServices.length} active services`);\n            return formatServiceData(activeServices);\n          }\n        }\n      }\n    } catch (error) {\n      console.error('All attempts to fetch services failed:', error);\n      throw new Error('Unable to load services. Please try again later.');\n    }\n  }\n};\n\n// Helper function to standardize service data format\nfunction formatServiceData(services) {\n  return services.map(service => ({\n    id: service.id,\n    name: service.name,\n    description: service.description || '',\n    base_price: service.base_price || service.basePrice || 0,\n    time_required: service.time_required || service.timeRequired || 0,\n    category: service.category || 'General',\n    is_active: service.is_active !== false // Default to active if not specified\n  }));\n}\nexport const customerAPI = {\n  async createRequest(data) {\n    try {\n      console.log('Creating service request with data:', data);\n\n      // Validate the data before sending to server\n      if (!data.pin_code) {\n        throw new Error('PIN code is required');\n      }\n      if (!data.service_id && !data.category) {\n        throw new Error('Either service_id or category is required');\n      }\n      const response = await api.post('/api/customer/requests', data);\n      console.log('Service request created successfully:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating request:', error);\n      // Enhanced error reporting\n      if (error.response?.data?.error) {\n        console.error('Backend error:', error.response.data.error);\n        throw new Error(error.response.data.error);\n      }\n      throw error;\n    }\n  },\n  async getRequests() {\n    try {\n      console.log('Fetching customer requests...');\n      const response = await api.get('/api/customer/requests');\n      console.log(`Received ${response.data.length} customer requests`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching customer requests:', error);\n      // Add more detailed logging for debugging\n      if (error.response) {\n        console.error('Response status:', error.response.status);\n        console.error('Response data:', error.response.data);\n      }\n      throw error;\n    }\n  },\n  async closeRequest(requestId) {\n    try {\n      const response = await api.put(`/api/customer/requests/${requestId}/close`);\n      return response.data;\n    } catch (error) {\n      console.error('Error closing request:', error);\n      throw error;\n    }\n  },\n  // Enhanced updateRequest method with additional parameters\n  async updateRequest(requestId, data) {\n    try {\n      const response = await api.put(`/api/customer/requests/${requestId}`, data);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating request:', error);\n      throw error;\n    }\n  },\n  // Enhanced addReview method with additional parameters\n  async addReview(requestId, reviewData) {\n    try {\n      console.log(`Submitting review for request ${requestId}:`, reviewData);\n\n      // Validate the review data\n      if (typeof reviewData.rating !== 'number' || reviewData.rating < 1 || reviewData.rating > 5) {\n        throw new Error('Rating must be a number between 1 and 5');\n      }\n      if (!reviewData.remarks || reviewData.remarks.trim() === '') {\n        throw new Error('Please provide comments with your review');\n      }\n      const response = await api.post(`/api/customer/requests/${requestId}/review`, reviewData);\n      console.log('Review submitted successfully:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error adding review:', error);\n      throw error;\n    }\n  },\n  async getAvailableServices() {\n    try {\n      console.log('Fetching available services...');\n      const response = await api.get('/api/customer/services');\n      return response.data.map(service => ({\n        id: service.id,\n        name: service.name,\n        description: service.description,\n        base_price: service.base_price,\n        time_required: service.time_required,\n        category: service.category\n      }));\n    } catch (error) {\n      console.error('Error fetching services:', error);\n      throw error;\n    }\n  }\n};\nexport const professionalAPI = {\n  async getAssignments(status = null) {\n    try {\n      // Check auth token before making request\n      const token = localStorage.getItem('token');\n      if (!token) {\n        console.error('No authentication token found for getAssignments call');\n        throw new Error('No authentication token found');\n      }\n      console.log('Fetching professional assignments', status ? `with status: ${status}` : '');\n      const params = status ? {\n        status\n      } : {};\n\n      // Add debugging to trace the exact API call\n      console.log(`API call URL: /api/professional/assignments`, params);\n\n      // Use standard timeout of 30 seconds\n      const response = await api.get('/api/professional/assignments', {\n        params,\n        headers: {\n          'Authentication-Token': token\n        },\n        timeout: 30000\n      });\n\n      // Log the full response for debugging\n      console.log(`Received assignments response:`, response);\n      console.log(`Response data:`, response.data);\n\n      // Always return an array, even if the response is irregular\n      if (!response.data) {\n        console.error('Empty response data for assignments');\n        return [];\n      }\n\n      // Validate response data structure\n      if (Array.isArray(response.data)) {\n        // Enhance response data to ensure all needed fields exist\n        return response.data.map(req => {\n          // Add default values if the required fields are missing\n          if (!req.service) {\n            console.warn(`Assignment ${req.id} is missing service data`);\n            req.service = {\n              name: 'Unknown Service',\n              base_price: 0\n            };\n          }\n          if (!req.customer) {\n            console.warn(`Assignment ${req.id} is missing customer data`);\n            req.customer = {\n              customer_name: 'Unknown Customer'\n            };\n          }\n          return req;\n        });\n      }\n      console.error('Unexpected response format:', response.data);\n      return [];\n    } catch (error) {\n      console.error('Error fetching assignments:', error);\n      // Return empty array instead of throwing to prevent dashboard from breaking\n      return [];\n    }\n  },\n  async updateStatus(requestId, status) {\n    try {\n      console.log(`Updating request ${requestId} status to ${status}`);\n      const response = await api.put(`/api/professional/requests/${requestId}`, {\n        status\n      });\n      console.log('Status update response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating status:', error);\n      throw error;\n    }\n  },\n  async getProfile() {\n    try {\n      // Check auth token before making request\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      console.log('Fetching professional profile');\n      const response = await api.get('/api/professional/profile');\n      console.log('Retrieved profile data');\n\n      // After getting profile, also fetch reviews to include in the profile\n      try {\n        const reviewsResponse = await api.get('/api/professional/reviews');\n        if (Array.isArray(reviewsResponse.data)) {\n          response.data.reviews = reviewsResponse.data;\n        }\n      } catch (reviewError) {\n        console.error('Error fetching reviews for profile:', reviewError);\n        response.data.reviews = [];\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching profile:', error);\n      // Return basic profile instead of throwing to prevent dashboard from breaking\n      return {\n        professional_name: 'Professional',\n        service_type: 'Not specified',\n        description: '',\n        experience: 0,\n        is_approved: false,\n        average_rating: 0,\n        total_reviews: 0,\n        reviews: []\n      };\n    }\n  },\n  async updateProfile(data) {\n    try {\n      console.log('Updating professional profile with data:', data);\n      const response = await api.put('/api/professional/profile', data);\n      console.log('Profile update response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      throw error;\n    }\n  },\n  async getReviews() {\n    try {\n      // Check auth token before making request\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      console.log('Fetching professional reviews');\n      const response = await api.get('/api/professional/reviews');\n      console.log('Retrieved reviews:', response.data.length);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching reviews:', error);\n      // Return empty array instead of throwing\n      return [];\n    }\n  },\n  async updateAvailability(isAvailable) {\n    try {\n      console.log(`Updating availability to: ${isAvailable}`);\n      const response = await api.put('/api/professional/availability', {\n        is_available: isAvailable\n      });\n      console.log('Availability update response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating availability:', error);\n      throw error;\n    }\n  },\n  async confirmLocationExit(requestId) {\n    try {\n      console.log(`Confirming exit for request: ${requestId}`);\n      const response = await api.post(`/api/professional/requests/${requestId}/exit-location`);\n      console.log('Location exit confirmation response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error confirming location exit:', error);\n      throw error;\n    }\n  },\n  /* eslint-disable no-dupe-keys */\n  // Fetch ALL available service requests from the database\n  async getAvailableRequests() {\n    try {\n      // Check auth token before making request\n      const token = localStorage.getItem('token');\n      if (!token) {\n        console.error('No authentication token found for getAvailableRequests call');\n        throw new Error('No authentication token found');\n      }\n      console.log('Fetching available service requests');\n      console.log(`API call URL: /api/professional/available-requests`);\n\n      // Try to get requests from the primary endpoint\n      let response;\n      try {\n        response = await api.get('/api/professional/available-requests', {\n          headers: {\n            'Authentication-Token': token\n          },\n          timeout: 30000\n        });\n        console.log(`Primary endpoint returned ${response.data?.length || 0} requests`);\n      } catch (primaryError) {\n        console.error('Primary endpoint failed, trying fallback:', primaryError);\n        // If primary endpoint fails, try the debug endpoint\n        response = await api.get('/api/professional/all-pending-requests', {\n          headers: {\n            'Authentication-Token': token\n          },\n          timeout: 30000\n        });\n\n        // Transform the response to match expected format\n        if (response.data?.requests) {\n          console.log(`Fallback endpoint returned ${response.data.requests.length} requests`);\n          response.data = response.data.requests;\n        }\n      }\n\n      // Log the full response for debugging\n      console.log(`Received available requests:`, response.data);\n      // Provide sensible defaults for missing data\n      if (Array.isArray(response.data)) {\n        return response.data.map(req => {\n          // Create consistent request objects\n          const enhancedRequest = {\n            ...req,\n            // Ensure service object exists\n            service: req.service || req.service_info || {\n              name: 'Unknown Service',\n              base_price: 0,\n              description: ''\n            },\n            // Ensure customer object exists\n            customer: req.customer || req.customer_info || {\n              customer_name: 'Customer',\n              phone: 'Available after accepting'\n            },\n            // Add UI flags\n            isNewRequest: true\n          };\n          return enhancedRequest;\n        });\n      }\n      console.error('Unexpected response format for available requests:', response.data);\n      return [];\n    } catch (error) {\n      console.error('Error fetching available requests:', error);\n      // Return empty array instead of throwing to prevent dashboard from breaking\n      return [];\n    }\n  },\n  // Add a new method to get ALL pending requests (for debugging)\n  async getAllPendingRequests() {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      console.log('Fetching ALL pending service requests (debug)');\n      const response = await api.get('/api/professional/all-pending-requests', {\n        headers: {\n          'Authentication-Token': token\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching all pending requests:', error);\n      return {\n        total_count: 0,\n        requests: []\n      };\n    }\n  },\n  /* eslint-enable no-dupe-keys */\n\n  async addRejectionReason(requestId, reason) {\n    try {\n      console.log(`Adding rejection reason for request ${requestId}: ${reason}`);\n\n      // Enhanced error handling and logging\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('Authentication required');\n      }\n\n      // Make sure request has proper payload format\n      const payload = {\n        reason\n      };\n\n      // Add explicit timeout and headers\n      const response = await api.post(`/api/professional/requests/${requestId}/reject-reason`, payload, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authentication-Token': token\n        },\n        timeout: 10000\n      });\n      console.log('Rejection reason added:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error adding rejection reason:', error);\n      // Provide more detailed error for debugging\n      if (error.response) {\n        console.error('Response status:', error.response.status);\n        console.error('Response data:', error.response.data);\n      }\n      throw error;\n    }\n  }\n};\nexport const adminAPI = {\n  async getUsers(role = null) {\n    try {\n      console.log('Fetching users...');\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      const params = role ? {\n        role\n      } : {};\n      const response = await api.get('/api/admin/users', {\n        params\n      });\n\n      // Ensure users have the 'name' property for display\n      return response.data.map(user => {\n        if (!user.name) {\n          // Set a fallback name if none is provided\n          user.name = user.username || `User ${user.id}`;\n        }\n        return user;\n      });\n    } catch (error) {\n      console.error('Error fetching users:', error.response?.data || error.message);\n      if (error.response?.status === 401) {\n        console.log('Unauthorized. Please check your token.');\n      }\n      throw error;\n    }\n  },\n  async approveUser(userId) {\n    try {\n      console.log(`Approving professional with ID: ${userId}`);\n      const response = await api.post(`/api/admin/professionals/${userId}/approve`);\n      console.log('Professional approved:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error approving user:', error);\n      throw error;\n    }\n  },\n  async blockUser(userId, reason = 'Violation of terms of service') {\n    try {\n      console.log(`Blocking user with ID: ${userId}, reason: ${reason}`);\n      const response = await api.post(`/api/admin/users/${userId}/block`, {\n        reason\n      });\n      console.log('User blocked:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error blocking user:', error);\n      throw error;\n    }\n  },\n  async unblockUser(userId) {\n    try {\n      console.log(`Unblocking user with ID: ${userId}`);\n      const response = await api.post(`/api/admin/users/${userId}/unblock`);\n      console.log('User unblocked:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error unblocking user:', error);\n      throw error;\n    }\n  },\n  async getServices() {\n    try {\n      console.log('Fetching services...');\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      const response = await api.get('/api/admin/services');\n      console.log('Services response:', response.data); // Add debugging\n\n      // If backend already sends camelCase fields, return directly\n      if (response.data && Array.isArray(response.data)) {\n        // Make sure each service has the expected format\n        return response.data.map(service => ({\n          id: service.id,\n          name: service.name,\n          description: service.description || '',\n          base_price: service.base_price || service.basePrice,\n          timeRequired: service.timeRequired || service.time_required,\n          category: service.category || 'General',\n          status: service.is_active !== false ? 'active' : 'inactive'\n        }));\n      }\n      return [];\n    } catch (error) {\n      console.error('Error fetching services:', error.response?.data || error.message);\n      throw error;\n    }\n  },\n  async createService(serviceData) {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      const formattedData = {\n        name: serviceData.name,\n        description: serviceData.description,\n        base_price: Number(serviceData.base_price),\n        time_required: Number(serviceData.timeRequired),\n        category: serviceData.category || 'General'\n      };\n      const response = await api.post('/api/admin/services', formattedData, {\n        headers: {\n          'Authentication-Token': token\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error creating service:', error.response?.data || error);\n      if (error.response?.status === 400) {\n        throw new Error(`Validation error: ${error.response.data.message || 'Invalid data'}`);\n      }\n      throw error;\n    }\n  },\n  async update_service(serviceId, serviceData) {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      const response = await api.put(`/api/admin/services/${serviceId}`, serviceData, {\n        headers: {\n          'Authentication-Token': token\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error updating service:', error);\n      throw error;\n    }\n  },\n  async deleteService(service_id) {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      const response = await api.delete(`/api/admin/services/${service_id}`, {\n        headers: {\n          'Authentication-Token': token\n        }\n      });\n      // return response.data;\n\n      // Check response status\n      if (response.data.status === 'deactivated') {\n        return {\n          success: true,\n          wasDeactivated: true,\n          message: response.data.message\n        };\n      }\n      return {\n        success: true,\n        wasDeactivated: false,\n        message: response.data.message\n      };\n    } catch (error) {\n      console.error('Error deleting service:', error);\n      throw new Error(error.response?.data?.message || 'Failed to delete service');\n    }\n  },\n  async getServiceRequests(params = {}) {\n    try {\n      console.log('Fetching service requests...');\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n      const response = await api.get('/api/admin/requests', {\n        params\n      });\n      console.log(`Retrieved ${response.data.length} service requests`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching service requests:', error.response?.data || error.message);\n      throw error;\n    }\n  }\n\n  // async deleteService(service_id) {\n  //   try {\n  //       const token = localStorage.getItem('token');\n  //       if (!token) {\n  //           throw new Error('Authentication required');\n  //       }\n  //       const response = await api.delete(`/api/admin/services/${service_id}`, {\n  //           headers: {\n  //               'Authentication-Token': token\n  //           }\n  //       });\n  //       return response.data;\n  //   } catch (error) {\n  //       console.error('Delete service error:', error.response || error);\n  //       throw new Error(error.response?.data?.message || 'Failed to delete service');\n  //   }\n  // }\n};\n\n// Export individual functions for components that import them directly\nexport const getServices = async () => {\n  return serviceAPI.getServices();\n};\nexport const getProfile = async () => {\n  return professionalAPI.getProfile();\n};\nexport const getAssignments = async () => {\n  return professionalAPI.getAssignments();\n};\nexport const getReviews = async () => {\n  return professionalAPI.getReviews();\n};\nexport const getAvailableRequests = async () => {\n  return professionalAPI.getAvailableRequests();\n};\nexport default api;","map":{"version":3,"names":["axios","router","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","publicRoutes","isPublicRoute","some","route","url","includes","token","localStorage","getItem","console","log","warn","publicPaths","window","location","pathname","href","error","Promise","reject","response","message","method","Object","keys","map","k","Error","data","currentPath","currentRoute","value","path","status","removeItem","push","catch","err","name","authService","register","userData","role","service_type","post","login","credentials","email","password","setItem","JSON","stringify","user","logout","getCurrentUser","userStr","parse","serviceAPI","getServiceById","id","get","getServiceTypes","Array","isArray","length","debugResponse","default_categories","debugError","getServices","customerResponse","adminResponse","getPublicServices","formatServiceData","publicError","generalResponse","generalError","customerError","activeServices","filter","service","is_active","services","description","base_price","basePrice","time_required","timeRequired","category","customerAPI","createRequest","pin_code","service_id","getRequests","closeRequest","requestId","put","updateRequest","addReview","reviewData","rating","remarks","trim","getAvailableServices","professionalAPI","getAssignments","params","timeout","req","customer","customer_name","updateStatus","getProfile","reviewsResponse","reviews","reviewError","professional_name","experience","is_approved","average_rating","total_reviews","updateProfile","getReviews","updateAvailability","isAvailable","is_available","confirmLocationExit","getAvailableRequests","primaryError","requests","enhancedRequest","service_info","customer_info","phone","isNewRequest","getAllPendingRequests","total_count","addRejectionReason","reason","payload","adminAPI","getUsers","username","approveUser","userId","blockUser","unblockUser","createService","serviceData","formattedData","Number","update_service","serviceId","deleteService","delete","success","wasDeactivated","getServiceRequests"],"sources":["C:/Users/91829/OneDrive/Documents/VS CODE/Household_service_22f3000082/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios'\r\nimport router from '@/router'\r\n\r\n// Create axios instance with custom config\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:8080',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json'\r\n    \r\n  },\r\n  withCredentials: true // Important for CORS with credentials\r\n})\r\n\r\n// Add this interceptor at the top of your api.js\r\napi.interceptors.request.use(config => {\r\n  // Define routes that don't need authentication\r\n  const publicRoutes = [\r\n    '/auth/login', \r\n    '/auth/register', \r\n    '/auth/logout', \r\n    '/api/service-types', \r\n    '/api/services',\r\n    '/api/services/public',\r\n    '/api/customer/services'  // Add this as a public route\r\n  ];\r\n  \r\n  // Check if the current request URL is for a public route\r\n  const isPublicRoute = publicRoutes.some(route => config.url.includes(route));\r\n  \r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    // Flask-Security expects raw token without 'Bearer' prefix\r\n    config.headers['Authentication-Token'] = token;\r\n    \r\n    // Only log non-sensitive requests to avoid exposing tokens in logs\r\n    if (!config.url.includes('/auth/')) {\r\n      console.log(`Request to ${config.url} with token available`);\r\n    }\r\n  } else if (!isPublicRoute) {\r\n    console.warn(`No token found for request to: ${config.url}`);\r\n    \r\n    // Only redirect if the request is not already for a public route\r\n    // and we're not on a public page\r\n    const publicPaths = ['/login', '/register', '/'];\r\n    if (!publicPaths.includes(window.location.pathname)) {\r\n      console.log('Redirecting to login due to missing token');\r\n      window.location.href = '/login';\r\n    }\r\n  }\r\n  return config;\r\n}, error => Promise.reject(error));\r\n\r\n// Response interceptor\r\napi.interceptors.response.use(\r\n  response => response,\r\n  error => {\r\n    // Specific handling for CORS errors\r\n    if (error.message === 'Network Error') {\r\n      console.error('CORS or Network error detected:', error);\r\n      console.log('Request details:', error.config?.url, error.config?.method);\r\n      \r\n      // Log available request headers for debugging\r\n      if (error.config?.headers) {\r\n        console.log('Request headers:', Object.keys(error.config.headers).map(k => `${k}: ${error.config.headers[k]}`));\r\n      }\r\n      \r\n      return Promise.reject(new Error('Network error - This might be due to CORS issues or server unavailability.'));\r\n    }\r\n    \r\n    console.error('Response error:', error.response?.data || error.message);\r\n    \r\n    if (error.response) {\r\n      // Get current route before switch statement\r\n      const currentPath = router.currentRoute.value?.path || router.currentRoute?.path;\r\n      \r\n      switch (error.response.status) {\r\n        case 401:\r\n          // Unauthorized - clear storage and redirect to login only if not already on login page\r\n          console.log('401 Unauthorized response - clearing auth and redirecting');\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('user');\r\n          \r\n          if (currentPath !== '/login') {\r\n            router.push('/login').catch(err => {\r\n              if (err.name !== 'NavigationDuplicated') {\r\n                console.error('Navigation error when redirecting to login:', err);\r\n              }\r\n            });\r\n          } else {\r\n            console.log('Already on login page, not redirecting');\r\n          }\r\n          break;\r\n        \r\n        case 403:\r\n          router.push('/');\r\n          break;\r\n          \r\n        case 500:\r\n          console.error('Server error:', error.response.data);\r\n          break;\r\n          \r\n        default:\r\n          // Handle other status codes\r\n          break;\r\n      }\r\n\r\n      // Return the error message from the backend if available\r\n      if (error.response.data?.message) {\r\n        return Promise.reject(new Error(error.response.data.message));\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// API Services\r\n// API Services\r\nexport const authService = {\r\n  async register(userData) {\r\n    try {\r\n      // Ensure professionals have a selected service type\r\n      if (userData.role === 'professional' && !userData.service_type) {\r\n        throw new Error(\"Professionals must select a service type.\");\r\n      }\r\n\r\n      console.log('Sending registration data:', userData);\r\n\r\n      const response = await api.post('/auth/register', userData);\r\n\r\n      console.log('Registration response:', response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Registration error:', error.response?.data || error.message);\r\n\r\n      // Capture and return specific backend errors\r\n      throw error.response?.data || { message: \"Registration failed. Please try again.\" };\r\n    }\r\n  },\r\n\r\n  async login(credentials) {\r\n    try {\r\n      // Check if credentials is empty or invalid\r\n      if (!credentials || !credentials.email || !credentials.password) {\r\n        console.error('Invalid login credentials:', credentials);\r\n        throw new Error('Email and password are required');\r\n      }\r\n      \r\n      console.log(`Attempting login for user: ${credentials.email}`);\r\n      const response = await api.post('/auth/login', credentials);\r\n      \r\n      if (response.data.token) {\r\n        localStorage.setItem('token', response.data.token);\r\n        localStorage.setItem('user', JSON.stringify(response.data.user));\r\n        \r\n        // Simplified navigation\r\n        const path = `/${response.data.user.role}/dashboard`;\r\n        console.log(`Login successful, navigating to: ${path}`);\r\n        router.push(path).catch(err => {\r\n          console.error('Navigation error:', err);\r\n        });\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Login error:', error.response?.data || error.message);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async logout() {\r\n    try {\r\n      await api.post('/auth/logout')\r\n      localStorage.removeItem('token')\r\n      localStorage.removeItem('user')\r\n\r\n      // Only navigate if not already on login page\r\n      if (router.currentRoute.value.path !== '/login') {\r\n        // Use catch with explicit handling for NavigationDuplicated\r\n        router.push('/login').catch(err => {\r\n          // Only print errors other than NavigationDuplicated\r\n          if (err.name !== 'NavigationDuplicated') {\r\n            console.error('Navigation error:', err)\r\n          }\r\n        })\r\n      }\r\n    } catch (error) {\r\n      console.error('Logout error:', error.response?.data || error.message)\r\n      // Still clear local storage even if API call fails\r\n      localStorage.removeItem('token')\r\n      localStorage.removeItem('user')\r\n\r\n      // Only navigate if not already on login page\r\n      if (router.currentRoute.value.path !== '/login') {\r\n        router.push('/login').catch(err => {\r\n          // Only print errors other than NavigationDuplicated\r\n          if (err.name !== 'NavigationDuplicated') {\r\n            console.error('Navigation error:', err)\r\n          }\r\n        })\r\n      }\r\n    }\r\n  },\r\n\r\n  getCurrentUser() {\r\n    const userStr = localStorage.getItem('user')\r\n    return userStr ? JSON.parse(userStr) : null\r\n  }\r\n}\r\n\r\nexport const serviceAPI = {\r\n  async getServiceById(id) {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n\r\n      const response = await api.get(`/api/services/${id}`, {\r\n        headers: {\r\n          'Authentication-Token': token\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching service:', error)\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  // Add a new method to fetch service types directly\r\n  async getServiceTypes() {\r\n    try {\r\n      console.log('Calling API for service categories...');\r\n      \r\n      // Try the dedicated service-types endpoint\r\n      try {\r\n        const response = await api.get('/api/service-types');\r\n        console.log('Service types API response:', response.data);\r\n        \r\n        if (Array.isArray(response.data) && response.data.length > 0) {\r\n          return response.data;\r\n        } else {\r\n          console.warn('Service types endpoint returned empty array or invalid data');\r\n        }\r\n      } catch (error) {\r\n        console.error('Service types endpoint failed:', error.message);\r\n      }\r\n      \r\n      // If the above fails, try the debug endpoint as fallback\r\n      try {\r\n        const debugResponse = await api.get('/api/debug/service-types');\r\n        console.log('Debug service types response:', debugResponse.data);\r\n        \r\n        if (debugResponse.data.default_categories && \r\n            Array.isArray(debugResponse.data.default_categories) && \r\n            debugResponse.data.default_categories.length > 0) {\r\n          return debugResponse.data.default_categories;\r\n        }\r\n      } catch (debugError) {\r\n        console.error('Debug service types endpoint failed:', debugError.message);\r\n      }\r\n      \r\n      // Final fallback: return hardcoded list\r\n      console.warn('Falling back to hardcoded service types');\r\n      return [\r\n        'AC Repair', 'Plumbing', 'Electrical', 'Carpentry', 'Painting',\r\n        'Cleaning', 'Pest Control', 'Appliance Repair', 'Moving Services', 'Gardening'\r\n      ];\r\n    } catch (error) {\r\n      console.error('Error fetching service types:', error);\r\n      // Return default categories instead of throwing\r\n      return [\r\n        'AC Repair', 'Plumbing', 'Electrical', 'Carpentry', 'Painting',\r\n        'Cleaning', 'Pest Control', 'Appliance Repair', 'Moving Services', 'Gardening'\r\n      ];\r\n    }\r\n  },\r\n  \r\n  async getServices() {\r\n    try {\r\n      console.log('Fetching services...');\r\n      // Try multiple endpoints with fallback mechanism\r\n      try {\r\n        // First try the public services endpoint\r\n        const response = await api.get('/api/services/public');\r\n        console.log('Got services from public endpoint:', response.data.length);\r\n        return response.data;\r\n      } catch (error) {\r\n        console.warn('Public services endpoint failed, trying customer endpoint:', error.message);\r\n        \r\n        try {\r\n          // Then try customer services endpoint\r\n          const customerResponse = await api.get('/api/customer/services');\r\n          console.log('Got services from customer endpoint:', customerResponse.data.length);\r\n          return customerResponse.data;\r\n        } catch (error) {\r\n          console.warn('Customer services endpoint failed, trying admin endpoint:', error.message);\r\n          \r\n          // Finally try admin services endpoint\r\n          const adminResponse = await api.get('/api/admin/services');\r\n          console.log('Got services from admin endpoint:', adminResponse.data.length);\r\n          return adminResponse.data;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching services:', error);\r\n      // Return empty array instead of throwing to prevent UI breaks\r\n      return [];\r\n    }\r\n  },\r\n  \r\n  // Enhanced version of getPublicServices with multiple fallbacks\r\n  async getPublicServices() {\r\n    try {\r\n      console.log('Fetching public services for customers...');\r\n      \r\n      // Try the dedicated public endpoint first\r\n      try {\r\n        const response = await api.get('/api/services/public');\r\n        console.log(`Received ${response.data.length} public services from public endpoint`);\r\n        return formatServiceData(response.data);\r\n      } catch (publicError) {\r\n        console.warn('Public services endpoint failed, trying regular services endpoint:', publicError.message);\r\n        \r\n        // Try the general services endpoint second\r\n        try {\r\n          const generalResponse = await api.get('/api/services');\r\n          console.log(`Received ${generalResponse.data.length} services from general endpoint`);\r\n          return formatServiceData(generalResponse.data);\r\n        } catch (generalError) {\r\n          console.warn('General services endpoint failed, trying customer services endpoint:', generalError.message);\r\n          \r\n          // Try customer-specific endpoint third\r\n          try {\r\n            const customerResponse = await api.get('/api/customer/services');\r\n            console.log(`Received ${customerResponse.data.length} services from customer endpoint`);\r\n            return formatServiceData(customerResponse.data);\r\n          } catch (customerError) {\r\n            console.warn('Customer services endpoint failed, trying admin endpoint as last resort:', customerError.message);\r\n            \r\n            // Last resort - try admin endpoint but only return active services\r\n            const adminResponse = await api.get('/api/admin/services');\r\n            console.log(`Received ${adminResponse.data.length} services from admin endpoint`);\r\n            const activeServices = adminResponse.data.filter(service => \r\n              service.is_active === true || service.status === 'active'\r\n            );\r\n            console.log(`Filtered down to ${activeServices.length} active services`);\r\n            return formatServiceData(activeServices);\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('All attempts to fetch services failed:', error);\r\n      throw new Error('Unable to load services. Please try again later.');\r\n    }\r\n  }\r\n}\r\n\r\n// Helper function to standardize service data format\r\nfunction formatServiceData(services) {\r\n  return services.map(service => ({\r\n    id: service.id,\r\n    name: service.name,\r\n    description: service.description || '',\r\n    base_price: service.base_price || service.basePrice || 0,\r\n    time_required: service.time_required || service.timeRequired || 0,\r\n    category: service.category || 'General',\r\n    is_active: service.is_active !== false // Default to active if not specified\r\n  }));\r\n}\r\n\r\nexport const customerAPI = {\r\n  async createRequest(data) {\r\n    try {\r\n      console.log('Creating service request with data:', data);\r\n      \r\n      // Validate the data before sending to server\r\n      if (!data.pin_code) {\r\n        throw new Error('PIN code is required');\r\n      }\r\n      \r\n      if (!data.service_id && !data.category) {\r\n        throw new Error('Either service_id or category is required');\r\n      }\r\n      \r\n      const response = await api.post('/api/customer/requests', data);\r\n      console.log('Service request created successfully:', response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating request:', error);\r\n      // Enhanced error reporting\r\n      if (error.response?.data?.error) {\r\n        console.error('Backend error:', error.response.data.error);\r\n        throw new Error(error.response.data.error);\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  async getRequests() {\r\n    try {\r\n      console.log('Fetching customer requests...');\r\n      const response = await api.get('/api/customer/requests');\r\n      console.log(`Received ${response.data.length} customer requests`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching customer requests:', error);\r\n      // Add more detailed logging for debugging\r\n      if (error.response) {\r\n        console.error('Response status:', error.response.status);\r\n        console.error('Response data:', error.response.data);\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  async closeRequest(requestId) {\r\n    try {\r\n      const response = await api.put(`/api/customer/requests/${requestId}/close`)\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error closing request:', error)\r\n      throw error\r\n    }\r\n  },\r\n\r\n  // Enhanced updateRequest method with additional parameters\r\n  async updateRequest(requestId, data) {\r\n    try {\r\n      const response = await api.put(`/api/customer/requests/${requestId}`, data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error updating request:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  // Enhanced addReview method with additional parameters\r\n  async addReview(requestId, reviewData) {\r\n    try {\r\n      console.log(`Submitting review for request ${requestId}:`, reviewData);\r\n      \r\n      // Validate the review data\r\n      if (typeof reviewData.rating !== 'number' || reviewData.rating < 1 || reviewData.rating > 5) {\r\n        throw new Error('Rating must be a number between 1 and 5');\r\n      }\r\n      \r\n      if (!reviewData.remarks || reviewData.remarks.trim() === '') {\r\n        throw new Error('Please provide comments with your review');\r\n      }\r\n      \r\n      const response = await api.post(`/api/customer/requests/${requestId}/review`, reviewData);\r\n      console.log('Review submitted successfully:', response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error adding review:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getAvailableServices() {\r\n    try {\r\n      console.log('Fetching available services...');\r\n      const response = await api.get('/api/customer/services');\r\n      return response.data.map(service => ({\r\n        id: service.id,\r\n        name: service.name,\r\n        description: service.description,\r\n        base_price: service.base_price,\r\n        time_required: service.time_required,\r\n        category: service.category\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching services:', error);\r\n      throw error;\r\n    }\r\n  },\r\n}\r\n\r\nexport const professionalAPI = {\r\n  async getAssignments(status = null) {\r\n    try {\r\n      // Check auth token before making request\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        console.error('No authentication token found for getAssignments call');\r\n        throw new Error('No authentication token found');\r\n      }\r\n      \r\n      console.log('Fetching professional assignments', status ? `with status: ${status}` : '');\r\n      const params = status ? { status } : {};\r\n      \r\n      // Add debugging to trace the exact API call\r\n      console.log(`API call URL: /api/professional/assignments`, params);\r\n      \r\n      // Use standard timeout of 30 seconds\r\n      const response = await api.get('/api/professional/assignments', { \r\n        params,\r\n        headers: {\r\n          'Authentication-Token': token\r\n        },\r\n        timeout: 30000\r\n      });\r\n      \r\n      // Log the full response for debugging\r\n      console.log(`Received assignments response:`, response);\r\n      console.log(`Response data:`, response.data);\r\n      \r\n      // Always return an array, even if the response is irregular\r\n      if (!response.data) {\r\n        console.error('Empty response data for assignments');\r\n        return [];\r\n      }\r\n      \r\n      // Validate response data structure\r\n      if (Array.isArray(response.data)) {\r\n        // Enhance response data to ensure all needed fields exist\r\n        return response.data.map(req => {\r\n          // Add default values if the required fields are missing\r\n          if (!req.service) {\r\n            console.warn(`Assignment ${req.id} is missing service data`);\r\n            req.service = { name: 'Unknown Service', base_price: 0 };\r\n          }\r\n          \r\n          if (!req.customer) {\r\n            console.warn(`Assignment ${req.id} is missing customer data`);\r\n            req.customer = { customer_name: 'Unknown Customer' };\r\n          }\r\n          \r\n          return req;\r\n        });\r\n      }\r\n      \r\n      console.error('Unexpected response format:', response.data);\r\n      return [];\r\n    } catch (error) {\r\n      console.error('Error fetching assignments:', error);\r\n      // Return empty array instead of throwing to prevent dashboard from breaking\r\n      return [];\r\n    }\r\n  },\r\n\r\n  async updateStatus(requestId, status) {\r\n    try {\r\n      console.log(`Updating request ${requestId} status to ${status}`)\r\n      const response = await api.put(`/api/professional/requests/${requestId}`, { status })\r\n      console.log('Status update response:', response.data)\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error updating status:', error)\r\n      throw error\r\n    }\r\n  },\r\n\r\n  async getProfile() {\r\n    try {\r\n      // Check auth token before making request\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n      \r\n      console.log('Fetching professional profile');\r\n      const response = await api.get('/api/professional/profile');\r\n      console.log('Retrieved profile data');\r\n      \r\n      // After getting profile, also fetch reviews to include in the profile\r\n      try {\r\n        const reviewsResponse = await api.get('/api/professional/reviews');\r\n        if (Array.isArray(reviewsResponse.data)) {\r\n          response.data.reviews = reviewsResponse.data;\r\n        }\r\n      } catch (reviewError) {\r\n        console.error('Error fetching reviews for profile:', reviewError);\r\n        response.data.reviews = [];\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching profile:', error);\r\n      // Return basic profile instead of throwing to prevent dashboard from breaking\r\n      return {\r\n        professional_name: 'Professional',\r\n        service_type: 'Not specified',\r\n        description: '',\r\n        experience: 0,\r\n        is_approved: false,\r\n        average_rating: 0,\r\n        total_reviews: 0,\r\n        reviews: []\r\n      };\r\n    }\r\n  },\r\n\r\n  async updateProfile(data) {\r\n    try {\r\n      console.log('Updating professional profile with data:', data)\r\n      const response = await api.put('/api/professional/profile', data)\r\n      console.log('Profile update response:', response.data)\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error updating profile:', error)\r\n      throw error\r\n    }\r\n  },\r\n  \r\n  async getReviews() {\r\n    try {\r\n      // Check auth token before making request\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n      \r\n      console.log('Fetching professional reviews');\r\n      const response = await api.get('/api/professional/reviews');\r\n      console.log('Retrieved reviews:', response.data.length);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching reviews:', error);\r\n      // Return empty array instead of throwing\r\n      return [];\r\n    }\r\n  },\r\n\r\n  async updateAvailability(isAvailable) {\r\n    try {\r\n      console.log(`Updating availability to: ${isAvailable}`)\r\n      const response = await api.put('/api/professional/availability', { is_available: isAvailable })\r\n      console.log('Availability update response:', response.data)\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error updating availability:', error)\r\n      throw error\r\n    }\r\n  },\r\n\r\n  async confirmLocationExit(requestId) {\r\n    try {\r\n      console.log(`Confirming exit for request: ${requestId}`)\r\n      const response = await api.post(`/api/professional/requests/${requestId}/exit-location`)\r\n      console.log('Location exit confirmation response:', response.data)\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error confirming location exit:', error)\r\n      throw error\r\n    }\r\n  },\r\n  \r\n  /* eslint-disable no-dupe-keys */\r\n  // Fetch ALL available service requests from the database\r\n  async getAvailableRequests() {\r\n    try {\r\n      // Check auth token before making request\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        console.error('No authentication token found for getAvailableRequests call');\r\n        throw new Error('No authentication token found');\r\n      }\r\n      \r\n      console.log('Fetching available service requests');\r\n      console.log(`API call URL: /api/professional/available-requests`);\r\n      \r\n      // Try to get requests from the primary endpoint\r\n      let response;\r\n      try {\r\n        response = await api.get('/api/professional/available-requests', {\r\n          headers: {\r\n            'Authentication-Token': token\r\n          },\r\n          timeout: 30000\r\n        });\r\n        console.log(`Primary endpoint returned ${response.data?.length || 0} requests`);\r\n      } catch (primaryError) {\r\n        console.error('Primary endpoint failed, trying fallback:', primaryError);\r\n        // If primary endpoint fails, try the debug endpoint\r\n        response = await api.get('/api/professional/all-pending-requests', {\r\n          headers: {\r\n            'Authentication-Token': token\r\n          },\r\n          timeout: 30000\r\n        });\r\n        \r\n        // Transform the response to match expected format\r\n        if (response.data?.requests) {\r\n          console.log(`Fallback endpoint returned ${response.data.requests.length} requests`);\r\n          response.data = response.data.requests;\r\n        }\r\n      }\r\n      \r\n      // Log the full response for debugging\r\n      console.log(`Received available requests:`, response.data);\r\n      // Provide sensible defaults for missing data\r\n      if (Array.isArray(response.data)) {\r\n        return response.data.map(req => {\r\n          // Create consistent request objects\r\n          const enhancedRequest = {\r\n            ...req,\r\n            // Ensure service object exists\r\n            service: req.service || req.service_info || {\r\n              name: 'Unknown Service',\r\n              base_price: 0,\r\n              description: ''\r\n            },\r\n            // Ensure customer object exists\r\n            customer: req.customer || req.customer_info || {\r\n              customer_name: 'Customer',\r\n              phone: 'Available after accepting'\r\n            },\r\n            // Add UI flags\r\n            isNewRequest: true\r\n          };\r\n          return enhancedRequest;\r\n        });\r\n      }\r\n      \r\n      console.error('Unexpected response format for available requests:', response.data);\r\n      return [];\r\n    } catch (error) {\r\n      console.error('Error fetching available requests:', error);\r\n      // Return empty array instead of throwing to prevent dashboard from breaking\r\n      return [];\r\n    }\r\n  },\r\n  \r\n  // Add a new method to get ALL pending requests (for debugging)\r\n  async getAllPendingRequests() {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n      \r\n      console.log('Fetching ALL pending service requests (debug)');\r\n      const response = await api.get('/api/professional/all-pending-requests', {\r\n        headers: {\r\n          'Authentication-Token': token\r\n        }\r\n      });\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching all pending requests:', error);\r\n      return { total_count: 0, requests: [] };\r\n    }\r\n  },\r\n  \r\n  /* eslint-enable no-dupe-keys */\r\n\r\n  async addRejectionReason(requestId, reason) {\r\n    try {\r\n      console.log(`Adding rejection reason for request ${requestId}: ${reason}`);\r\n      \r\n      // Enhanced error handling and logging\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('Authentication required');\r\n      }\r\n      \r\n      // Make sure request has proper payload format\r\n      const payload = { reason };\r\n      \r\n      // Add explicit timeout and headers\r\n      const response = await api.post(`/api/professional/requests/${requestId}/reject-reason`, payload, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authentication-Token': token\r\n        },\r\n        timeout: 10000\r\n      });\r\n      console.log('Rejection reason added:', response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error adding rejection reason:', error);\r\n      // Provide more detailed error for debugging\r\n      if (error.response) {\r\n        console.error('Response status:', error.response.status);\r\n        console.error('Response data:', error.response.data);\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n}\r\n\r\nexport const adminAPI = {\r\n  async getUsers(role = null) {\r\n    try {\r\n      console.log('Fetching users...');\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n\r\n      const params = role ? { role } : {};\r\n      const response = await api.get('/api/admin/users', { params });\r\n      \r\n      // Ensure users have the 'name' property for display\r\n      return response.data.map(user => {\r\n        if (!user.name) {\r\n          // Set a fallback name if none is provided\r\n          user.name = user.username || `User ${user.id}`;\r\n        }\r\n        return user;\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching users:', error.response?.data || error.message);\r\n      if (error.response?.status === 401) {\r\n        console.log('Unauthorized. Please check your token.');\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async approveUser(userId) {\r\n    try {\r\n      console.log(`Approving professional with ID: ${userId}`);\r\n      const response = await api.post(`/api/admin/professionals/${userId}/approve`);\r\n      console.log('Professional approved:', response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error approving user:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async blockUser(userId, reason = 'Violation of terms of service') {\r\n    try {\r\n      console.log(`Blocking user with ID: ${userId}, reason: ${reason}`);\r\n      const response = await api.post(`/api/admin/users/${userId}/block`, { reason });\r\n      console.log('User blocked:', response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error blocking user:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async unblockUser(userId) {\r\n    try {\r\n      console.log(`Unblocking user with ID: ${userId}`);\r\n      const response = await api.post(`/api/admin/users/${userId}/unblock`);\r\n      console.log('User unblocked:', response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error unblocking user:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getServices() {\r\n    try {\r\n      console.log('Fetching services...');\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n\r\n      const response = await api.get('/api/admin/services');\r\n      console.log('Services response:', response.data); // Add debugging\r\n      \r\n      // If backend already sends camelCase fields, return directly\r\n      if (response.data && Array.isArray(response.data)) {\r\n        // Make sure each service has the expected format\r\n        return response.data.map(service => ({\r\n          id: service.id,\r\n          name: service.name,\r\n          description: service.description || '',\r\n          base_price: service.base_price || service.basePrice,\r\n          timeRequired: service.timeRequired || service.time_required,\r\n          category: service.category || 'General',\r\n          status: service.is_active !== false ? 'active' : 'inactive'\r\n        }));\r\n      }\r\n      \r\n      return [];\r\n    } catch (error) {\r\n      console.error('Error fetching services:', error.response?.data || error.message);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async createService(serviceData) {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n\r\n      const formattedData = {\r\n        name: serviceData.name,\r\n        description: serviceData.description,\r\n        base_price: Number(serviceData.base_price),\r\n        time_required: Number(serviceData.timeRequired),\r\n        category: serviceData.category || 'General'\r\n      };\r\n\r\n      const response = await api.post('/api/admin/services', formattedData, {\r\n        headers: {\r\n          'Authentication-Token': token\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating service:', error.response?.data || error);\r\n      if (error.response?.status === 400) {\r\n        throw new Error(`Validation error: ${error.response.data.message || 'Invalid data'}`);\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async update_service(serviceId, serviceData) {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n      const response = await api.put(`/api/admin/services/${serviceId}`, serviceData, {\r\n        headers: {\r\n          'Authentication-Token': token\r\n        }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error updating service:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async deleteService(service_id) {\r\n    try {\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n            throw new Error('No authentication token found');\r\n        }\r\n\r\n        const response = await api.delete(`/api/admin/services/${service_id}`, {\r\n            headers: {\r\n                'Authentication-Token': token\r\n            }\r\n        });\r\n        // return response.data;\r\n      \r\n        // Check response status\r\n        if (response.data.status === 'deactivated') {\r\n            return {\r\n                success: true,\r\n                wasDeactivated: true,\r\n                message: response.data.message\r\n            };\r\n        }\r\n        return {\r\n            success: true,\r\n            wasDeactivated: false,\r\n            message: response.data.message\r\n        };\r\n      \r\n    } catch (error) {\r\n        console.error('Error deleting service:', error);\r\n        throw new Error(error.response?.data?.message || 'Failed to delete service');\r\n    }\r\n},\r\n  \r\n  async getServiceRequests(params = {}) {\r\n    try {\r\n      console.log('Fetching service requests...');\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('No authentication token found');\r\n      }\r\n\r\n      const response = await api.get('/api/admin/requests', { params });\r\n      console.log(`Retrieved ${response.data.length} service requests`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching service requests:', error.response?.data || error.message);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // async deleteService(service_id) {\r\n  //   try {\r\n  //       const token = localStorage.getItem('token');\r\n  //       if (!token) {\r\n  //           throw new Error('Authentication required');\r\n  //       }\r\n  //       const response = await api.delete(`/api/admin/services/${service_id}`, {\r\n  //           headers: {\r\n  //               'Authentication-Token': token\r\n  //           }\r\n  //       });\r\n  //       return response.data;\r\n  //   } catch (error) {\r\n  //       console.error('Delete service error:', error.response || error);\r\n  //       throw new Error(error.response?.data?.message || 'Failed to delete service');\r\n  //   }\r\n  // }\r\n}\r\n\r\n// Export individual functions for components that import them directly\r\nexport const getServices = async () => {\r\n  return serviceAPI.getServices();\r\n};\r\n\r\nexport const getProfile = async () => {\r\n  return professionalAPI.getProfile();\r\n};\r\n\r\nexport const getAssignments = async () => {\r\n  return professionalAPI.getAssignments();\r\n};\r\n\r\nexport const getReviews = async () => {\r\n  return professionalAPI.getReviews();\r\n};\r\n\r\nexport const getAvailableRequests = async () => {\r\n  return professionalAPI.getAvailableRequests();\r\n};\r\n\r\nexport default api"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}