{"ast":null,"code":"import { ref, reactive, onMounted } from 'vue';\nimport axios from 'axios';\nimport router from '@/router';\nexport default {\n  name: 'RegisterView',\n  setup() {\n    const loading = ref(false);\n    const error = ref('');\n    const services = ref([]);\n    const formData = reactive({\n      name: '',\n      username: '',\n      email: '',\n      password: '',\n      role: '',\n      service_type: '',\n      experience: '',\n      description: '',\n      phone: '',\n      address: '',\n      pin_code: '',\n      documents: []\n    });\n    const errors = reactive({});\n    const fetchServiceTypes = async () => {\n      let retries = 3;\n      while (retries > 0) {\n        try {\n          const response = await axios.get('http://localhost:8080/api/service-types', {\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem('token')}`,\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            },\n            withCredentials: true\n          });\n          services.value = response.data;\n          break;\n        } catch (err) {\n          console.error('Error fetching services:', err);\n          error.value = 'Failed to load service types. Please refresh the page.';\n          retries--;\n          if (retries > 0) {\n            await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second before retrying\n          }\n        }\n      }\n    };\n    const handleFileUpload = event => {\n      formData.documents = Array.from(event.target.files);\n    };\n    const handleSubmit = async () => {\n      try {\n        loading.value = true;\n        error.value = '';\n\n        // Clear previous errors\n        Object.keys(errors).forEach(key => errors[key] = '');\n\n        // Basic validation\n        if (!formData.name) errors.name = 'Name is required';\n        if (!formData.username) errors.username = 'Username is required';\n        if (!formData.email) errors.email = 'Email is required';\n        if (!formData.password) errors.password = 'Password is required';\n        if (!formData.role) errors.role = 'Role is required';\n\n        // Role-specific validation\n        if (formData.role === 'professional') {\n          if (!formData.service_type) errors.service_type = 'Service type is required';\n          if (!formData.experience) errors.experience = 'Experience is required';\n        } else if (formData.role === 'customer') {\n          if (!formData.phone) errors.phone = 'Phone is required';\n          if (!formData.address) errors.address = 'Address is required';\n          if (!formData.pin_code) errors.pin_code = 'PIN code is required';\n        }\n\n        // Check if there are any errors\n        if (Object.values(errors).some(error => error)) {\n          return;\n        }\n        const formDataToSend = new FormData();\n\n        // Append all form data\n        Object.keys(formData).forEach(key => {\n          if (key === 'documents') {\n            formData.documents.forEach(file => {\n              formDataToSend.append('documents', file);\n            });\n          } else {\n            formDataToSend.append(key, formData[key]);\n          }\n        });\n        const response = await axios.post('http://localhost:8080/auth/register', formDataToSend, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n            'Accept': 'application/json'\n          },\n          withCredentials: true\n        });\n        console.log('Registration successful:', response.data);\n\n        // Show success message\n        error.value = '';\n        alert('Registration successful! Please login to continue.');\n\n        // Redirect to login page\n        router.push('/login');\n      } catch (err) {\n        console.error('Registration error:', err);\n        error.value = err.response?.data?.message || err.response?.data?.error || 'Registration failed. Please try again.';\n      } finally {\n        loading.value = false;\n      }\n    };\n    onMounted(fetchServiceTypes);\n    return {\n      formData,\n      errors,\n      loading,\n      error,\n      services,\n      handleSubmit,\n      handleFileUpload\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","axios","router","name","setup","loading","error","services","formData","username","email","password","role","service_type","experience","description","phone","address","pin_code","documents","errors","fetchServiceTypes","retries","response","get","headers","Authorization","localStorage","getItem","withCredentials","value","data","err","console","Promise","resolve","setTimeout","handleFileUpload","event","Array","from","target","files","handleSubmit","Object","keys","forEach","key","values","some","formDataToSend","FormData","file","append","post","log","alert","push","message"],"sources":["src/views/RegisterView.vue"],"sourcesContent":["<template>\r\n  <div class=\"register-container\">\r\n    <div class=\"container py-5\">\r\n      <div class=\"row justify-content-center\">\r\n        <div class=\"col-md-8 col-lg-6\">\r\n          <div class=\"card shadow\">\r\n            <div class=\"card-body p-4\">\r\n              <h2 class=\"text-center mb-4\">Register</h2>\r\n              <div v-if=\"error\" class=\"alert alert-danger\">{{ error }}</div>\r\n              \r\n              <form @submit.prevent=\"handleSubmit\" class=\"needs-validation\" novalidate>\r\n                <div class=\"mb-3\">\r\n                  <label class=\"form-label\">Full Name</label>\r\n                  <input type=\"text\" class=\"form-control\" v-model=\"formData.name\" required :class=\"{ 'is-invalid': errors.name }\">\r\n                  <div class=\"invalid-feedback\">{{ errors.name }}</div>\r\n                </div>\r\n\r\n                <div class=\"mb-3\">\r\n                  <label class=\"form-label\">Username</label>\r\n                  <input type=\"text\" class=\"form-control\" v-model=\"formData.username\" required :class=\"{ 'is-invalid': errors.username }\">\r\n                  <div class=\"invalid-feedback\">{{ errors.username }}</div>\r\n                </div>\r\n\r\n                <div class=\"mb-3\">\r\n                  <label class=\"form-label\">Email</label>\r\n                  <input type=\"email\" class=\"form-control\" v-model=\"formData.email\" required :class=\"{ 'is-invalid': errors.email }\">\r\n                  <div class=\"invalid-feedback\">{{ errors.email }}</div>\r\n                </div>\r\n\r\n                <div class=\"mb-3\">\r\n                  <label class=\"form-label\">Password</label>\r\n                  <input type=\"password\" class=\"form-control\" v-model=\"formData.password\" required :class=\"{ 'is-invalid': errors.password }\">\r\n                  <div class=\"invalid-feedback\">{{ errors.password }}</div>\r\n                </div>\r\n                \r\n                <div class=\"mb-4\">\r\n                  <label class=\"form-label\">Register as:</label>\r\n                  <div class=\"d-flex gap-4\">\r\n                    <div class=\"form-check\">\r\n                      <input class=\"form-check-input\" type=\"radio\" v-model=\"formData.role\" value=\"customer\" id=\"roleCustomer\">\r\n                      <label class=\"form-check-label\" for=\"roleCustomer\">Customer</label>\r\n                    </div>\r\n                    <div class=\"form-check\">\r\n                      <input class=\"form-check-input\" type=\"radio\" v-model=\"formData.role\" value=\"professional\" id=\"roleProfessional\">\r\n                      <label class=\"form-check-label\" for=\"roleProfessional\">Service Professional</label>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div v-if=\"formData.role === 'professional'\">\r\n                  <div class=\"mb-3\">\r\n                    <label class=\"form-label\">Service Type</label>\r\n                    <select class=\"form-select\" v-model=\"formData.service_type\" required>\r\n                      <option value=\"\">Select a service type</option>\r\n                      <option v-for=\"service in services\" :key=\"service\" :value=\"service\">{{ service }}</option>\r\n                    </select>\r\n                  </div>\r\n\r\n                  <div class=\"mb-3\">\r\n                    <label class=\"form-label\">Experience (years)</label>\r\n                    <input type=\"number\" class=\"form-control\" v-model=\"formData.experience\" min=\"0\" required>\r\n                  </div>\r\n\r\n                  <div class=\"mb-3\">\r\n                    <label class=\"form-label\">Description</label>\r\n                    <textarea class=\"form-control\" v-model=\"formData.description\" rows=\"3\"></textarea>\r\n                  </div>\r\n\r\n                  <div class=\"mb-3\">\r\n                    <label class=\"form-label\">Upload Documents</label>\r\n                    <input type=\"file\" multiple class=\"form-control\" @change=\"handleFileUpload\">\r\n                  </div>\r\n                </div>\r\n                \r\n                <div v-if=\"formData.role === 'customer'\">\r\n                  <div class=\"mb-3\">\r\n                    <label class=\"form-label\">Phone</label>\r\n                    <input type=\"tel\" class=\"form-control\" v-model=\"formData.phone\" required>\r\n                  </div>\r\n\r\n                  <div class=\"mb-3\">\r\n                    <label class=\"form-label\">Address</label>\r\n                    <textarea class=\"form-control\" v-model=\"formData.address\" required></textarea>\r\n                  </div>\r\n\r\n                  <div class=\"mb-3\">\r\n                    <label class=\"form-label\">PIN Code</label>\r\n                    <input type=\"text\" class=\"form-control\" v-model=\"formData.pin_code\" required pattern=\"[0-9]{6}\">\r\n                  </div>\r\n                </div>\r\n                \r\n                <div class=\"d-grid gap-2\">\r\n                  <button type=\"submit\" class=\"btn btn-primary\" :disabled=\"loading\">{{ loading ? 'Registering...' : 'Register' }}</button>\r\n                </div>\r\n                \r\n                <p class=\"text-center mt-3\">\r\n                  Already have an account? <router-link to=\"/login\">Login here</router-link>\r\n                </p>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, reactive, onMounted } from 'vue';\r\nimport axios from 'axios';\r\nimport router from '@/router';\r\n\r\nexport default {\r\n  name: 'RegisterView',\r\n  setup() {\r\n    const loading = ref(false);\r\n    const error = ref('');\r\n    const services = ref([]);\r\n    \r\n    const formData = reactive({\r\n      name: '', username: '', email: '', password: '', role: '', service_type: '',\r\n      experience: '', description: '', phone: '', address: '', pin_code: '',\r\n      documents: []\r\n    });\r\n    \r\n    const errors = reactive({});\r\n    \r\n    const fetchServiceTypes = async () => {\r\n      let retries = 3;\r\n      while (retries > 0) {\r\n        try {\r\n          const response = await axios.get('http://localhost:8080/api/service-types', {\r\n            headers: {\r\n              Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n              'Accept': 'application/json',\r\n              'Content-Type': 'application/json'\r\n            },\r\n            withCredentials: true\r\n          });\r\n          services.value = response.data;\r\n          break;\r\n        } catch (err) {\r\n          console.error('Error fetching services:', err);\r\n          error.value = 'Failed to load service types. Please refresh the page.';\r\n          retries--;\r\n          if (retries > 0) {\r\n            await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second before retrying\r\n          }\r\n        }\r\n      }\r\n    };\r\n    \r\n    const handleFileUpload = (event) => {\r\n      formData.documents = Array.from(event.target.files);\r\n    };\r\n    \r\n    const handleSubmit = async () => {\r\n      try {\r\n        loading.value = true;\r\n        error.value = '';\r\n        \r\n        // Clear previous errors\r\n        Object.keys(errors).forEach(key => errors[key] = '');\r\n        \r\n        // Basic validation\r\n        if (!formData.name) errors.name = 'Name is required';\r\n        if (!formData.username) errors.username = 'Username is required';\r\n        if (!formData.email) errors.email = 'Email is required';\r\n        if (!formData.password) errors.password = 'Password is required';\r\n        if (!formData.role) errors.role = 'Role is required';\r\n        \r\n        // Role-specific validation\r\n        if (formData.role === 'professional') {\r\n          if (!formData.service_type) errors.service_type = 'Service type is required';\r\n          if (!formData.experience) errors.experience = 'Experience is required';\r\n        } else if (formData.role === 'customer') {\r\n          if (!formData.phone) errors.phone = 'Phone is required';\r\n          if (!formData.address) errors.address = 'Address is required';\r\n          if (!formData.pin_code) errors.pin_code = 'PIN code is required';\r\n        }\r\n        \r\n        // Check if there are any errors\r\n        if (Object.values(errors).some(error => error)) {\r\n          return;\r\n        }\r\n        \r\n        const formDataToSend = new FormData();\r\n        \r\n        // Append all form data\r\n        Object.keys(formData).forEach(key => {\r\n          if (key === 'documents') {\r\n            formData.documents.forEach(file => {\r\n              formDataToSend.append('documents', file);\r\n            });\r\n          } else {\r\n            formDataToSend.append(key, formData[key]);\r\n          }\r\n        });\r\n        \r\n        const response = await axios.post('http://localhost:8080/auth/register', \r\n          formDataToSend,\r\n          {\r\n            headers: {\r\n              'Content-Type': 'multipart/form-data',\r\n              'Accept': 'application/json'\r\n            },\r\n            withCredentials: true\r\n          }\r\n        );\r\n        \r\n        console.log('Registration successful:', response.data);\r\n        \r\n        // Show success message\r\n        error.value = '';\r\n        alert('Registration successful! Please login to continue.');\r\n        \r\n        // Redirect to login page\r\n        router.push('/login');\r\n      } catch (err) {\r\n        console.error('Registration error:', err);\r\n        error.value = err.response?.data?.message || err.response?.data?.error || 'Registration failed. Please try again.';\r\n      } finally {\r\n        loading.value = false;\r\n      }\r\n    };\r\n    \r\n    onMounted(fetchServiceTypes);\r\n    \r\n    return { formData, errors, loading, error, services, handleSubmit, handleFileUpload };\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.register-container { background-color: #f8f9fa; min-height: 100vh; padding-top: 2rem; }\r\n.card { border-radius: 15px; box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15); }\r\n.btn-primary { padding: 0.75rem; font-weight: 500; }\r\n.invalid-feedback { font-size: 0.875rem; }\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}