{"ast":null,"code":"import { ref, onMounted, computed } from 'vue';\nimport { Modal } from 'bootstrap';\nimport Chart from 'chart.js/auto';\nimport { adminAPI, serviceAPI } from '@/services/api'; // Add serviceAPI import here\n\nexport default {\n  name: 'AdminDashboard',\n  setup() {\n    // State\n    const stats = ref({\n      totalUsers: 0,\n      activeServices: 0,\n      pendingApprovals: 0,\n      blockedUsers: 0\n    });\n    const users = ref([]);\n    const services = ref([]);\n    const currentTab = ref('users');\n    const userSearch = ref('');\n    const serviceSearch = ref('');\n    const userTypeFilter = ref('');\n    const serviceForm = ref({\n      name: '',\n      description: '',\n      basePrice: '',\n      timeRequired: ''\n    });\n    const editingService = ref(null);\n    const selectedUser = ref(null);\n    const requestsChart = ref(null);\n    const usersChart = ref(null);\n    const loading = ref(false);\n    const error = ref(null);\n\n    // Tabs configuration\n    const tabs = [{\n      id: 'users',\n      name: 'Users Management',\n      icon: 'fas fa-users'\n    }, {\n      id: 'services',\n      name: 'Services',\n      icon: 'fas fa-tools'\n    }, {\n      id: 'analytics',\n      name: 'Analytics',\n      icon: 'fas fa-chart-bar'\n    }];\n\n    // Computed properties\n    const pendingApprovals = computed(() => users.value.filter(user => user.role === 'professional' && !user.is_approved));\n    const filteredUsers = computed(() => {\n      return users.value.filter(user => {\n        const matchesSearch = (user.name || '').toLowerCase().includes(userSearch.value.toLowerCase()) || (user.email || '').toLowerCase().includes(userSearch.value.toLowerCase());\n        if (userTypeFilter.value === 'pending') {\n          return matchesSearch && user.role === 'professional' && !user.is_approved;\n        } else {\n          const matchesType = !userTypeFilter.value || user.role === userTypeFilter.value;\n          return matchesSearch && matchesType;\n        }\n      });\n    });\n    const filteredServices = computed(() => {\n      return services.value.filter(service => service.name.toLowerCase().includes(serviceSearch.value.toLowerCase()));\n    });\n\n    // Methods\n    const loadDashboardData = async () => {\n      loading.value = true;\n      error.value = null;\n      try {\n        console.log('Loading dashboard data...');\n        // Debug token information\n        const token = localStorage.getItem('token');\n        if (!token) {\n          throw new Error('No authentication token found. Please login again.');\n        }\n        console.log(`Token exists: ${token.substring(0, 10)}...`);\n\n        // Try to load services first since that seems to be the issue\n        try {\n          console.log('AdminDashboard: Attempting to load services...');\n          const servicesData = await serviceAPI.getServices({}, true); // Force refresh\n          console.log(`AdminDashboard: Successfully loaded ${servicesData.length} services`);\n          services.value = servicesData.map(service => ({\n            id: service.id,\n            name: service.name,\n            description: service.description || '',\n            basePrice: service.base_price,\n            timeRequired: service.time_required,\n            category: service.category || 'General',\n            status: service.is_active !== false ? 'active' : 'inactive'\n          }));\n        } catch (servicesError) {\n          console.error('AdminDashboard: Error loading services:', servicesError);\n          error.value = `Failed to load services: ${servicesError.message}`;\n          services.value = [];\n        }\n\n        // Load users data first - if this fails, we know authentication is an issue\n        const usersData = await adminAPI.getUsers();\n        console.log(`Loaded ${usersData.length} users successfully`);\n        users.value = usersData;\n        try {\n          // Now try to load services\n          const servicesData = await adminAPI.getServices();\n          console.log(`Loaded ${servicesData.length} services successfully`);\n          services.value = servicesData;\n        } catch (servicesError) {\n          console.error('Error loading services:', servicesError);\n          // Don't fail completely, just show users without services\n          services.value = [];\n        }\n\n        // Update dashboard stats\n        updateStats();\n        loading.value = false;\n      } catch (err) {\n        console.error('Error loading dashboard data:', err);\n        error.value = err.message || 'Failed to load dashboard data. Please try again.';\n        loading.value = false;\n      }\n    };\n    const updateStats = () => {\n      stats.value = {\n        totalUsers: users.value.length,\n        activeServices: services.value.filter(s => s.is_active !== false).length,\n        pendingApprovals: pendingApprovals.value.length,\n        blockedUsers: users.value.filter(u => u.is_blocked).length\n      };\n    };\n    const showNewServiceModal = () => {\n      editingService.value = null;\n      serviceForm.value = {\n        name: '',\n        description: '',\n        basePrice: '',\n        timeRequired: ''\n      };\n      new Modal(document.getElementById('serviceModal')).show();\n    };\n    const editService = service => {\n      editingService.value = service;\n      serviceForm.value = {\n        ...service\n      };\n      new Modal(document.getElementById('serviceModal')).show();\n    };\n    const saveService = async () => {\n      try {\n        if (editingService.value) {\n          await adminAPI.updateService(editingService.value.id, serviceForm.value);\n        } else {\n          await adminAPI.createService(serviceForm.value);\n        }\n        await loadDashboardData();\n        new Modal(document.getElementById('serviceModal')).hide();\n      } catch (error) {\n        console.error('Error saving service:', error);\n      }\n    };\n    const deleteService = async serviceId => {\n      if (confirm('Are you sure you want to delete this service?')) {\n        try {\n          await adminAPI.deleteService(serviceId);\n          await loadDashboardData();\n        } catch (error) {\n          console.error('Error deleting service:', error);\n        }\n      }\n    };\n    const approveUser = async userId => {\n      try {\n        if (confirm('Are you sure you want to approve this professional?')) {\n          await adminAPI.approveUser(userId);\n          alert('Professional approved successfully');\n          await loadDashboardData();\n        }\n      } catch (error) {\n        console.error('Error approving user:', error);\n        alert('Failed to approve professional: ' + (error.message || 'Unknown error'));\n      }\n    };\n    const toggleUserBlock = async user => {\n      try {\n        if (user.is_blocked) {\n          // Unblock user\n          if (confirm('Are you sure you want to unblock this user?')) {\n            await adminAPI.unblockUser(user.id);\n            alert('User unblocked successfully');\n          }\n        } else {\n          // Block user with reason\n          const reason = prompt('Please enter a reason for blocking this user:', 'Violation of terms of service');\n          if (reason) {\n            await adminAPI.blockUser(user.id, reason);\n            alert('User blocked successfully');\n          }\n        }\n        await loadDashboardData();\n      } catch (error) {\n        console.error('Error toggling user block status:', error);\n        alert('Operation failed: ' + error.message);\n      }\n    };\n    const viewUserDetails = user => {\n      selectedUser.value = user;\n      new Modal(document.getElementById('userDetailsModal')).show();\n    };\n    const initCharts = () => {\n      // Requests Chart\n      const requestsCtx = document.querySelector('#requestsChart');\n      if (requestsCtx) {\n        requestsChart.value = new Chart(requestsCtx, {\n          type: 'bar',\n          data: {\n            labels: ['Pending', 'In Progress', 'Completed', 'Cancelled'],\n            datasets: [{\n              label: 'Service Requests',\n              data: [12, 19, 3, 5],\n              backgroundColor: ['rgba(255, 206, 86, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(255, 99, 132, 0.2)'],\n              borderColor: ['rgba(255, 206, 86, 1)', 'rgba(54, 162, 235, 1)', 'rgba(75, 192, 192, 1)', 'rgba(255, 99, 132, 1)'],\n              borderWidth: 1\n            }]\n          }\n        });\n      }\n\n      // Users Chart\n      const usersCtx = document.querySelector('#usersChart');\n      if (usersCtx) {\n        usersChart.value = new Chart(usersCtx, {\n          type: 'line',\n          data: {\n            labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\n            datasets: [{\n              label: 'New Users',\n              data: [65, 59, 80, 81, 56, 55],\n              fill: false,\n              borderColor: 'rgb(75, 192, 192)',\n              tension: 0.1\n            }]\n          }\n        });\n      }\n    };\n    const refreshUsers = async () => {\n      loading.value = true;\n      error.value = null;\n      try {\n        const userData = await adminAPI.getUsers();\n        users.value = userData;\n        updateStats();\n      } catch (error) {\n        console.error('Error refreshing users:', error);\n        error.value = error.message || 'Failed to refresh users';\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // Lifecycle hooks\n    onMounted(() => {\n      console.log('AdminDashboard mounted - loading data...');\n      loadDashboardData();\n      // Initialize charts after a delay to ensure DOM is ready\n      setTimeout(() => {\n        initCharts();\n      }, 1000);\n    });\n    return {\n      stats,\n      users,\n      services,\n      currentTab,\n      tabs,\n      userSearch,\n      serviceSearch,\n      userTypeFilter,\n      serviceForm,\n      editingService,\n      selectedUser,\n      filteredUsers,\n      filteredServices,\n      pendingApprovals,\n      loading,\n      error,\n      showNewServiceModal,\n      editService,\n      saveService,\n      deleteService,\n      approveUser,\n      toggleUserBlock,\n      viewUserDetails,\n      refreshUsers,\n      loadDashboardData\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","Modal","Chart","adminAPI","serviceAPI","name","setup","stats","totalUsers","activeServices","pendingApprovals","blockedUsers","users","services","currentTab","userSearch","serviceSearch","userTypeFilter","serviceForm","description","basePrice","timeRequired","editingService","selectedUser","requestsChart","usersChart","loading","error","tabs","id","icon","value","filter","user","role","is_approved","filteredUsers","matchesSearch","toLowerCase","includes","email","matchesType","filteredServices","service","loadDashboardData","console","log","token","localStorage","getItem","Error","substring","servicesData","getServices","length","map","base_price","time_required","category","status","is_active","servicesError","message","usersData","getUsers","updateStats","err","s","u","is_blocked","showNewServiceModal","document","getElementById","show","editService","saveService","updateService","createService","hide","deleteService","serviceId","confirm","approveUser","userId","alert","toggleUserBlock","unblockUser","reason","prompt","blockUser","viewUserDetails","initCharts","requestsCtx","querySelector","type","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","usersCtx","fill","tension","refreshUsers","userData","setTimeout"],"sources":["src/views/AdminDashboard.vue"],"sourcesContent":["<template>\r\n  <div class=\"admin-dashboard\">\r\n    <!-- Top Stats Cards -->\r\n    <div class=\"container-fluid py-4\">\r\n      <!-- Loading State -->\r\n      <div v-if=\"loading\" class=\"text-center my-5\">\r\n        <div class=\"spinner-border text-primary\" role=\"status\">\r\n          <span class=\"visually-hidden\">Loading...</span>\r\n        </div>\r\n        <p class=\"mt-2\">Loading dashboard data...</p>\r\n      </div>\r\n\r\n      <!-- Error State -->\r\n      <div v-else-if=\"error\" class=\"alert alert-danger\">\r\n        <i class=\"fas fa-exclamation-triangle me-2\"></i>\r\n        {{ error }}\r\n        <button class=\"btn btn-outline-danger btn-sm ms-3\" @click=\"loadDashboardData\">\r\n          <i class=\"fas fa-sync-alt\"></i> Retry\r\n        </button>\r\n      </div>\r\n\r\n      <div v-else>\r\n        <div class=\"row g-4 mb-4\">\r\n          <div class=\"col-xl-3 col-sm-6\">\r\n            <div class=\"card bg-primary text-white\">\r\n              <div class=\"card-body\">\r\n                <div class=\"d-flex justify-content-between align-items-center\">\r\n                  <div>\r\n                    <h6 class=\"card-title mb-0\">Total Users</h6>\r\n                    <h2 class=\"mt-2 mb-0\">{{ stats.totalUsers }}</h2>\r\n                  </div>\r\n                  <div class=\"icon-shape bg-white text-primary rounded-circle\">\r\n                    <i class=\"fas fa-users fa-2x\"></i>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-xl-3 col-sm-6\">\r\n            <div class=\"card bg-success text-white\">\r\n              <div class=\"card-body\">\r\n                <div class=\"d-flex justify-content-between align-items-center\">\r\n                  <div>\r\n                    <h6 class=\"card-title mb-0\">Active Services</h6>\r\n                    <h2 class=\"mt-2 mb-0\">{{ stats.activeServices }}</h2>\r\n                  </div>\r\n                  <div class=\"icon-shape bg-white text-success rounded-circle\">\r\n                    <i class=\"fas fa-tools fa-2x\"></i>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-xl-3 col-sm-6\">\r\n            <div class=\"card bg-warning text-white\">\r\n              <div class=\"card-body\">\r\n                <div class=\"d-flex justify-content-between align-items-center\">\r\n                  <div>\r\n                    <h6 class=\"card-title mb-0\">Pending Approvals</h6>\r\n                    <h2 class=\"mt-2 mb-0\">{{ stats.pendingApprovals }}</h2>\r\n                  </div>\r\n                  <div class=\"icon-shape bg-white text-warning rounded-circle\">\r\n                    <i class=\"fas fa-clock fa-2x\"></i>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-xl-3 col-sm-6\">\r\n            <div class=\"card bg-danger text-white\">\r\n              <div class=\"card-body\">\r\n                <div class=\"d-flex justify-content-between align-items-center\">\r\n                  <div>\r\n                    <h6 class=\"card-title mb-0\">Blocked Users</h6>\r\n                    <h2 class=\"mt-2 mb-0\">{{ stats.blockedUsers }}</h2>\r\n                  </div>\r\n                  <div class=\"icon-shape bg-white text-danger rounded-circle\">\r\n                    <i class=\"fas fa-ban fa-2x\"></i>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Main Content Tabs -->\r\n        <div class=\"card\">\r\n          <div class=\"card-header\">\r\n            <ul class=\"nav nav-tabs card-header-tabs\">\r\n              <li class=\"nav-item\" v-for=\"tab in tabs\" :key=\"tab.id\">\r\n                <a class=\"nav-link\" :class=\"{ active: currentTab === tab.id }\" \r\n                   @click=\"currentTab = tab.id\" href=\"#\">\r\n                  <i :class=\"tab.icon\"></i> {{ tab.name }}\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <!-- Users Management Tab -->\r\n            <div v-if=\"currentTab === 'users'\" class=\"users-management\">\r\n              <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n                <div class=\"d-flex gap-2\">\r\n                  <input id=\"userSearchInput\" name=\"userSearch\" v-model=\"userSearch\" type=\"text\" class=\"form-control\" \r\n                         placeholder=\"Search users...\">\r\n                  <select id=\"userTypeFilter\" name=\"userTypeFilter\" v-model=\"userTypeFilter\" class=\"form-select\">\r\n                    <option value=\"\">All Users</option>\r\n                    <option value=\"professional\">Professionals</option>\r\n                    <option value=\"customer\">Customers</option>\r\n                    <option value=\"pending\">Pending Approval</option>\r\n                  </select>\r\n                </div>\r\n                <div class=\"d-flex gap-2\">\r\n                  <button class=\"btn btn-outline-primary\" @click=\"refreshUsers\">\r\n                    <i class=\"fas fa-sync-alt\"></i> Refresh\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              <div v-if=\"pendingApprovals.length > 0\" class=\"alert alert-warning mb-4\">\r\n                <i class=\"fas fa-exclamation-triangle me-2\"></i>\r\n                <strong>{{ pendingApprovals.length }} professional{{ pendingApprovals.length > 1 ? 's' : '' }}</strong> pending approval\r\n              </div>\r\n\r\n              <div class=\"table-responsive\">\r\n                <table class=\"table table-hover\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>ID</th>\r\n                      <th>Name</th>\r\n                      <th>Email</th>\r\n                      <th>Role</th>\r\n                      <th>Status</th>\r\n                      <th>Actions</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <tr v-for=\"user in filteredUsers\" :key=\"user.id\" \r\n                        :class=\"{'table-warning': user.role === 'professional' && !user.is_approved}\">\r\n                      <td>{{ user.id }}</td>\r\n                      <td>{{ user.name }}</td>\r\n                      <td>{{ user.email }}</td>\r\n                      <td>\r\n                        <span class=\"badge\" \r\n                              :class=\"user.role === 'professional' ? 'bg-info' : 'bg-secondary'\">\r\n                          {{ user.role }}\r\n                        </span>\r\n                      </td>\r\n                      <td>\r\n                        <span v-if=\"user.role === 'professional' && !user.is_approved\" \r\n                              class=\"badge bg-warning\">Pending Approval</span>\r\n                        <span v-else class=\"badge\" \r\n                              :class=\"user.is_blocked ? 'bg-danger' : 'bg-success'\">\r\n                          {{ user.is_blocked ? 'Blocked' : 'Active' }}\r\n                        </span>\r\n                      </td>\r\n                      <td>\r\n                        <div class=\"btn-group\">\r\n                          <button v-if=\"user.role === 'professional' && !user.is_approved\"\r\n                                  class=\"btn btn-sm btn-success\" \r\n                                  @click=\"approveUser(user.id)\">\r\n                            <i class=\"fas fa-check\"></i> Approve\r\n                          </button>\r\n                          <button class=\"btn btn-sm\" \r\n                                  :class=\"user.is_blocked ? 'btn-success' : 'btn-danger'\"\r\n                                  @click=\"toggleUserBlock(user)\">\r\n                            <i class=\"fas\" :class=\"user.is_blocked ? 'fa-unlock' : 'fa-ban'\"></i>\r\n                            {{ user.is_blocked ? 'Unblock' : 'Block' }}\r\n                          </button>\r\n                          <button class=\"btn btn-sm btn-info\" @click=\"viewUserDetails(user)\">\r\n                            <i class=\"fas fa-eye\"></i> View\r\n                          </button>\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Services Management Tab -->\r\n            <div v-if=\"currentTab === 'services'\" class=\"services-management\">\r\n              <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n                <div class=\"d-flex gap-2\">\r\n                  <input id=\"serviceSearchInput\" name=\"serviceSearch\" v-model=\"serviceSearch\" type=\"text\" class=\"form-control\" \r\n                         placeholder=\"Search services...\">\r\n                </div>\r\n                <button class=\"btn btn-primary\" @click=\"showNewServiceModal\">\r\n                  <i class=\"fas fa-plus\"></i> New Service\r\n                </button>\r\n              </div>\r\n\r\n              <div class=\"table-responsive\">\r\n                <table class=\"table table-hover\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>ID</th>\r\n                      <th>Name</th>\r\n                      <th>Base Price</th>\r\n                      <th>Time Required</th>\r\n                      <th>Status</th>\r\n                      <th>Actions</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <tr v-for=\"service in filteredServices\" :key=\"service.id\">\r\n                      <td>{{ service.id }}</td>\r\n                      <td>{{ service.name }}</td>\r\n                      <td>₹{{ service.basePrice }}</td>\r\n                      <td>{{ service.timeRequired }}</td>\r\n                      <td>\r\n                        <span class=\"badge\" \r\n                              :class=\"service.status === 'active' ? 'bg-success' : 'bg-danger'\">\r\n                          {{ service.status }}\r\n                        </span>\r\n                      </td>\r\n                      <td>\r\n                        <div class=\"btn-group\">\r\n                          <button class=\"btn btn-sm btn-warning\" @click=\"editService(service)\">\r\n                            <i class=\"fas fa-edit\"></i> Edit\r\n                          </button>\r\n                          <button class=\"btn btn-sm btn-danger\" @click=\"deleteService(service.id)\">\r\n                            <i class=\"fas fa-trash\"></i> Delete\r\n                          </button>\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Analytics Tab -->\r\n            <div v-if=\"currentTab === 'analytics'\" class=\"analytics\">\r\n              <div class=\"row\">\r\n                <div class=\"col-md-6\">\r\n                  <div class=\"card\">\r\n                    <div class=\"card-body\">\r\n                      <h5 class=\"card-title\">Service Requests by Status</h5>\r\n                      <canvas ref=\"requestsChart\"></canvas>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-6\">\r\n                  <div class=\"card\">\r\n                    <div class=\"card-body\">\r\n                      <h5 class=\"card-title\">User Registration Trend</h5>\r\n                      <canvas ref=\"usersChart\"></canvas>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- New/Edit Service Modal -->\r\n    <div class=\"modal fade\" id=\"serviceModal\" tabindex=\"-1\">\r\n      <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\">{{ editingService ? 'Edit' : 'New' }} Service</h5>\r\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            <form @submit.prevent=\"saveService\">\r\n              <div class=\"mb-3\">\r\n                <label for=\"serviceName\" class=\"form-label\">Service Name</label>\r\n                <input id=\"serviceName\" name=\"serviceName\" v-model=\"serviceForm.name\" type=\"text\" class=\"form-control\" required>\r\n              </div>\r\n              <div class=\"mb-3\">\r\n                <label for=\"serviceDescription\" class=\"form-label\">Description</label>\r\n                <textarea id=\"serviceDescription\" name=\"serviceDescription\" v-model=\"serviceForm.description\" class=\"form-control\" rows=\"3\" required></textarea>\r\n              </div>\r\n              <div class=\"mb-3\">\r\n                <label for=\"serviceBasePrice\" class=\"form-label\">Base Price (₹)</label>\r\n                <input id=\"serviceBasePrice\" name=\"serviceBasePrice\" v-model=\"serviceForm.basePrice\" type=\"number\" class=\"form-control\" required>\r\n              </div>\r\n              <div class=\"mb-3\">\r\n                <label for=\"serviceTimeRequired\" class=\"form-label\">Time Required (hours)</label>\r\n                <input id=\"serviceTimeRequired\" name=\"serviceTimeRequired\" v-model=\"serviceForm.timeRequired\" type=\"number\" class=\"form-control\" required>\r\n              </div>\r\n              <div class=\"text-end\">\r\n                <button type=\"button\" class=\"btn btn-secondary me-2\" data-bs-dismiss=\"modal\">Cancel</button>\r\n                <button type=\"submit\" class=\"btn btn-primary\">Save</button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- User Details Modal -->\r\n    <div class=\"modal fade\" id=\"userDetailsModal\" tabindex=\"-1\">\r\n      <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\">User Details</h5>\r\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\r\n          </div>\r\n          <div class=\"modal-body\" v-if=\"selectedUser\">\r\n            <div class=\"row\">\r\n              <div class=\"col-md-6\">\r\n                <h6>Basic Information</h6>\r\n                <table class=\"table\">\r\n                  <tr>\r\n                    <th>Name:</th>\r\n                    <td>{{ selectedUser.name }}</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <th>Email:</th>\r\n                    <td>{{ selectedUser.email }}</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <th>Role:</th>\r\n                    <td>{{ selectedUser.role }}</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <th>Status:</th>\r\n                    <td>{{ selectedUser.status }}</td>\r\n                  </tr>\r\n                </table>\r\n              </div>\r\n              <div class=\"col-md-6\" v-if=\"selectedUser.role === 'professional'\">\r\n                <h6>Professional Details</h6>\r\n                <table class=\"table\">\r\n                  <tr>\r\n                    <th>Service Type:</th>\r\n                    <td>{{ selectedUser.serviceType }}</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <th>Experience:</th>\r\n                    <td>{{ selectedUser.experience }} years</td>\r\n                  </tr>\r\n                  <tr>\r\n                    <th>Rating:</th>\r\n                    <td>\r\n                      <div class=\"stars\">\r\n                        <i v-for=\"n in 5\" :key=\"n\"\r\n                           class=\"fas fa-star\"\r\n                           :class=\"n <= selectedUser.rating ? 'text-warning' : 'text-muted'\"></i>\r\n                        ({{ selectedUser.rating }}/5)\r\n                      </div>\r\n                    </td>\r\n                  </tr>\r\n                </table>\r\n              </div>\r\n            </div>\r\n            <div class=\"mt-4\" v-if=\"selectedUser.role === 'professional'\">\r\n              <h6>Recent Reviews</h6>\r\n              <div class=\"reviews-list\">\r\n                <div v-for=\"review in selectedUser.reviews\" :key=\"review.id\" class=\"review-item\">\r\n                  <div class=\"stars mb-1\">\r\n                    <i v-for=\"n in 5\" :key=\"n\"\r\n                       class=\"fas fa-star\"\r\n                       :class=\"n <= review.rating ? 'text-warning' : 'text-muted'\"></i>\r\n                  </div>\r\n                  <p class=\"mb-1\">{{ review.comment }}</p>\r\n                  <small class=\"text-muted\">{{ review.date }}</small>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted, computed } from 'vue'\r\nimport { Modal } from 'bootstrap'\r\nimport Chart from 'chart.js/auto'\r\nimport { adminAPI, serviceAPI } from '@/services/api'  // Add serviceAPI import here\r\n\r\nexport default {\r\n  name: 'AdminDashboard',\r\n  setup() {\r\n    // State\r\n    const stats = ref({\r\n      totalUsers: 0,\r\n      activeServices: 0,\r\n      pendingApprovals: 0,\r\n      blockedUsers: 0\r\n    })\r\n    const users = ref([])\r\n    const services = ref([])\r\n    const currentTab = ref('users')\r\n    const userSearch = ref('')\r\n    const serviceSearch = ref('')\r\n    const userTypeFilter = ref('')\r\n    const serviceForm = ref({\r\n      name: '',\r\n      description: '',\r\n      basePrice: '',\r\n      timeRequired: ''\r\n    })\r\n    const editingService = ref(null)\r\n    const selectedUser = ref(null)\r\n    const requestsChart = ref(null)\r\n    const usersChart = ref(null)\r\n    const loading = ref(false)\r\n    const error = ref(null)\r\n\r\n    // Tabs configuration\r\n    const tabs = [\r\n      { id: 'users', name: 'Users Management', icon: 'fas fa-users' },\r\n      { id: 'services', name: 'Services', icon: 'fas fa-tools' },\r\n      { id: 'analytics', name: 'Analytics', icon: 'fas fa-chart-bar' }\r\n    ]\r\n\r\n    // Computed properties\r\n    const pendingApprovals = computed(() => \r\n      users.value.filter(user => user.role === 'professional' && !user.is_approved)\r\n    );\r\n\r\n    const filteredUsers = computed(() => {\r\n      return users.value.filter(user => {\r\n        const matchesSearch = (user.name || '').toLowerCase().includes(userSearch.value.toLowerCase()) ||\r\n                             (user.email || '').toLowerCase().includes(userSearch.value.toLowerCase());\r\n        \r\n        if (userTypeFilter.value === 'pending') {\r\n          return matchesSearch && user.role === 'professional' && !user.is_approved;\r\n        } else {\r\n          const matchesType = !userTypeFilter.value || user.role === userTypeFilter.value;\r\n          return matchesSearch && matchesType;\r\n        }\r\n      });\r\n    });\r\n\r\n    const filteredServices = computed(() => {\r\n      return services.value.filter(service =>\r\n        service.name.toLowerCase().includes(serviceSearch.value.toLowerCase())\r\n      )\r\n    })\r\n\r\n    // Methods\r\n    const loadDashboardData = async () => {\r\n      loading.value = true;\r\n      error.value = null;\r\n      try {\r\n        console.log('Loading dashboard data...');\r\n        // Debug token information\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n          throw new Error('No authentication token found. Please login again.');\r\n        }\r\n        console.log(`Token exists: ${token.substring(0, 10)}...`);\r\n        \r\n        // Try to load services first since that seems to be the issue\r\n        try {\r\n          console.log('AdminDashboard: Attempting to load services...');\r\n          const servicesData = await serviceAPI.getServices({}, true); // Force refresh\r\n          console.log(`AdminDashboard: Successfully loaded ${servicesData.length} services`);\r\n          services.value = servicesData.map(service => ({\r\n            id: service.id,\r\n            name: service.name,\r\n            description: service.description || '',\r\n            basePrice: service.base_price,\r\n            timeRequired: service.time_required,\r\n            category: service.category || 'General',\r\n            status: service.is_active !== false ? 'active' : 'inactive'\r\n          }));\r\n        } catch (servicesError) {\r\n          console.error('AdminDashboard: Error loading services:', servicesError);\r\n          error.value = `Failed to load services: ${servicesError.message}`;\r\n          services.value = [];\r\n        }\r\n\r\n        // Load users data first - if this fails, we know authentication is an issue\r\n        const usersData = await adminAPI.getUsers();\r\n        console.log(`Loaded ${usersData.length} users successfully`);\r\n        users.value = usersData;\r\n\r\n        try {\r\n          // Now try to load services\r\n          const servicesData = await adminAPI.getServices();\r\n          console.log(`Loaded ${servicesData.length} services successfully`);\r\n          services.value = servicesData;\r\n        } catch (servicesError) {\r\n          console.error('Error loading services:', servicesError);\r\n          // Don't fail completely, just show users without services\r\n          services.value = [];\r\n        }\r\n\r\n        // Update dashboard stats\r\n        updateStats();\r\n        loading.value = false;\r\n      } catch (err) {\r\n        console.error('Error loading dashboard data:', err);\r\n        error.value = err.message || 'Failed to load dashboard data. Please try again.';\r\n        loading.value = false;\r\n      }\r\n    };\r\n\r\n    const updateStats = () => {\r\n      stats.value = {\r\n        totalUsers: users.value.length,\r\n        activeServices: services.value.filter(s => s.is_active !== false).length,\r\n        pendingApprovals: pendingApprovals.value.length,\r\n        blockedUsers: users.value.filter(u => u.is_blocked).length\r\n      }\r\n    }\r\n\r\n    const showNewServiceModal = () => {\r\n      editingService.value = null\r\n      serviceForm.value = {\r\n        name: '',\r\n        description: '',\r\n        basePrice: '',\r\n        timeRequired: ''\r\n      }\r\n      new Modal(document.getElementById('serviceModal')).show()\r\n    }\r\n\r\n    const editService = (service) => {\r\n      editingService.value = service\r\n      serviceForm.value = { ...service }\r\n      new Modal(document.getElementById('serviceModal')).show()\r\n    }\r\n\r\n    const saveService = async () => {\r\n      try {\r\n        if (editingService.value) {\r\n          await adminAPI.updateService(editingService.value.id, serviceForm.value)\r\n        } else {\r\n          await adminAPI.createService(serviceForm.value)\r\n        }\r\n        await loadDashboardData()\r\n        new Modal(document.getElementById('serviceModal')).hide()\r\n      } catch (error) {\r\n        console.error('Error saving service:', error)\r\n      }\r\n    }\r\n\r\n    const deleteService = async (serviceId) => {\r\n      if (confirm('Are you sure you want to delete this service?')) {\r\n        try {\r\n          await adminAPI.deleteService(serviceId)\r\n          await loadDashboardData()\r\n        } catch (error) {\r\n          console.error('Error deleting service:', error)\r\n        }\r\n      }\r\n    }\r\n\r\n    const approveUser = async (userId) => {\r\n      try {\r\n        if (confirm('Are you sure you want to approve this professional?')) {\r\n          await adminAPI.approveUser(userId);\r\n          alert('Professional approved successfully');\r\n          await loadDashboardData();\r\n        }\r\n      } catch (error) {\r\n        console.error('Error approving user:', error);\r\n        alert('Failed to approve professional: ' + (error.message || 'Unknown error'));\r\n      }\r\n    };\r\n\r\n    const toggleUserBlock = async (user) => {\r\n      try {\r\n        if (user.is_blocked) {\r\n          // Unblock user\r\n          if (confirm('Are you sure you want to unblock this user?')) {\r\n            await adminAPI.unblockUser(user.id);\r\n            alert('User unblocked successfully');\r\n          }\r\n        } else {\r\n          // Block user with reason\r\n          const reason = prompt('Please enter a reason for blocking this user:', 'Violation of terms of service');\r\n          if (reason) {\r\n            await adminAPI.blockUser(user.id, reason);\r\n            alert('User blocked successfully');\r\n          }\r\n        }\r\n        await loadDashboardData();\r\n      } catch (error) {\r\n        console.error('Error toggling user block status:', error);\r\n        alert('Operation failed: ' + error.message);\r\n      }\r\n    };\r\n\r\n    const viewUserDetails = (user) => {\r\n      selectedUser.value = user\r\n      new Modal(document.getElementById('userDetailsModal')).show()\r\n    }\r\n\r\n    const initCharts = () => {\r\n      // Requests Chart\r\n      const requestsCtx = document.querySelector('#requestsChart')\r\n      if (requestsCtx) {\r\n        requestsChart.value = new Chart(requestsCtx, {\r\n          type: 'bar',\r\n          data: {\r\n            labels: ['Pending', 'In Progress', 'Completed', 'Cancelled'],\r\n            datasets: [{\r\n              label: 'Service Requests',\r\n              data: [12, 19, 3, 5],\r\n              backgroundColor: [\r\n                'rgba(255, 206, 86, 0.2)',\r\n                'rgba(54, 162, 235, 0.2)',\r\n                'rgba(75, 192, 192, 0.2)',\r\n                'rgba(255, 99, 132, 0.2)'\r\n              ],\r\n              borderColor: [\r\n                'rgba(255, 206, 86, 1)',\r\n                'rgba(54, 162, 235, 1)',\r\n                'rgba(75, 192, 192, 1)',\r\n                'rgba(255, 99, 132, 1)'\r\n              ],\r\n              borderWidth: 1\r\n            }]\r\n          }\r\n        })\r\n      }\r\n\r\n      // Users Chart\r\n      const usersCtx = document.querySelector('#usersChart')\r\n      if (usersCtx) {\r\n        usersChart.value = new Chart(usersCtx, {\r\n          type: 'line',\r\n          data: {\r\n            labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\r\n            datasets: [{\r\n              label: 'New Users',\r\n              data: [65, 59, 80, 81, 56, 55],\r\n              fill: false,\r\n              borderColor: 'rgb(75, 192, 192)',\r\n              tension: 0.1\r\n            }]\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n    const refreshUsers = async () => {\r\n      loading.value = true;\r\n      error.value = null;\r\n      try {\r\n        const userData = await adminAPI.getUsers();\r\n        users.value = userData;\r\n        updateStats();\r\n      } catch (error) {\r\n        console.error('Error refreshing users:', error);\r\n        error.value = error.message || 'Failed to refresh users';\r\n      } finally {\r\n        loading.value = false;\r\n      }\r\n    };\r\n\r\n    // Lifecycle hooks\r\n    onMounted(() => {\r\n      console.log('AdminDashboard mounted - loading data...');\r\n      loadDashboardData();\r\n      // Initialize charts after a delay to ensure DOM is ready\r\n      setTimeout(() => {\r\n        initCharts();\r\n      }, 1000);\r\n    });\r\n\r\n    return {\r\n      stats,\r\n      users,\r\n      services,\r\n      currentTab,\r\n      tabs,\r\n      userSearch,\r\n      serviceSearch,\r\n      userTypeFilter,\r\n      serviceForm,\r\n      editingService,\r\n      selectedUser,\r\n      filteredUsers,\r\n      filteredServices,\r\n      pendingApprovals,\r\n      loading,\r\n      error,\r\n      showNewServiceModal,\r\n      editService,\r\n      saveService,\r\n      deleteService,\r\n      approveUser,\r\n      toggleUserBlock,\r\n      viewUserDetails,\r\n      refreshUsers,\r\n      loadDashboardData\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.admin-dashboard {\r\n  background-color: #f8f9fa;\r\n  min-height: 100vh;\r\n}\r\n\r\n.icon-shape {\r\n  width: 48px;\r\n  height: 48px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.card {\r\n  border: none;\r\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.nav-tabs .nav-link {\r\n  cursor: pointer;\r\n}\r\n\r\n.table th {\r\n  font-weight: 600;\r\n  background-color: #f8f9fa;\r\n}\r\n\r\n.reviews-list {\r\n  max-height: 300px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.review-item {\r\n  padding: 1rem;\r\n  border-bottom: 1px solid #dee2e6;\r\n}\r\n\r\n.review-item:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.stars {\r\n  color: #ffc107;\r\n}\r\n\r\n.btn-group {\r\n  gap: 0.25rem;\r\n}\r\n\r\n.modal-body {\r\n  max-height: 80vh;\r\n  overflow-y: auto;\r\n}\r\n\r\n.table-warning {\r\n  background-color: rgba(255, 193, 7, 0.1);\r\n}\r\n\r\n.alert-warning {\r\n  border-left: 4px solid #ffc107;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}