{"ast":null,"code":"import { customerAPI, serviceAPI } from '@/services/api';\nimport ServiceSearchPanel from '@/components/ServiceSearchPanel.vue';\nimport ServiceList from '@/components/ServiceList.vue';\nimport ServiceReviewForm from '@/components/ServiceReviewForm.vue';\nimport ServiceRequestDetail from '@/components/ServiceRequestDetail.vue';\nexport default {\n  name: 'CustomerDashboard',\n  components: {\n    ServiceSearchPanel,\n    ServiceList,\n    ServiceReviewForm,\n    ServiceRequestDetail\n  },\n  data() {\n    return {\n      userName: JSON.parse(localStorage.getItem('user'))?.name || 'Customer',\n      activeSection: 'browse',\n      // 'browse' or 'requests'\n      activeTab: 'active',\n      // For requests: 'active' or 'completed'\n      searchQuery: {\n        name: '',\n        pinCode: '',\n        category: ''\n      },\n      services: [],\n      categories: ['AC Repair', 'Plumbing', 'Electrical', 'Carpentry', 'Painting', 'Cleaning', 'Pest Control', 'Appliance Repair', 'Moving Services', 'Gardening'],\n      serviceRequests: [],\n      showNewRequestModal: false,\n      showReviewModal: false,\n      showServiceModal: false,\n      showRequestDetailsModal: false,\n      isLoading: false,\n      loading: false,\n      // General loading state\n      newRequest: {\n        service_id: '',\n        pin_code: '',\n        special_instructions: '',\n        category: ''\n      },\n      review: {\n        rating: 0,\n        remarks: ''\n      },\n      selectedRequest: null,\n      selectedService: null,\n      error: null,\n      hasMoreServices: false,\n      page: 1,\n      limit: 9,\n      isEditingRequest: false,\n      editedRequest: {\n        id: null,\n        pin_code: '',\n        special_instructions: ''\n      }\n    };\n  },\n  computed: {\n    filteredRequests() {\n      return this.serviceRequests.filter(request => {\n        if (this.activeTab === 'active') {\n          return ['pending', 'assigned', 'in_progress'].includes(request.status);\n        } else {\n          return ['completed', 'closed'].includes(request.status);\n        }\n      });\n    },\n    filteredServices() {\n      if (!this.services.length) return [];\n      return this.services.filter(service => {\n        // Filter by name\n        if (this.searchQuery.name && !service.name.toLowerCase().includes(this.searchQuery.name.toLowerCase())) {\n          return false;\n        }\n\n        // Filter by category\n        if (this.searchQuery.category && service.category !== this.searchQuery.category) {\n          return false;\n        }\n\n        // Filter by PIN code if implemented\n        if (this.searchQuery.pinCode && service.available_pin_codes) {\n          if (!service.available_pin_codes.includes(this.searchQuery.pinCode)) {\n            return false;\n          }\n        }\n        return true;\n      });\n    }\n  },\n  methods: {\n    async fetchServices() {\n      try {\n        this.loading = true;\n        console.log('CustomerDashboard: Fetching services...');\n        const response = await serviceAPI.getServices();\n        console.log(`CustomerDashboard: Received ${response.length} services`);\n        this.services = response;\n        this.loading = false;\n      } catch (error) {\n        console.error('CustomerDashboard: Error fetching services:', error);\n        this.error = 'Failed to load services. Please try again.';\n        this.loading = false;\n\n        // Retry after a delay in case of network issues\n        setTimeout(() => {\n          if (this.services.length === 0) {\n            console.log('Retrying service fetch...');\n            this.fetchServices();\n          }\n        }, 3000);\n      }\n    },\n    async fetchServiceTypes() {\n      // We're using hardcoded categories now - no need to fetch from API\n      console.log('Using hardcoded service categories:', this.categories);\n    },\n    async fetchRequests() {\n      try {\n        this.loading = true;\n        const response = await customerAPI.getRequests();\n        this.serviceRequests = response;\n        this.loading = false;\n      } catch (error) {\n        console.error('Error fetching requests:', error);\n        this.error = 'Failed to load service requests. Please try again.';\n        this.loading = false;\n      }\n    },\n    async searchServices() {\n      // You can implement additional search logic here if needed\n      // For now, we'll just use the computed filteredServices property\n    },\n    async createRequest() {\n      this.isLoading = true;\n      try {\n        // Validate that we have either service_id or category\n        if (!this.newRequest.service_id && !this.newRequest.category) {\n          throw new Error(\"Please select a service category\");\n        }\n\n        // Ensure pin_code is valid\n        if (!this.newRequest.pin_code || !/^\\d{6}$/.test(this.newRequest.pin_code)) {\n          throw new Error(\"Please enter a valid 6-digit PIN code\");\n        }\n        console.log('Submitting request with data:', this.newRequest);\n        try {\n          const response = await customerAPI.createRequest(this.newRequest);\n          this.showNewRequestModal = false;\n          this.newRequest = {\n            service_id: '',\n            pin_code: '',\n            special_instructions: '',\n            category: ''\n          };\n          this.activeSection = 'requests'; // Switch to requests tab\n          await this.fetchRequests();\n          alert('Service request created successfully!');\n        } catch (apiError) {\n          // Show more friendly error message with details from the backend\n          if (apiError.message.includes('No service found in category')) {\n            throw new Error(`We currently don't have service professionals for ${this.newRequest.category}. Please try a different category.`);\n          } else {\n            throw apiError;\n          }\n        }\n      } catch (error) {\n        console.error('Error creating request:', error);\n        alert('Failed to create service request: ' + (error.message || 'Unknown error'));\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    async closeRequest(request, fromModal = false) {\n      if (confirm('Are you sure you want to cancel this request?')) {\n        try {\n          this.isLoading = true;\n          await customerAPI.closeRequest(request.id);\n          await this.fetchRequests();\n          if (fromModal) {\n            this.showRequestDetailsModal = false;\n          }\n          alert('Request cancelled successfully.');\n        } catch (error) {\n          console.error('Error closing request:', error);\n          alert('Failed to cancel request: ' + (error.message || 'Unknown error'));\n        } finally {\n          this.isLoading = false;\n        }\n      }\n    },\n    editRequest(request) {\n      // Implement edit functionality (e.g., populate form with current values)\n      this.newRequest = {\n        service_id: request.service_id,\n        pin_code: request.pin_code,\n        special_instructions: request.special_instructions || '',\n        category: request.category || ''\n      };\n      this.showNewRequestModal = true;\n    },\n    addReview(request) {\n      this.selectedRequest = request;\n      this.review = {\n        rating: 0,\n        remarks: ''\n      };\n      this.showReviewModal = true;\n      if (this.showRequestDetailsModal) {\n        this.showRequestDetailsModal = false;\n      }\n    },\n    async submitReview() {\n      try {\n        this.isLoading = true;\n        await customerAPI.addReview(this.selectedRequest.id, this.review);\n        this.showReviewModal = false;\n        this.review = {\n          rating: 0,\n          remarks: ''\n        };\n        await this.fetchRequests();\n        alert('Review submitted successfully.');\n      } catch (error) {\n        console.error('Error submitting review:', error);\n        alert('Failed to submit review: ' + (error.message || 'Unknown error'));\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    selectService(service) {\n      this.selectedService = service;\n      this.showServiceModal = true;\n    },\n    requestSelectedService() {\n      this.newRequest.service_id = this.selectedService.id;\n      this.showServiceModal = false;\n      this.showNewRequestModal = true;\n    },\n    viewRequestDetails(request) {\n      this.selectedRequest = request;\n      this.showRequestDetailsModal = true;\n    },\n    formatDate(dateString) {\n      if (!dateString) return 'N/A';\n      const date = new Date(dateString);\n      return date.toLocaleString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    },\n    getStatusBadgeClass(status) {\n      const classes = {\n        pending: 'badge bg-warning',\n        assigned: 'badge bg-info',\n        in_progress: 'badge bg-primary',\n        completed: 'badge bg-success',\n        closed: 'badge bg-secondary',\n        cancelled: 'badge bg-danger'\n      };\n      return classes[status] || 'badge bg-secondary';\n    },\n    // Enhanced search method using the new search panel\n    handleSearch(params) {\n      this.searchQuery = {\n        ...params\n      };\n      this.page = 1;\n      this.fetchServices();\n    },\n    // Method to directly request a service from the service list\n    directRequestService(service) {\n      this.selectedService = service;\n      this.showNewRequestModal = true;\n\n      // Pre-populate the request form with the selected service\n      this.newRequest.service_id = service.id;\n    },\n    // Load more services for pagination\n    loadMoreServices() {\n      this.page += 1;\n      this.fetchMoreServices();\n    },\n    // Fetch additional services for pagination\n    // async fetchMoreServices() {\n    //   try {\n    //     const response = await serviceAPI.getServices({\n    //       ...this.searchQuery,\n    //       page: this.page,\n    //       limit: this.limit\n    //     });\n\n    //     if (response.length > 0) {\n    //       this.services = [...this.services, ...response];\n    //       this.hasMoreServices = response.length === this.limit;\n    //     } else {\n    //       this.hasMoreServices = false;\n    //     }\n    //   } catch (error) {\n    //     console.error('Error fetching more services:', error);\n    //   }\n    // },\n\n    // Handle review submission\n    handleReviewSubmitted() {\n      this.showReviewModal = false;\n      this.fetchRequests();\n      alert('Thank you for your review!');\n    },\n    // Handle request updated\n    handleRequestUpdated() {\n      this.fetchRequests();\n    },\n    // Enhanced edit methods\n    startEdit() {\n      this.isEditingRequest = true;\n      this.editedRequest = {\n        id: this.selectedRequest.id,\n        pin_code: this.selectedRequest.pin_code,\n        special_instructions: this.selectedRequest.special_instructions || ''\n      };\n    },\n    cancelEdit() {\n      this.isEditingRequest = false;\n    },\n    async updateRequest() {\n      try {\n        this.isLoading = true;\n        if (!this.editedRequest.pin_code || !/^\\d{6}$/.test(this.editedRequest.pin_code)) {\n          throw new Error(\"Please enter a valid 6-digit PIN code\");\n        }\n        await customerAPI.updateRequest(this.editedRequest.id, {\n          pin_code: this.editedRequest.pin_code,\n          special_instructions: this.editedRequest.special_instructions\n        });\n\n        // Update the selected request with the new values\n        this.selectedRequest.pin_code = this.editedRequest.pin_code;\n        this.selectedRequest.special_instructions = this.editedRequest.special_instructions;\n\n        // Refresh the requests list\n        await this.fetchRequests();\n        this.isEditingRequest = false;\n        alert('Request updated successfully!');\n      } catch (error) {\n        console.error('Error updating request:', error);\n        alert('Failed to update request: ' + (error.message || 'Unknown error'));\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    // Enhanced search functionality\n    handleSearch(params) {\n      console.log('Search params:', params);\n      this.searchQuery = {\n        ...params\n      };\n\n      // Update the page state\n      this.page = 1;\n\n      // If we have a PIN code, filter by location\n      if (params.pinCode) {\n        console.log(`Filtering services by PIN code: ${params.pinCode}`);\n      }\n\n      // If we have a category selected, filter by that\n      if (params.category) {\n        console.log(`Filtering services by category: ${params.category}`);\n      }\n\n      // If we have a name/keyword, filter by that\n      if (params.name) {\n        console.log(`Filtering services by name: ${params.name}`);\n      }\n\n      // Use advanced filters if provided\n      if (params.priceMin || params.priceMax) {\n        console.log(`Filtering by price range: ${params.priceMin || 0} - ${params.priceMax || 'max'}`);\n      }\n\n      // Apply sorting if specified\n      if (params.sortBy) {\n        console.log(`Sorting results by: ${params.sortBy}`);\n      }\n\n      // Fetch filtered services - if your API supports filtering\n      // this.fetchFilteredServices(params);\n\n      // For now, we'll use the computed filteredServices property with local data\n    }\n  },\n  async created() {\n    await Promise.all([this.fetchServices(),\n    // fetchServiceTypes will just use the hardcoded categories now\n    this.fetchServiceTypes(), this.fetchRequests()]);\n  }\n};","map":{"version":3,"names":["customerAPI","serviceAPI","ServiceSearchPanel","ServiceList","ServiceReviewForm","ServiceRequestDetail","name","components","data","userName","JSON","parse","localStorage","getItem","activeSection","activeTab","searchQuery","pinCode","category","services","categories","serviceRequests","showNewRequestModal","showReviewModal","showServiceModal","showRequestDetailsModal","isLoading","loading","newRequest","service_id","pin_code","special_instructions","review","rating","remarks","selectedRequest","selectedService","error","hasMoreServices","page","limit","isEditingRequest","editedRequest","id","computed","filteredRequests","filter","request","includes","status","filteredServices","length","service","toLowerCase","available_pin_codes","methods","fetchServices","console","log","response","getServices","setTimeout","fetchServiceTypes","fetchRequests","getRequests","searchServices","createRequest","Error","test","alert","apiError","message","closeRequest","fromModal","confirm","editRequest","addReview","submitReview","selectService","requestSelectedService","viewRequestDetails","formatDate","dateString","date","Date","toLocaleString","year","month","day","hour","minute","getStatusBadgeClass","classes","pending","assigned","in_progress","completed","closed","cancelled","handleSearch","params","directRequestService","loadMoreServices","fetchMoreServices","handleReviewSubmitted","handleRequestUpdated","startEdit","cancelEdit","updateRequest","priceMin","priceMax","sortBy","created","Promise","all"],"sources":["src/views/CustomerDashboard.vue"],"sourcesContent":["<template>\r\n  <div class=\"customer-dashboard\">\r\n    <div class=\"container py-4\">\r\n      <!-- Welcome Section -->\r\n      <div class=\"row mb-4\">\r\n        <div class=\"col-md-8\">\r\n          <h2>Welcome, {{ userName }}!</h2>\r\n          <p class=\"text-muted\">Find services and manage your requests</p>\r\n        </div>\r\n        <div class=\"col-md-4 text-md-end\">\r\n          <button class=\"btn btn-primary\" @click=\"showNewRequestModal = true\">\r\n            <i class=\"fas fa-plus me-2\"></i>New Service Request\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Main Navigation Tabs -->\r\n      <ul class=\"nav nav-pills mb-4\">\r\n        <li class=\"nav-item\">\r\n          <a class=\"nav-link\" :class=\"{ active: activeSection === 'browse' }\" \r\n             @click.prevent=\"activeSection = 'browse'\" href=\"#\">\r\n            <i class=\"fas fa-search me-1\"></i> Browse Services\r\n          </a>\r\n        </li>\r\n        <li class=\"nav-item\">\r\n          <a class=\"nav-link\" :class=\"{ active: activeSection === 'requests' }\" \r\n             @click.prevent=\"activeSection = 'requests'\" href=\"#\">\r\n            <i class=\"fas fa-list-alt me-1\"></i> My Requests\r\n          </a>\r\n        </li>\r\n      </ul>\r\n\r\n      <!-- Browse Services Section -->\r\n      <div v-if=\"activeSection === 'browse'\">\r\n        <!-- Enhanced Service Search using the new component -->\r\n        <ServiceSearchPanel \r\n          :initialParams=\"searchQuery\" \r\n          :categories=\"categories\"\r\n          @search=\"handleSearch\"\r\n        />\r\n\r\n        <!-- Service List using the new component -->\r\n        <ServiceList\r\n          :services=\"filteredServices\"\r\n          :loading=\"loading\"\r\n          :hasMore=\"hasMoreServices\"\r\n          @view-details=\"selectService\"\r\n          @request-service=\"directRequestService\"\r\n          @load-more=\"loadMoreServices\"\r\n        />\r\n      </div>\r\n\r\n      <!-- My Requests Section -->\r\n      <div v-if=\"activeSection === 'requests'\">\r\n        <!-- Service Requests Tabs -->\r\n        <ul class=\"nav nav-tabs mb-4\">\r\n          <li class=\"nav-item\">\r\n            <a \r\n              class=\"nav-link\" \r\n              :class=\"{ active: activeTab === 'active' }\"\r\n              @click.prevent=\"activeTab = 'active'\"\r\n              href=\"#\"\r\n            >\r\n              Active Requests\r\n            </a>\r\n          </li>\r\n          <li class=\"nav-item\">\r\n            <a \r\n              class=\"nav-link\" \r\n              :class=\"{ active: activeTab === 'completed' }\"\r\n              @click.prevent=\"activeTab = 'completed'\"\r\n              href=\"#\"\r\n            >\r\n              Completed\r\n            </a>\r\n          </li>\r\n        </ul>\r\n\r\n        <!-- Service Requests List -->\r\n        <div v-if=\"loading\" class=\"text-center py-5\">\r\n          <div class=\"spinner-border text-primary\" role=\"status\">\r\n            <span class=\"visually-hidden\">Loading...</span>\r\n          </div>\r\n          <p class=\"mt-2\">Loading your requests...</p>\r\n        </div>\r\n        \r\n        <div v-else-if=\"filteredRequests.length === 0\" class=\"text-center py-5\">\r\n          <i class=\"fas fa-inbox fa-3x text-muted mb-3\"></i>\r\n          <h5>No service requests found</h5>\r\n          <p class=\"text-muted\">{{ activeTab === 'active' ? 'Create a new request to get started!' : 'No completed requests yet.' }}</p>\r\n        </div>\r\n        \r\n        <div v-else class=\"row g-4\">\r\n          <div v-for=\"request in filteredRequests\" :key=\"request.id\" class=\"col-md-6\">\r\n            <div class=\"card h-100 shadow-sm\">\r\n              <div class=\"card-body\">\r\n                <div class=\"d-flex justify-content-between align-items-start mb-3\">\r\n                  <h5 class=\"card-title mb-0\">{{ request.service.name }}</h5>\r\n                  <span :class=\"getStatusBadgeClass(request.status)\">\r\n                    {{ request.status }}\r\n                  </span>\r\n                </div>\r\n                \r\n                <div class=\"mb-3\">\r\n                  <small class=\"text-muted\">\r\n                    <i class=\"fas fa-calendar me-2\"></i>\r\n                    Requested: {{ formatDate(request.created_at) }}\r\n                  </small>\r\n                  <br v-if=\"request.completed_at\">\r\n                  <small v-if=\"request.completed_at\" class=\"text-muted\">\r\n                    <i class=\"fas fa-check-circle me-2\"></i>\r\n                    Completed: {{ formatDate(request.completed_at) }}\r\n                  </small>\r\n                </div>\r\n\r\n                <div v-if=\"request.professional\" class=\"mb-3\">\r\n                  <strong>Professional:</strong>\r\n                  <span>{{ request.professional.professional_name }}</span>\r\n                </div>\r\n\r\n                <p class=\"card-text\">{{ request.special_instructions || 'No special instructions' }}</p>\r\n\r\n                <!-- Action Buttons -->\r\n                <div class=\"d-flex justify-content-end gap-2\">\r\n                  <button\r\n                    v-if=\"request.status === 'pending' || request.status === 'assigned'\"\r\n                    class=\"btn btn-outline-danger btn-sm\"\r\n                    @click=\"closeRequest(request)\"\r\n                  >\r\n                    <i class=\"fas fa-times me-1\"></i>\r\n                    Cancel\r\n                  </button>\r\n                  <button\r\n                    v-if=\"request.status === 'pending'\"\r\n                    class=\"btn btn-outline-primary btn-sm\"\r\n                    @click=\"editRequest(request)\"\r\n                  >\r\n                    <i class=\"fas fa-edit me-1\"></i>\r\n                    Edit\r\n                  </button>\r\n                  <button\r\n                    v-if=\"request.status === 'completed' && !request.has_review\"\r\n                    class=\"btn btn-outline-success btn-sm\"\r\n                    @click=\"addReview(request)\"\r\n                  >\r\n                    <i class=\"fas fa-star me-1\"></i>\r\n                    Review\r\n                  </button>\r\n                  <button\r\n                    class=\"btn btn-outline-secondary btn-sm\"\r\n                    @click=\"viewRequestDetails(request)\"\r\n                  >\r\n                    <i class=\"fas fa-eye me-1\"></i>\r\n                    Details\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Service Details Modal -->\r\n    <div class=\"modal fade\" :class=\"{ show: showServiceModal }\" v-if=\"showServiceModal\">\r\n      <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\">Service Details</h5>\r\n            <button type=\"button\" class=\"btn-close\" @click=\"showServiceModal = false\"></button>\r\n          </div>\r\n          <div class=\"modal-body\" v-if=\"selectedService\">\r\n            <div class=\"service-details\">\r\n              <h4>{{ selectedService.name }}</h4>\r\n              <div class=\"d-flex justify-content-between mb-3\">\r\n                <span class=\"badge bg-primary fs-5\">₹{{ selectedService.base_price }}</span>\r\n                <span class=\"text-muted\"><i class=\"far fa-clock me-2\"></i>{{ selectedService.time_required }} minutes</span>\r\n              </div>\r\n              <p>{{ selectedService.description }}</p>\r\n              <div class=\"mb-3\">\r\n                <strong>Category:</strong> {{ selectedService.category }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" @click=\"showServiceModal = false\">Close</button>\r\n            <button type=\"button\" class=\"btn btn-primary\" @click=\"requestSelectedService\">\r\n              <i class=\"fas fa-plus me-1\"></i> Request Service\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- New Service Request Modal -->\r\n    <div class=\"modal fade\" :class=\"{ show: showNewRequestModal }\" v-if=\"showNewRequestModal\">\r\n      <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\">New Service Request</h5>\r\n            <button type=\"button\" class=\"btn-close\" @click=\"showNewRequestModal = false\"></button>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            <form @submit.prevent=\"createRequest\">\r\n              <!-- <div class=\"mb-3\">\r\n                <label for=\"serviceType\" class=\"form-label\">Service Type</label>\r\n                <select id=\"serviceType\" name=\"serviceType\" class=\"form-select\" v-model=\"newRequest.service_id\" required>\r\n                  <option value=\"\">Select a service</option>\r\n                  <option v-for=\"service in services\" :key=\"service.id\" :value=\"service.id\">\r\n                    {{ service.name }} - ₹{{ service.base_price }}\r\n                  </option>\r\n                </select>\r\n              </div> -->\r\n\r\n              <div class=\"mb-3\">\r\n                <label for=\"serviceCategory\" class=\"form-label\">Service Category</label>\r\n                <select id=\"serviceCategory\" name=\"serviceCategory\" class=\"form-select\" v-model=\"newRequest.category\">\r\n                  <option value=\"\">Select Category</option>\r\n                  <option v-for=\"category in categories\" :key=\"category\" :value=\"category\">\r\n                    {{ category }}\r\n                  </option>\r\n                </select>\r\n              </div>\r\n\r\n              <div class=\"mb-3\">\r\n                <label for=\"pinCode\" class=\"form-label\">PIN Code</label>\r\n                <input\r\n                  id=\"pinCode\"\r\n                  name=\"pinCode\"\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  v-model=\"newRequest.pin_code\"\r\n                  required\r\n                  pattern=\"[0-9]{6}\"\r\n                  placeholder=\"Enter 6-digit PIN code\"\r\n                >\r\n              </div>\r\n\r\n              <div class=\"mb-3\">\r\n                <label for=\"specialInstructions\" class=\"form-label\">Special Instructions</label>\r\n                <textarea\r\n                  id=\"specialInstructions\"\r\n                  name=\"specialInstructions\"\r\n                  class=\"form-control\"\r\n                  v-model=\"newRequest.special_instructions\"\r\n                  rows=\"3\"\r\n                  placeholder=\"Any specific requirements or details...\"\r\n                ></textarea>\r\n              </div>\r\n              \r\n              <div class=\"text-end\">\r\n                <button type=\"button\" class=\"btn btn-secondary me-2\" @click=\"showNewRequestModal = false\">\r\n                  Cancel\r\n                </button>\r\n                <button type=\"submit\" class=\"btn btn-primary\" :disabled=\"isLoading\">\r\n                  <span v-if=\"isLoading\" class=\"spinner-border spinner-border-sm me-2\"></span>\r\n                  Create Request\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Enhanced Review Modal -->\r\n    <div class=\"modal fade\" :class=\"{ show: showReviewModal }\" v-if=\"showReviewModal\">\r\n      <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n          <ServiceReviewForm\r\n            :requestId=\"selectedRequest?.id\"\r\n            :serviceName=\"selectedRequest?.service?.name\"\r\n            :serviceDate=\"selectedRequest?.completed_at\"\r\n            :professionalName=\"selectedRequest?.professional?.professional_name\"\r\n            @close=\"showReviewModal = false\"\r\n            @submitted=\"handleReviewSubmitted\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Enhanced Request Details Modal -->\r\n    <div class=\"modal fade\" :class=\"{ show: showRequestDetailsModal }\" v-if=\"showRequestDetailsModal\">\r\n      <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n          <ServiceRequestDetail\r\n            :request=\"selectedRequest\"\r\n            @close=\"showRequestDetailsModal = false\"\r\n            @updated=\"handleRequestUpdated\"\r\n            @review=\"addReview\"\r\n            @cancel=\"closeRequest\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Enhanced Request Details Modal - Add Edit Options -->\r\n    <div class=\"modal fade\" :class=\"{ show: showRequestDetailsModal }\" v-if=\"showRequestDetailsModal\">\r\n      <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\">Request Details</h5>\r\n            <button type=\"button\" class=\"btn-close\" @click=\"showRequestDetailsModal = false\"></button>\r\n          </div>\r\n          <div class=\"modal-body\" v-if=\"selectedRequest\">\r\n            <div v-if=\"isEditingRequest\">\r\n              <!-- Edit Request Form -->\r\n              <form @submit.prevent=\"updateRequest\">\r\n                <div class=\"mb-3\">\r\n                  <label class=\"form-label\">PIN Code</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    class=\"form-control\"\r\n                    v-model=\"editedRequest.pin_code\"\r\n                    pattern=\"[0-9]{6}\"\r\n                    required\r\n                  >\r\n                </div>\r\n                <div class=\"mb-3\">\r\n                  <label class=\"form-label\">Special Instructions</label>\r\n                  <textarea \r\n                    class=\"form-control\"\r\n                    rows=\"3\"\r\n                    v-model=\"editedRequest.special_instructions\"\r\n                  ></textarea>\r\n                </div>\r\n                <div class=\"d-flex justify-content-end gap-2\">\r\n                  <button type=\"button\" class=\"btn btn-secondary\" @click=\"cancelEdit\">\r\n                    Cancel\r\n                  </button>\r\n                  <button type=\"submit\" class=\"btn btn-primary\" :disabled=\"isLoading\">\r\n                    <span v-if=\"isLoading\" class=\"spinner-border spinner-border-sm me-1\"></span>\r\n                    Save Changes\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n            <div v-else>\r\n              <!-- Request Details View -->\r\n              <div class=\"row mb-4\">\r\n                <div class=\"col-md-6\">\r\n                  <h5>{{ selectedRequest.service?.name }}</h5>\r\n                  <div :class=\"getStatusBadgeClass(selectedRequest.status)\" class=\"mb-2\">\r\n                    {{ selectedRequest.status }}\r\n                  </div>\r\n                  <p class=\"text-muted\">\r\n                    <i class=\"fas fa-map-marker-alt me-2\"></i>\r\n                    PIN Code: {{ selectedRequest.pin_code }}\r\n                  </p>\r\n                </div>\r\n                <div class=\"col-md-6 text-md-end\">\r\n                  <p class=\"mb-1\"><strong>Requested:</strong> {{ formatDate(selectedRequest.created_at) }}</p>\r\n                  <p v-if=\"selectedRequest.accepted_at\" class=\"mb-1\">\r\n                    <strong>Accepted:</strong> {{ formatDate(selectedRequest.accepted_at) }}\r\n                  </p>\r\n                  <p v-if=\"selectedRequest.completed_at\" class=\"mb-1\">\r\n                    <strong>Completed:</strong> {{ formatDate(selectedRequest.completed_at) }}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"mb-4\">\r\n                <h6>Special Instructions</h6>\r\n                <p class=\"p-3 bg-light rounded\">{{ selectedRequest.special_instructions || 'No special instructions provided.' }}</p>\r\n              </div>\r\n\r\n              <div v-if=\"selectedRequest.professional\" class=\"mb-4\">\r\n                <h6>Professional</h6>\r\n                <div class=\"card\">\r\n                  <div class=\"card-body\">\r\n                    <h5 class=\"card-title\">{{ selectedRequest.professional.professional_name }}</h5>\r\n                    <p class=\"text-muted\">{{ selectedRequest.professional.experience }} years experience</p>\r\n                    <p class=\"mb-0\">Specializes in {{ selectedRequest.professional.service_type }}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              \r\n              <div class=\"d-flex justify-content-end gap-2\">\r\n                <button \r\n                  v-if=\"selectedRequest.status === 'pending'\"\r\n                  class=\"btn btn-primary\" \r\n                  @click=\"startEdit\">\r\n                  <i class=\"fas fa-edit me-1\"></i> Edit Request\r\n                </button>\r\n                <button \r\n                  v-if=\"selectedRequest.status === 'pending' || selectedRequest.status === 'assigned'\"\r\n                  class=\"btn btn-danger\" \r\n                  @click=\"closeRequest(selectedRequest, true)\">\r\n                  <i class=\"fas fa-times me-1\"></i> Cancel Request\r\n                </button>\r\n                <button \r\n                  v-if=\"selectedRequest.status === 'completed' && !selectedRequest.has_review\"\r\n                  class=\"btn btn-success\" \r\n                  @click=\"addReview(selectedRequest)\">\r\n                  <i class=\"fas fa-star me-1\"></i> Review\r\n                </button>\r\n                <button \r\n                  class=\"btn btn-secondary\" \r\n                  @click=\"showRequestDetailsModal = false\">\r\n                  Close\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { customerAPI, serviceAPI } from '@/services/api'\r\nimport ServiceSearchPanel from '@/components/ServiceSearchPanel.vue'\r\nimport ServiceList from '@/components/ServiceList.vue'\r\nimport ServiceReviewForm from '@/components/ServiceReviewForm.vue'\r\nimport ServiceRequestDetail from '@/components/ServiceRequestDetail.vue'\r\n\r\nexport default {\r\n  name: 'CustomerDashboard',\r\n  components: {\r\n    ServiceSearchPanel,\r\n    ServiceList,\r\n    ServiceReviewForm,\r\n    ServiceRequestDetail\r\n  },\r\n  data() {\r\n    return {\r\n      userName: JSON.parse(localStorage.getItem('user'))?.name || 'Customer',\r\n      activeSection: 'browse', // 'browse' or 'requests'\r\n      activeTab: 'active', // For requests: 'active' or 'completed'\r\n      searchQuery: {\r\n        name: '',\r\n        pinCode: '',\r\n        category: ''\r\n      },\r\n      services: [],\r\n      categories: [\r\n        'AC Repair',\r\n        'Plumbing',\r\n        'Electrical',\r\n        'Carpentry',\r\n        'Painting',\r\n        'Cleaning',\r\n        'Pest Control',\r\n        'Appliance Repair',\r\n        'Moving Services',\r\n        'Gardening'\r\n      ],\r\n      serviceRequests: [],\r\n      showNewRequestModal: false,\r\n      showReviewModal: false,\r\n      showServiceModal: false,\r\n      showRequestDetailsModal: false,\r\n      isLoading: false,\r\n      loading: false, // General loading state\r\n      newRequest: {\r\n        service_id: '',\r\n        pin_code: '',\r\n        special_instructions: '',\r\n        category: ''\r\n      },\r\n      review: {\r\n        rating: 0,\r\n        remarks: ''\r\n      },\r\n      selectedRequest: null,\r\n      selectedService: null,\r\n      error: null,\r\n      hasMoreServices: false,\r\n      page: 1,\r\n      limit: 9,\r\n      isEditingRequest: false,\r\n      editedRequest: {\r\n        id: null,\r\n        pin_code: '',\r\n        special_instructions: ''\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    filteredRequests() {\r\n      return this.serviceRequests.filter(request => {\r\n        if (this.activeTab === 'active') {\r\n          return ['pending', 'assigned', 'in_progress'].includes(request.status)\r\n        } else {\r\n          return ['completed', 'closed'].includes(request.status)\r\n        }\r\n      })\r\n    },\r\n    filteredServices() {\r\n      if (!this.services.length) return [];\r\n      \r\n      return this.services.filter(service => {\r\n        // Filter by name\r\n        if (this.searchQuery.name && !service.name.toLowerCase().includes(this.searchQuery.name.toLowerCase())) {\r\n          return false;\r\n        }\r\n        \r\n        // Filter by category\r\n        if (this.searchQuery.category && service.category !== this.searchQuery.category) {\r\n          return false;\r\n        }\r\n        \r\n        // Filter by PIN code if implemented\r\n        if (this.searchQuery.pinCode && service.available_pin_codes) {\r\n          if (!service.available_pin_codes.includes(this.searchQuery.pinCode)) {\r\n            return false;\r\n          }\r\n        }\r\n        \r\n        return true;\r\n      });\r\n    }\r\n  },\r\n  methods: {\r\n    async fetchServices() {\r\n      try {\r\n        this.loading = true;\r\n        console.log('CustomerDashboard: Fetching services...');\r\n        const response = await serviceAPI.getServices();\r\n        console.log(`CustomerDashboard: Received ${response.length} services`);\r\n        this.services = response;\r\n        this.loading = false;\r\n      } catch (error) {\r\n        console.error('CustomerDashboard: Error fetching services:', error);\r\n        this.error = 'Failed to load services. Please try again.';\r\n        this.loading = false;\r\n        \r\n        // Retry after a delay in case of network issues\r\n        setTimeout(() => {\r\n          if (this.services.length === 0) {\r\n            console.log('Retrying service fetch...');\r\n            this.fetchServices();\r\n          }\r\n        }, 3000);\r\n      }\r\n    },\r\n    async fetchServiceTypes() {\r\n      // We're using hardcoded categories now - no need to fetch from API\r\n      console.log('Using hardcoded service categories:', this.categories);\r\n    },\r\n    async fetchRequests() {\r\n      try {\r\n        this.loading = true;\r\n        const response = await customerAPI.getRequests();\r\n        this.serviceRequests = response;\r\n        this.loading = false;\r\n      } catch (error) {\r\n        console.error('Error fetching requests:', error);\r\n        this.error = 'Failed to load service requests. Please try again.';\r\n        this.loading = false;\r\n      }\r\n    },\r\n    async searchServices() {\r\n      // You can implement additional search logic here if needed\r\n      // For now, we'll just use the computed filteredServices property\r\n    },\r\n    async createRequest() {\r\n      this.isLoading = true;\r\n      try {\r\n        // Validate that we have either service_id or category\r\n        if (!this.newRequest.service_id && !this.newRequest.category) {\r\n          throw new Error(\"Please select a service category\");\r\n        }\r\n        \r\n        // Ensure pin_code is valid\r\n        if (!this.newRequest.pin_code || !/^\\d{6}$/.test(this.newRequest.pin_code)) {\r\n          throw new Error(\"Please enter a valid 6-digit PIN code\");\r\n        }\r\n        \r\n        console.log('Submitting request with data:', this.newRequest);\r\n        \r\n        try {\r\n          const response = await customerAPI.createRequest(this.newRequest);\r\n          this.showNewRequestModal = false;\r\n          this.newRequest = { service_id: '', pin_code: '', special_instructions: '', category: '' };\r\n          this.activeSection = 'requests'; // Switch to requests tab\r\n          await this.fetchRequests();\r\n          alert('Service request created successfully!');\r\n        } catch (apiError) {\r\n          // Show more friendly error message with details from the backend\r\n          if (apiError.message.includes('No service found in category')) {\r\n            throw new Error(`We currently don't have service professionals for ${this.newRequest.category}. Please try a different category.`);\r\n          } else {\r\n            throw apiError;\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error creating request:', error);\r\n        alert('Failed to create service request: ' + (error.message || 'Unknown error'));\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    },\r\n    async closeRequest(request, fromModal = false) {\r\n      if (confirm('Are you sure you want to cancel this request?')) {\r\n        try {\r\n          this.isLoading = true;\r\n          await customerAPI.closeRequest(request.id);\r\n          await this.fetchRequests();\r\n          if (fromModal) {\r\n            this.showRequestDetailsModal = false;\r\n          }\r\n          alert('Request cancelled successfully.');\r\n        } catch (error) {\r\n          console.error('Error closing request:', error);\r\n          alert('Failed to cancel request: ' + (error.message || 'Unknown error'));\r\n        } finally {\r\n          this.isLoading = false;\r\n        }\r\n      }\r\n    },\r\n    editRequest(request) {\r\n      // Implement edit functionality (e.g., populate form with current values)\r\n      this.newRequest = {\r\n        service_id: request.service_id,\r\n        pin_code: request.pin_code,\r\n        special_instructions: request.special_instructions || '',\r\n        category: request.category || ''\r\n      };\r\n      this.showNewRequestModal = true;\r\n    },\r\n    addReview(request) {\r\n      this.selectedRequest = request;\r\n      this.review = { rating: 0, remarks: '' };\r\n      this.showReviewModal = true;\r\n      if (this.showRequestDetailsModal) {\r\n        this.showRequestDetailsModal = false;\r\n      }\r\n    },\r\n    async submitReview() {\r\n      try {\r\n        this.isLoading = true;\r\n        await customerAPI.addReview(this.selectedRequest.id, this.review);\r\n        this.showReviewModal = false;\r\n        this.review = { rating: 0, remarks: '' };\r\n        await this.fetchRequests();\r\n        alert('Review submitted successfully.');\r\n      } catch (error) {\r\n        console.error('Error submitting review:', error);\r\n        alert('Failed to submit review: ' + (error.message || 'Unknown error'));\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    },\r\n    \r\n    selectService(service) {\r\n      this.selectedService = service;\r\n      this.showServiceModal = true;\r\n    },\r\n    \r\n    requestSelectedService() {\r\n      this.newRequest.service_id = this.selectedService.id;\r\n      this.showServiceModal = false;\r\n      this.showNewRequestModal = true;\r\n    },\r\n    \r\n    viewRequestDetails(request) {\r\n      this.selectedRequest = request;\r\n      this.showRequestDetailsModal = true;\r\n    },\r\n    \r\n    formatDate(dateString) {\r\n      if (!dateString) return 'N/A';\r\n      const date = new Date(dateString);\r\n      return date.toLocaleString('en-US', {\r\n        year: 'numeric',\r\n        month: 'short',\r\n        day: 'numeric',\r\n        hour: '2-digit',\r\n        minute: '2-digit'\r\n      });\r\n    },\r\n    \r\n    getStatusBadgeClass(status) {\r\n      const classes = {\r\n        pending: 'badge bg-warning',\r\n        assigned: 'badge bg-info',\r\n        in_progress: 'badge bg-primary',\r\n        completed: 'badge bg-success',\r\n        closed: 'badge bg-secondary',\r\n        cancelled: 'badge bg-danger'\r\n      };\r\n      return classes[status] || 'badge bg-secondary';\r\n    },\r\n    // Enhanced search method using the new search panel\r\n    handleSearch(params) {\r\n      this.searchQuery = { ...params };\r\n      this.page = 1;\r\n      this.fetchServices();\r\n    },\r\n    \r\n    // Method to directly request a service from the service list\r\n    directRequestService(service) {\r\n      this.selectedService = service;\r\n      this.showNewRequestModal = true;\r\n      \r\n      // Pre-populate the request form with the selected service\r\n      this.newRequest.service_id = service.id;\r\n    },\r\n    \r\n    // Load more services for pagination\r\n    loadMoreServices() {\r\n      this.page += 1;\r\n      this.fetchMoreServices();\r\n    },\r\n    \r\n    // Fetch additional services for pagination\r\n    // async fetchMoreServices() {\r\n    //   try {\r\n    //     const response = await serviceAPI.getServices({\r\n    //       ...this.searchQuery,\r\n    //       page: this.page,\r\n    //       limit: this.limit\r\n    //     });\r\n        \r\n    //     if (response.length > 0) {\r\n    //       this.services = [...this.services, ...response];\r\n    //       this.hasMoreServices = response.length === this.limit;\r\n    //     } else {\r\n    //       this.hasMoreServices = false;\r\n    //     }\r\n    //   } catch (error) {\r\n    //     console.error('Error fetching more services:', error);\r\n    //   }\r\n    // },\r\n    \r\n    // Handle review submission\r\n    handleReviewSubmitted() {\r\n      this.showReviewModal = false;\r\n      this.fetchRequests();\r\n      alert('Thank you for your review!');\r\n    },\r\n    \r\n    // Handle request updated\r\n    handleRequestUpdated() {\r\n      this.fetchRequests();\r\n    },\r\n    // Enhanced edit methods\r\n    startEdit() {\r\n      this.isEditingRequest = true;\r\n      this.editedRequest = {\r\n        id: this.selectedRequest.id,\r\n        pin_code: this.selectedRequest.pin_code,\r\n        special_instructions: this.selectedRequest.special_instructions || ''\r\n      };\r\n    },\r\n    \r\n    cancelEdit() {\r\n      this.isEditingRequest = false;\r\n    },\r\n    \r\n    async updateRequest() {\r\n      try {\r\n        this.isLoading = true;\r\n        \r\n        if (!this.editedRequest.pin_code || !/^\\d{6}$/.test(this.editedRequest.pin_code)) {\r\n          throw new Error(\"Please enter a valid 6-digit PIN code\");\r\n        }\r\n        \r\n        await customerAPI.updateRequest(this.editedRequest.id, {\r\n          pin_code: this.editedRequest.pin_code,\r\n          special_instructions: this.editedRequest.special_instructions\r\n        });\r\n        \r\n        // Update the selected request with the new values\r\n        this.selectedRequest.pin_code = this.editedRequest.pin_code;\r\n        this.selectedRequest.special_instructions = this.editedRequest.special_instructions;\r\n        \r\n        // Refresh the requests list\r\n        await this.fetchRequests();\r\n        \r\n        this.isEditingRequest = false;\r\n        alert('Request updated successfully!');\r\n      } catch (error) {\r\n        console.error('Error updating request:', error);\r\n        alert('Failed to update request: ' + (error.message || 'Unknown error'));\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    },\r\n    \r\n    // Enhanced search functionality\r\n    handleSearch(params) {\r\n      console.log('Search params:', params);\r\n      this.searchQuery = { ...params };\r\n      \r\n      // Update the page state\r\n      this.page = 1;\r\n      \r\n      // If we have a PIN code, filter by location\r\n      if (params.pinCode) {\r\n        console.log(`Filtering services by PIN code: ${params.pinCode}`);\r\n      }\r\n      \r\n      // If we have a category selected, filter by that\r\n      if (params.category) {\r\n        console.log(`Filtering services by category: ${params.category}`);\r\n      }\r\n      \r\n      // If we have a name/keyword, filter by that\r\n      if (params.name) {\r\n        console.log(`Filtering services by name: ${params.name}`);\r\n      }\r\n      \r\n      // Use advanced filters if provided\r\n      if (params.priceMin || params.priceMax) {\r\n        console.log(`Filtering by price range: ${params.priceMin || 0} - ${params.priceMax || 'max'}`);\r\n      }\r\n      \r\n      // Apply sorting if specified\r\n      if (params.sortBy) {\r\n        console.log(`Sorting results by: ${params.sortBy}`);\r\n      }\r\n      \r\n      // Fetch filtered services - if your API supports filtering\r\n      // this.fetchFilteredServices(params);\r\n      \r\n      // For now, we'll use the computed filteredServices property with local data\r\n    }\r\n  },\r\n  async created() {\r\n    await Promise.all([\r\n      this.fetchServices(),\r\n      // fetchServiceTypes will just use the hardcoded categories now\r\n      this.fetchServiceTypes(),\r\n      this.fetchRequests()\r\n    ]);\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.customer-dashboard {\r\n  background-color: #f8f9fa;\r\n  min-height: 100vh;\r\n}\r\n\r\n.service-card {\r\n  transition: transform 0.2s, box-shadow 0.2s;\r\n}\r\n\r\n.service-card:hover {\r\n  transform: translateY(-5px);\r\n  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);\r\n}\r\n\r\n.nav-pills .nav-link,\r\n.nav-tabs .nav-link {\r\n  cursor: pointer;\r\n}\r\n\r\n.modal.show {\r\n  display: block;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n}\r\n\r\n.star-rating {\r\n  display: flex;\r\n  gap: 5px;\r\n}\r\n\r\n.star-rating i {\r\n  cursor: pointer;\r\n  color: #e0e0e0;\r\n}\r\n\r\n.star-rating i.active {\r\n  color: #ffc107;\r\n}\r\n\r\n.timeline {\r\n  position: relative;\r\n  padding-left: 30px;\r\n}\r\n\r\n.timeline-item {\r\n  position: relative;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.timeline-marker {\r\n  position: absolute;\r\n  left: -30px;\r\n  top: 5px;\r\n  width: 15px;\r\n  height: 15px;\r\n  border-radius: 50%;\r\n}\r\n\r\n.timeline:before {\r\n  content: '';\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: -23px;\r\n  width: 2px;\r\n  background-color: #e9ecef;\r\n}\r\n</style>"],"mappings":"AA2ZA,SAAAA,WAAA,EAAAC,UAAA;AACA,OAAAC,kBAAA;AACA,OAAAC,WAAA;AACA,OAAAC,iBAAA;AACA,OAAAC,oBAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAL,kBAAA;IACAC,WAAA;IACAC,iBAAA;IACAC;EACA;EACAG,KAAA;IACA;MACAC,QAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA,WAAAP,IAAA;MACAQ,aAAA;MAAA;MACAC,SAAA;MAAA;MACAC,WAAA;QACAV,IAAA;QACAW,OAAA;QACAC,QAAA;MACA;MACAC,QAAA;MACAC,UAAA,GACA,aACA,YACA,cACA,aACA,YACA,YACA,gBACA,oBACA,mBACA,YACA;MACAC,eAAA;MACAC,mBAAA;MACAC,eAAA;MACAC,gBAAA;MACAC,uBAAA;MACAC,SAAA;MACAC,OAAA;MAAA;MACAC,UAAA;QACAC,UAAA;QACAC,QAAA;QACAC,oBAAA;QACAb,QAAA;MACA;MACAc,MAAA;QACAC,MAAA;QACAC,OAAA;MACA;MACAC,eAAA;MACAC,eAAA;MACAC,KAAA;MACAC,eAAA;MACAC,IAAA;MACAC,KAAA;MACAC,gBAAA;MACAC,aAAA;QACAC,EAAA;QACAb,QAAA;QACAC,oBAAA;MACA;IACA;EACA;EACAa,QAAA;IACAC,iBAAA;MACA,YAAAxB,eAAA,CAAAyB,MAAA,CAAAC,OAAA;QACA,SAAAhC,SAAA;UACA,8CAAAiC,QAAA,CAAAD,OAAA,CAAAE,MAAA;QACA;UACA,+BAAAD,QAAA,CAAAD,OAAA,CAAAE,MAAA;QACA;MACA;IACA;IACAC,iBAAA;MACA,UAAA/B,QAAA,CAAAgC,MAAA;MAEA,YAAAhC,QAAA,CAAA2B,MAAA,CAAAM,OAAA;QACA;QACA,SAAApC,WAAA,CAAAV,IAAA,KAAA8C,OAAA,CAAA9C,IAAA,CAAA+C,WAAA,GAAAL,QAAA,MAAAhC,WAAA,CAAAV,IAAA,CAAA+C,WAAA;UACA;QACA;;QAEA;QACA,SAAArC,WAAA,CAAAE,QAAA,IAAAkC,OAAA,CAAAlC,QAAA,UAAAF,WAAA,CAAAE,QAAA;UACA;QACA;;QAEA;QACA,SAAAF,WAAA,CAAAC,OAAA,IAAAmC,OAAA,CAAAE,mBAAA;UACA,KAAAF,OAAA,CAAAE,mBAAA,CAAAN,QAAA,MAAAhC,WAAA,CAAAC,OAAA;YACA;UACA;QACA;QAEA;MACA;IACA;EACA;EACAsC,OAAA;IACA,MAAAC,cAAA;MACA;QACA,KAAA7B,OAAA;QACA8B,OAAA,CAAAC,GAAA;QACA,MAAAC,QAAA,SAAA1D,UAAA,CAAA2D,WAAA;QACAH,OAAA,CAAAC,GAAA,gCAAAC,QAAA,CAAAR,MAAA;QACA,KAAAhC,QAAA,GAAAwC,QAAA;QACA,KAAAhC,OAAA;MACA,SAAAU,KAAA;QACAoB,OAAA,CAAApB,KAAA,gDAAAA,KAAA;QACA,KAAAA,KAAA;QACA,KAAAV,OAAA;;QAEA;QACAkC,UAAA;UACA,SAAA1C,QAAA,CAAAgC,MAAA;YACAM,OAAA,CAAAC,GAAA;YACA,KAAAF,aAAA;UACA;QACA;MACA;IACA;IACA,MAAAM,kBAAA;MACA;MACAL,OAAA,CAAAC,GAAA,6CAAAtC,UAAA;IACA;IACA,MAAA2C,cAAA;MACA;QACA,KAAApC,OAAA;QACA,MAAAgC,QAAA,SAAA3D,WAAA,CAAAgE,WAAA;QACA,KAAA3C,eAAA,GAAAsC,QAAA;QACA,KAAAhC,OAAA;MACA,SAAAU,KAAA;QACAoB,OAAA,CAAApB,KAAA,6BAAAA,KAAA;QACA,KAAAA,KAAA;QACA,KAAAV,OAAA;MACA;IACA;IACA,MAAAsC,eAAA;MACA;MACA;IAAA,CACA;IACA,MAAAC,cAAA;MACA,KAAAxC,SAAA;MACA;QACA;QACA,UAAAE,UAAA,CAAAC,UAAA,UAAAD,UAAA,CAAAV,QAAA;UACA,UAAAiD,KAAA;QACA;;QAEA;QACA,UAAAvC,UAAA,CAAAE,QAAA,eAAAsC,IAAA,MAAAxC,UAAA,CAAAE,QAAA;UACA,UAAAqC,KAAA;QACA;QAEAV,OAAA,CAAAC,GAAA,uCAAA9B,UAAA;QAEA;UACA,MAAA+B,QAAA,SAAA3D,WAAA,CAAAkE,aAAA,MAAAtC,UAAA;UACA,KAAAN,mBAAA;UACA,KAAAM,UAAA;YAAAC,UAAA;YAAAC,QAAA;YAAAC,oBAAA;YAAAb,QAAA;UAAA;UACA,KAAAJ,aAAA;UACA,WAAAiD,aAAA;UACAM,KAAA;QACA,SAAAC,QAAA;UACA;UACA,IAAAA,QAAA,CAAAC,OAAA,CAAAvB,QAAA;YACA,UAAAmB,KAAA,2DAAAvC,UAAA,CAAAV,QAAA;UACA;YACA,MAAAoD,QAAA;UACA;QACA;MACA,SAAAjC,KAAA;QACAoB,OAAA,CAAApB,KAAA,4BAAAA,KAAA;QACAgC,KAAA,yCAAAhC,KAAA,CAAAkC,OAAA;MACA;QACA,KAAA7C,SAAA;MACA;IACA;IACA,MAAA8C,aAAAzB,OAAA,EAAA0B,SAAA;MACA,IAAAC,OAAA;QACA;UACA,KAAAhD,SAAA;UACA,MAAA1B,WAAA,CAAAwE,YAAA,CAAAzB,OAAA,CAAAJ,EAAA;UACA,WAAAoB,aAAA;UACA,IAAAU,SAAA;YACA,KAAAhD,uBAAA;UACA;UACA4C,KAAA;QACA,SAAAhC,KAAA;UACAoB,OAAA,CAAApB,KAAA,2BAAAA,KAAA;UACAgC,KAAA,iCAAAhC,KAAA,CAAAkC,OAAA;QACA;UACA,KAAA7C,SAAA;QACA;MACA;IACA;IACAiD,YAAA5B,OAAA;MACA;MACA,KAAAnB,UAAA;QACAC,UAAA,EAAAkB,OAAA,CAAAlB,UAAA;QACAC,QAAA,EAAAiB,OAAA,CAAAjB,QAAA;QACAC,oBAAA,EAAAgB,OAAA,CAAAhB,oBAAA;QACAb,QAAA,EAAA6B,OAAA,CAAA7B,QAAA;MACA;MACA,KAAAI,mBAAA;IACA;IACAsD,UAAA7B,OAAA;MACA,KAAAZ,eAAA,GAAAY,OAAA;MACA,KAAAf,MAAA;QAAAC,MAAA;QAAAC,OAAA;MAAA;MACA,KAAAX,eAAA;MACA,SAAAE,uBAAA;QACA,KAAAA,uBAAA;MACA;IACA;IACA,MAAAoD,aAAA;MACA;QACA,KAAAnD,SAAA;QACA,MAAA1B,WAAA,CAAA4E,SAAA,MAAAzC,eAAA,CAAAQ,EAAA,OAAAX,MAAA;QACA,KAAAT,eAAA;QACA,KAAAS,MAAA;UAAAC,MAAA;UAAAC,OAAA;QAAA;QACA,WAAA6B,aAAA;QACAM,KAAA;MACA,SAAAhC,KAAA;QACAoB,OAAA,CAAApB,KAAA,6BAAAA,KAAA;QACAgC,KAAA,gCAAAhC,KAAA,CAAAkC,OAAA;MACA;QACA,KAAA7C,SAAA;MACA;IACA;IAEAoD,cAAA1B,OAAA;MACA,KAAAhB,eAAA,GAAAgB,OAAA;MACA,KAAA5B,gBAAA;IACA;IAEAuD,uBAAA;MACA,KAAAnD,UAAA,CAAAC,UAAA,QAAAO,eAAA,CAAAO,EAAA;MACA,KAAAnB,gBAAA;MACA,KAAAF,mBAAA;IACA;IAEA0D,mBAAAjC,OAAA;MACA,KAAAZ,eAAA,GAAAY,OAAA;MACA,KAAAtB,uBAAA;IACA;IAEAwD,WAAAC,UAAA;MACA,KAAAA,UAAA;MACA,MAAAC,IAAA,OAAAC,IAAA,CAAAF,UAAA;MACA,OAAAC,IAAA,CAAAE,cAAA;QACAC,IAAA;QACAC,KAAA;QACAC,GAAA;QACAC,IAAA;QACAC,MAAA;MACA;IACA;IAEAC,oBAAA1C,MAAA;MACA,MAAA2C,OAAA;QACAC,OAAA;QACAC,QAAA;QACAC,WAAA;QACAC,SAAA;QACAC,MAAA;QACAC,SAAA;MACA;MACA,OAAAN,OAAA,CAAA3C,MAAA;IACA;IACA;IACAkD,aAAAC,MAAA;MACA,KAAApF,WAAA;QAAA,GAAAoF;MAAA;MACA,KAAA7D,IAAA;MACA,KAAAiB,aAAA;IACA;IAEA;IACA6C,qBAAAjD,OAAA;MACA,KAAAhB,eAAA,GAAAgB,OAAA;MACA,KAAA9B,mBAAA;;MAEA;MACA,KAAAM,UAAA,CAAAC,UAAA,GAAAuB,OAAA,CAAAT,EAAA;IACA;IAEA;IACA2D,iBAAA;MACA,KAAA/D,IAAA;MACA,KAAAgE,iBAAA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACAC,sBAAA;MACA,KAAAjF,eAAA;MACA,KAAAwC,aAAA;MACAM,KAAA;IACA;IAEA;IACAoC,qBAAA;MACA,KAAA1C,aAAA;IACA;IACA;IACA2C,UAAA;MACA,KAAAjE,gBAAA;MACA,KAAAC,aAAA;QACAC,EAAA,OAAAR,eAAA,CAAAQ,EAAA;QACAb,QAAA,OAAAK,eAAA,CAAAL,QAAA;QACAC,oBAAA,OAAAI,eAAA,CAAAJ,oBAAA;MACA;IACA;IAEA4E,WAAA;MACA,KAAAlE,gBAAA;IACA;IAEA,MAAAmE,cAAA;MACA;QACA,KAAAlF,SAAA;QAEA,UAAAgB,aAAA,CAAAZ,QAAA,eAAAsC,IAAA,MAAA1B,aAAA,CAAAZ,QAAA;UACA,UAAAqC,KAAA;QACA;QAEA,MAAAnE,WAAA,CAAA4G,aAAA,MAAAlE,aAAA,CAAAC,EAAA;UACAb,QAAA,OAAAY,aAAA,CAAAZ,QAAA;UACAC,oBAAA,OAAAW,aAAA,CAAAX;QACA;;QAEA;QACA,KAAAI,eAAA,CAAAL,QAAA,QAAAY,aAAA,CAAAZ,QAAA;QACA,KAAAK,eAAA,CAAAJ,oBAAA,QAAAW,aAAA,CAAAX,oBAAA;;QAEA;QACA,WAAAgC,aAAA;QAEA,KAAAtB,gBAAA;QACA4B,KAAA;MACA,SAAAhC,KAAA;QACAoB,OAAA,CAAApB,KAAA,4BAAAA,KAAA;QACAgC,KAAA,iCAAAhC,KAAA,CAAAkC,OAAA;MACA;QACA,KAAA7C,SAAA;MACA;IACA;IAEA;IACAyE,aAAAC,MAAA;MACA3C,OAAA,CAAAC,GAAA,mBAAA0C,MAAA;MACA,KAAApF,WAAA;QAAA,GAAAoF;MAAA;;MAEA;MACA,KAAA7D,IAAA;;MAEA;MACA,IAAA6D,MAAA,CAAAnF,OAAA;QACAwC,OAAA,CAAAC,GAAA,oCAAA0C,MAAA,CAAAnF,OAAA;MACA;;MAEA;MACA,IAAAmF,MAAA,CAAAlF,QAAA;QACAuC,OAAA,CAAAC,GAAA,oCAAA0C,MAAA,CAAAlF,QAAA;MACA;;MAEA;MACA,IAAAkF,MAAA,CAAA9F,IAAA;QACAmD,OAAA,CAAAC,GAAA,gCAAA0C,MAAA,CAAA9F,IAAA;MACA;;MAEA;MACA,IAAA8F,MAAA,CAAAS,QAAA,IAAAT,MAAA,CAAAU,QAAA;QACArD,OAAA,CAAAC,GAAA,8BAAA0C,MAAA,CAAAS,QAAA,WAAAT,MAAA,CAAAU,QAAA;MACA;;MAEA;MACA,IAAAV,MAAA,CAAAW,MAAA;QACAtD,OAAA,CAAAC,GAAA,wBAAA0C,MAAA,CAAAW,MAAA;MACA;;MAEA;MACA;;MAEA;IACA;EACA;EACA,MAAAC,QAAA;IACA,MAAAC,OAAA,CAAAC,GAAA,EACA,KAAA1D,aAAA;IACA;IACA,KAAAM,iBAAA,IACA,KAAAC,aAAA,GACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}