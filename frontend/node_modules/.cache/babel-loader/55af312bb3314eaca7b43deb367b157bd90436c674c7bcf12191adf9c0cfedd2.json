{"ast":null,"code":"export default {\n  data() {\n    return {\n      userName: 'John Doe',\n      activeSection: 'browse',\n      activeTab: 'active',\n      showServiceModal: false,\n      showNewRequestModal: false,\n      showReviewModal: false,\n      showRequestDetailsModal: false,\n      selectedService: null,\n      selectedRequest: null,\n      searchQuery: {\n        name: '',\n        category: '',\n        pinCode: ''\n      },\n      services: [],\n      categories: [],\n      serviceRequests: [],\n      loading: false,\n      error: null,\n      newRequest: {\n        service_id: '',\n        pin_code: '',\n        special_instructions: '',\n        category: ''\n      },\n      isLoading: false,\n      review: {\n        rating: 0,\n        remarks: ''\n      },\n      page: 1,\n      hasMoreServices: true\n    };\n  },\n  computed: {\n    filteredRequests() {\n      return this.serviceRequests.filter(request => {\n        if (this.activeTab === 'active') {\n          return ['pending', 'assigned', 'in_progress'].includes(request.status);\n        } else {\n          return ['completed', 'closed'].includes(request.status);\n        }\n      });\n    },\n    filteredServices() {\n      if (!this.services.length) return [];\n      return this.services.filter(service => {\n        // Filter by name\n        if (this.searchQuery.name && !service.name.toLowerCase().includes(this.searchQuery.name.toLowerCase())) {\n          return false;\n        }\n\n        // Filter by category\n        if (this.searchQuery.category && service.category !== this.searchQuery.category) {\n          return false;\n        }\n\n        // Filter by PIN code if implemented\n        if (this.searchQuery.pinCode && service.available_pin_codes) {\n          if (!service.available_pin_codes.includes(this.searchQuery.pinCode)) {\n            return false;\n          }\n        }\n        return true;\n      });\n    }\n  },\n  methods: {\n    async fetchServices() {\n      try {\n        this.loading = true;\n        console.log('CustomerDashboard: Fetching services...');\n        const response = await serviceAPI.getServices();\n        console.log(`CustomerDashboard: Received ${response.length} services`);\n        this.services = response;\n        this.loading = false;\n      } catch (error) {\n        console.error('CustomerDashboard: Error fetching services:', error);\n        this.error = 'Failed to load services. Please try again.';\n        this.loading = false;\n\n        // Retry after a delay in case of network issues\n        setTimeout(() => {\n          if (this.services.length === 0) {\n            console.log('Retrying service fetch...');\n            this.fetchServices();\n          }\n        }, 3000);\n      }\n    },\n    async fetchServiceTypes() {\n      try {\n        this.loading = true;\n        console.log('Fetching service categories from database...');\n        const response = await serviceAPI.getServiceTypes();\n        if (response && Array.isArray(response) && response.length > 0) {\n          this.categories = response;\n          console.log(`Received ${this.categories.length} service categories`);\n        } else {\n          console.warn('No service categories returned from API, using defaults');\n          // Fallback to defaults if API returns empty array\n          this.categories = ['AC Repair', 'Plumbing', 'Electrical', 'Carpentry', 'Painting', 'Cleaning', 'Pest Control', 'Appliance Repair', 'Moving Services', 'Gardening'];\n        }\n        this.loading = false;\n      } catch (error) {\n        console.error('Error fetching service categories:', error);\n        // Fallback to defaults on error\n        this.categories = ['AC Repair', 'Plumbing', 'Electrical', 'Carpentry', 'Painting', 'Cleaning', 'Pest Control', 'Appliance Repair', 'Moving Services', 'Gardening'];\n        this.loading = false;\n      }\n    },\n    async fetchRequests() {\n      try {\n        this.loading = true;\n        const response = await customerAPI.getRequests();\n        this.serviceRequests = response;\n        this.loading = false;\n      } catch (error) {\n        console.error('Error fetching requests:', error);\n        this.error = 'Failed to load service requests. Please try again.';\n        this.loading = false;\n      }\n    },\n    async searchServices() {\n      // You can implement additional search logic here if needed\n      // For now, we'll just use the computed filteredServices property\n    },\n    async createRequest() {\n      this.isLoading = true;\n      try {\n        // Validate that we have either service_id or category\n        if (!this.newRequest.service_id && !this.newRequest.category) {\n          throw new Error(\"Please select a service category\");\n        }\n\n        // Ensure pin_code is valid\n        if (!this.newRequest.pin_code || !/^\\d{6}$/.test(this.newRequest.pin_code)) {\n          throw new Error(\"Please enter a valid 6-digit PIN code\");\n        }\n        console.log('Submitting request with data:', this.newRequest);\n        try {\n          const response = await customerAPI.createRequest(this.newRequest);\n          this.showNewRequestModal = false;\n          this.newRequest = {\n            service_id: '',\n            pin_code: '',\n            special_instructions: '',\n            category: ''\n          };\n          this.activeSection = 'requests'; // Switch to requests tab\n          await this.fetchRequests();\n          alert('Service request created successfully!');\n        } catch (apiError) {\n          // Show more friendly error message with details from the backend\n          if (apiError.message.includes('No service found in category')) {\n            throw new Error(`We currently don't have service professionals for ${this.newRequest.category}. Please try a different category.`);\n          } else {\n            throw apiError;\n          }\n        }\n      } catch (error) {\n        console.error('Error creating request:', error);\n        alert('Failed to create service request: ' + (error.message || 'Unknown error'));\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    async closeRequest(request, fromModal = false) {\n      if (confirm('Are you sure you want to cancel this request?')) {\n        try {\n          this.isLoading = true;\n          await customerAPI.closeRequest(request.id);\n          await this.fetchRequests();\n          if (fromModal) {\n            this.showRequestDetailsModal = false;\n          }\n          alert('Request cancelled successfully.');\n        } catch (error) {\n          console.error('Error closing request:', error);\n          alert('Failed to cancel request: ' + (error.message || 'Unknown error'));\n        } finally {\n          this.isLoading = false;\n        }\n      }\n    },\n    editRequest(request) {\n      // Implement edit functionality (e.g., populate form with current values)\n      this.newRequest = {\n        service_id: request.service_id,\n        pin_code: request.pin_code,\n        special_instructions: request.special_instructions || '',\n        category: request.category || ''\n      };\n      this.showNewRequestModal = true;\n    },\n    addReview(request) {\n      this.selectedRequest = request;\n      this.review = {\n        rating: 0,\n        remarks: ''\n      };\n      this.showReviewModal = true;\n      if (this.showRequestDetailsModal) {\n        this.showRequestDetailsModal = false;\n      }\n    },\n    async submitReview() {\n      try {\n        this.isLoading = true;\n        await customerAPI.addReview(this.selectedRequest.id, this.review);\n        this.showReviewModal = false;\n        this.review = {\n          rating: 0,\n          remarks: ''\n        };\n        await this.fetchRequests();\n        alert('Review submitted successfully.');\n      } catch (error) {\n        console.error('Error submitting review:', error);\n        alert('Failed to submit review: ' + (error.message || 'Unknown error'));\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    selectService(service) {\n      this.selectedService = service;\n      this.showServiceModal = true;\n    },\n    requestSelectedService() {\n      this.newRequest.service_id = this.selectedService.id;\n      this.showServiceModal = false;\n      this.showNewRequestModal = true;\n    },\n    viewRequestDetails(request) {\n      this.selectedRequest = request;\n      this.showRequestDetailsModal = true;\n    },\n    formatDate(dateString, short = false) {\n      if (!dateString) return 'N/A';\n      const date = new Date(dateString);\n      if (short) {\n        return date.toLocaleDateString('en-US', {\n          month: 'short',\n          day: 'numeric'\n        });\n      }\n      return date.toLocaleString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    },\n    getStatusBadgeClass(status) {\n      const classes = {\n        pending: 'badge bg-warning',\n        assigned: 'badge bg-info',\n        in_progress: 'badge bg-primary',\n        completed: 'badge bg-success',\n        closed: 'badge bg-secondary',\n        cancelled: 'badge bg-danger'\n      };\n      return classes[status] || 'badge bg-secondary';\n    },\n    // Enhanced search method using the new search panel\n    handleSearch(params) {\n      this.searchQuery = {\n        ...params\n      };\n      this.page = 1;\n      this.fetchServices();\n    },\n    // Method to directly request a service from the service list\n    directRequestService(service) {\n      this.selectedService = service;\n      this.showNewRequestModal = true;\n\n      // Pre-populate the request form with the selected service\n      this.newRequest.service_id = service.id;\n    },\n    // Load more services for pagination\n    loadMoreServices() {\n      this.page += 1;\n      this.fetchMoreServices();\n    },\n    // Handle review submission\n    handleReviewSubmitted() {\n      this.showReviewModal = false;\n      this.fetchRequests();\n      alert('Thank you for your review!');\n    },\n    // Handle request updated\n    handleRequestUpdated() {\n      this.fetchRequests();\n    },\n    getActiveCount() {\n      return this.serviceRequests.filter(request => ['pending', 'assigned', 'in_progress'].includes(request.status)).length;\n    },\n    getCompletedCount() {\n      return this.serviceRequests.filter(request => ['completed', 'closed'].includes(request.status)).length;\n    }\n  },\n  async created() {\n    await Promise.all([this.fetchServices(),\n    // fetchServiceTypes will just use the hardcoded categories now\n    this.fetchServiceTypes(), this.fetchRequests()]);\n  }\n};","map":{"version":3,"names":["data","userName","activeSection","activeTab","showServiceModal","showNewRequestModal","showReviewModal","showRequestDetailsModal","selectedService","selectedRequest","searchQuery","name","category","pinCode","services","categories","serviceRequests","loading","error","newRequest","service_id","pin_code","special_instructions","isLoading","review","rating","remarks","page","hasMoreServices","computed","filteredRequests","filter","request","includes","status","filteredServices","length","service","toLowerCase","available_pin_codes","methods","fetchServices","console","log","response","serviceAPI","getServices","setTimeout","fetchServiceTypes","getServiceTypes","Array","isArray","warn","fetchRequests","customerAPI","getRequests","searchServices","createRequest","Error","test","alert","apiError","message","closeRequest","fromModal","confirm","id","editRequest","addReview","submitReview","selectService","requestSelectedService","viewRequestDetails","formatDate","dateString","short","date","Date","toLocaleDateString","month","day","toLocaleString","year","hour","minute","getStatusBadgeClass","classes","pending","assigned","in_progress","completed","closed","cancelled","handleSearch","params","directRequestService","loadMoreServices","fetchMoreServices","handleReviewSubmitted","handleRequestUpdated","getActiveCount","getCompletedCount","created","Promise","all"],"sources":["src/views/CustomerDashboard.vue"],"sourcesContent":["<template>\r\n  <div class=\"customer-dashboard\">\r\n    <div class=\"container py-4\">\r\n      <!-- Welcome Section -->\r\n      <div class=\"row mb-4\">\r\n        <div class=\"col-md-8\">\r\n          <h2>Welcome, {{ userName }}!</h2>\r\n          <p class=\"text-muted\">Find services and manage your requests</p>\r\n        </div>\r\n        <div class=\"col-md-4 text-md-end\">\r\n          <button class=\"btn btn-primary\" @click=\"showNewRequestModal = true\">\r\n            <i class=\"fas fa-plus me-2\"></i>New Service Request\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Main Navigation Tabs -->\r\n      <ul class=\"nav nav-pills mb-4\">\r\n        <li class=\"nav-item\">\r\n          <a class=\"nav-link\" :class=\"{ active: activeSection === 'browse' }\" \r\n             @click.prevent=\"activeSection = 'browse'\" href=\"#\">\r\n            <i class=\"fas fa-search me-1\"></i> Browse Services\r\n          </a>\r\n        </li>\r\n        <li class=\"nav-item\">\r\n          <a class=\"nav-link\" :class=\"{ active: activeSection === 'requests' }\" \r\n             @click.prevent=\"activeSection = 'requests'\" href=\"#\">\r\n            <i class=\"fas fa-list-alt me-1\"></i> My Requests\r\n          </a>\r\n        </li>\r\n      </ul>\r\n\r\n      <!-- Browse Services Section -->\r\n      <div v-if=\"activeSection === 'browse'\">\r\n        <!-- Enhanced Service Search using the new component -->\r\n        <ServiceSearchPanel \r\n          :initialParams=\"searchQuery\" \r\n          :categories=\"categories\"\r\n          @search=\"handleSearch\"\r\n        />\r\n\r\n        <!-- Service List using the new component -->\r\n        <ServiceList\r\n          :services=\"filteredServices\"\r\n          :loading=\"loading\"\r\n          :hasMore=\"hasMoreServices\"\r\n          @view-details=\"selectService\"\r\n          @request-service=\"directRequestService\"\r\n          @load-more=\"loadMoreServices\"\r\n        />\r\n      </div>\r\n\r\n      <!-- My Requests Section -->\r\n      <div v-if=\"activeSection === 'requests'\">\r\n        <!-- Service Requests Tabs -->\r\n        <ul class=\"nav nav-tabs mb-4\">\r\n          <li class=\"nav-item\">\r\n            <a \r\n              class=\"nav-link\" \r\n              :class=\"{ active: activeTab === 'active' }\"\r\n              @click.prevent=\"activeTab = 'active'\"\r\n              href=\"#\"\r\n            >\r\n              <i class=\"fas fa-spinner me-1\"></i> Active Requests\r\n              <span v-if=\"getActiveCount() > 0\" class=\"badge rounded-pill bg-primary ms-1\">\r\n                {{ getActiveCount() }}\r\n              </span>\r\n            </a>\r\n          </li>\r\n          <li class=\"nav-item\">\r\n            <a \r\n              class=\"nav-link\" \r\n              :class=\"{ active: activeTab === 'completed' }\"\r\n              @click.prevent=\"activeTab = 'completed'\"\r\n              href=\"#\"\r\n            >\r\n              <i class=\"fas fa-check-circle me-1\"></i> Service History\r\n              <span v-if=\"getCompletedCount() > 0\" class=\"badge rounded-pill bg-success ms-1\">\r\n                {{ getCompletedCount() }}\r\n              </span>\r\n            </a>\r\n          </li>\r\n        </ul>\r\n\r\n        <!-- Service Requests List -->\r\n        <div v-if=\"loading\" class=\"text-center py-5\">\r\n          <div class=\"spinner-border text-primary\" role=\"status\">\r\n            <span class=\"visually-hidden\">Loading...</span>\r\n          </div>\r\n          <p class=\"mt-2\">Loading your requests...</p>\r\n        </div>\r\n        \r\n        <div v-else-if=\"filteredRequests.length === 0\" class=\"text-center py-5\">\r\n          <i class=\"fas fa-inbox fa-3x text-muted mb-3\"></i>\r\n          <h5>No service requests found</h5>\r\n          <p class=\"text-muted\">\r\n            {{ activeTab === 'active' ? 'Create a new request to get started!' : 'No completed requests yet.' }}\r\n          </p>\r\n          <button v-if=\"activeTab === 'active'\" class=\"btn btn-primary mt-2\" @click=\"showNewRequestModal = true\">\r\n            <i class=\"fas fa-plus me-2\"></i>Create Service Request\r\n          </button>\r\n        </div>\r\n        \r\n        <div v-else class=\"row g-4\">\r\n          <div v-for=\"request in filteredRequests\" :key=\"request.id\" class=\"col-md-6\">\r\n            <div class=\"card h-100 shadow-sm\" :class=\"{'border-warning': request.status === 'pending', \r\n                                                     'border-primary': request.status === 'in_progress',\r\n                                                     'border-success': request.status === 'completed'}\">\r\n              <div class=\"card-header bg-transparent d-flex justify-content-between align-items-center\">\r\n                <span :class=\"getStatusBadgeClass(request.status)\">\r\n                  {{ request.status }}\r\n                </span>\r\n                <small class=\"text-muted\">\r\n                  <i class=\"fas fa-calendar me-1\"></i> {{ formatDate(request.created_at, true) }}\r\n                </small>\r\n              </div>\r\n              <div class=\"card-body\">\r\n                <h5 class=\"card-title mb-3\">{{ request.service.name }}</h5>\r\n                \r\n                <div class=\"d-flex mb-3\">\r\n                  <div class=\"me-3\">\r\n                    <i class=\"fas fa-map-marker-alt text-muted me-1\"></i> {{ request.pin_code }}\r\n                  </div>\r\n                  <div v-if=\"request.final_amount\">\r\n                    <i class=\"fas fa-money-bill-wave text-success me-1\"></i> ₹{{ request.final_amount }}\r\n                  </div>\r\n                </div>\r\n\r\n                <div v-if=\"request.professional\" class=\"mb-3 p-2 bg-light rounded\">\r\n                  <div class=\"d-flex align-items-center\">\r\n                    <i class=\"fas fa-user-tie text-primary me-2 fa-lg\"></i>\r\n                    <div>\r\n                      <strong>{{ request.professional.professional_name }}</strong>\r\n                      <p class=\"text-muted mb-0 small\">{{ request.professional.service_type }}</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <p v-if=\"request.special_instructions\" class=\"card-text text-truncate mb-3\" \r\n                   :title=\"request.special_instructions\">\r\n                  {{ request.special_instructions }}\r\n                </p>\r\n\r\n                <!-- Status update indicators -->\r\n                <div class=\"mb-3 service-progress\">\r\n                  <div class=\"status-track d-flex justify-content-between\">\r\n                    <div class=\"status-point\" :class=\"{'active': true}\">\r\n                      <i class=\"fas fa-plus-circle\"></i>\r\n                      <span>Created</span>\r\n                    </div>\r\n                    <div class=\"status-point\" :class=\"{'active': ['in_progress', 'completed', 'closed'].includes(request.status)}\">\r\n                      <i class=\"fas fa-tools\"></i>\r\n                      <span>In Progress</span>\r\n                    </div>\r\n                    <div class=\"status-point\" :class=\"{'active': ['completed', 'closed'].includes(request.status)}\">\r\n                      <i class=\"fas fa-check-circle\"></i>\r\n                      <span>Completed</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <!-- Action Buttons -->\r\n                <div class=\"d-flex justify-content-end gap-2 mt-3\">\r\n                  <button\r\n                    v-if=\"request.status === 'pending' || request.status === 'assigned'\"\r\n                    class=\"btn btn-outline-danger btn-sm\"\r\n                    @click=\"closeRequest(request)\"\r\n                  >\r\n                    <i class=\"fas fa-times me-1\"></i>\r\n                    Cancel\r\n                  </button>\r\n                  <button\r\n                    v-if=\"request.status === 'pending'\"\r\n                    class=\"btn btn-outline-primary btn-sm\"\r\n                    @click=\"editRequest(request)\"\r\n                  >\r\n                    <i class=\"fas fa-edit me-1\"></i>\r\n                    Edit\r\n                  </button>\r\n                  <button\r\n                    v-if=\"request.status === 'completed' && !request.has_review\"\r\n                    class=\"btn btn-outline-success btn-sm\"\r\n                    @click=\"addReview(request)\"\r\n                  >\r\n                    <i class=\"fas fa-star me-1\"></i>\r\n                    Review\r\n                  </button>\r\n                  <button\r\n                    class=\"btn btn-outline-secondary btn-sm\"\r\n                    @click=\"viewRequestDetails(request)\"\r\n                  >\r\n                    <i class=\"fas fa-eye me-1\"></i>\r\n                    Details\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Service Details Modal -->\r\n    <div class=\"modal fade\" :class=\"{ show: showServiceModal }\" v-if=\"showServiceModal\">\r\n      <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\">Service Details</h5>\r\n            <button type=\"button\" class=\"btn-close\" @click=\"showServiceModal = false\"></button>\r\n          </div>\r\n          <div class=\"modal-body\" v-if=\"selectedService\">\r\n            <div class=\"service-details\">\r\n              <h4>{{ selectedService.name }}</h4>\r\n              <div class=\"d-flex justify-content-between mb-3\">\r\n                <span class=\"badge bg-primary fs-5\">₹{{ selectedService.base_price }}</span>\r\n                <span class=\"text-muted\"><i class=\"far fa-clock me-2\"></i>{{ selectedService.time_required }} minutes</span>\r\n              </div>\r\n              <p>{{ selectedService.description }}</p>\r\n              <div class=\"mb-3\">\r\n                <strong>Category:</strong> {{ selectedService.category }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" @click=\"showServiceModal = false\">Close</button>\r\n            <button type=\"button\" class=\"btn btn-primary\" @click=\"requestSelectedService\">\r\n              <i class=\"fas fa-plus me-1\"></i> Request Service\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- New Service Request Modal -->\r\n    <div class=\"modal fade\" :class=\"{ show: showNewRequestModal }\" v-if=\"showNewRequestModal\">\r\n      <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\">New Service Request</h5>\r\n            <button type=\"button\" class=\"btn-close\" @click=\"showNewRequestModal = false\"></button>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            <form @submit.prevent=\"createRequest\">\r\n              <div class=\"mb-3\">\r\n                <label for=\"serviceCategory\" class=\"form-label\">Service Category</label>\r\n                <select id=\"serviceCategory\" name=\"serviceCategory\" class=\"form-select\" v-model=\"newRequest.category\">\r\n                  <option value=\"\">Select Category</option>\r\n                  <option v-for=\"category in categories\" :key=\"category\" :value=\"category\">\r\n                    {{ category }}\r\n                  </option>\r\n                </select>\r\n              </div>\r\n\r\n              <div class=\"mb-3\">\r\n                <label for=\"pinCode\" class=\"form-label\">PIN Code</label>\r\n                <input\r\n                  id=\"pinCode\"\r\n                  name=\"pinCode\"\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  v-model=\"newRequest.pin_code\"\r\n                  required\r\n                  pattern=\"[0-9]{6}\"\r\n                  placeholder=\"Enter 6-digit PIN code\"\r\n                >\r\n              </div>\r\n\r\n              <div class=\"mb-3\">\r\n                <label for=\"specialInstructions\" class=\"form-label\">Special Instructions</label>\r\n                <textarea\r\n                  id=\"specialInstructions\"\r\n                  name=\"specialInstructions\"\r\n                  class=\"form-control\"\r\n                  v-model=\"newRequest.special_instructions\"\r\n                  rows=\"3\"\r\n                  placeholder=\"Any specific requirements or details...\"\r\n                ></textarea>\r\n              </div>\r\n              \r\n              <div class=\"text-end\">\r\n                <button type=\"button\" class=\"btn btn-secondary me-2\" @click=\"showNewRequestModal = false\">\r\n                  Cancel\r\n                </button>\r\n                <button type=\"submit\" class=\"btn btn-primary\" :disabled=\"isLoading\">\r\n                  <span v-if=\"isLoading\" class=\"spinner-border spinner-border-sm me-2\"></span>\r\n                  Create Request\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Enhanced Review Modal -->\r\n    <div class=\"modal fade\" :class=\"{ show: showReviewModal }\" v-if=\"showReviewModal\">\r\n      <div class=\"modal-dialog\">\r\n        <div class=\"modal-content\">\r\n          <ServiceReviewForm\r\n            :requestId=\"selectedRequest?.id\"\r\n            :serviceName=\"selectedRequest?.service?.name\"\r\n            :serviceDate=\"selectedRequest?.completed_at\"\r\n            :professionalName=\"selectedRequest?.professional?.professional_name\"\r\n            @close=\"showReviewModal = false\"\r\n            @submitted=\"handleReviewSubmitted\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Enhanced Request Details Modal -->\r\n    <div class=\"modal fade\" :class=\"{ show: showRequestDetailsModal }\" v-if=\"showRequestDetailsModal\">\r\n      <div class=\"modal-dialog modal-lg\">\r\n        <div class=\"modal-content\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\">Request Details</h5>\r\n            <button type=\"button\" class=\"btn-close\" @click=\"showRequestDetailsModal = false\"></button>\r\n          </div>\r\n          <div class=\"modal-body\" v-if=\"selectedRequest\">\r\n            <div class=\"row mb-4\">\r\n              <div class=\"col-md-6\">\r\n                <h5>{{ selectedRequest.service?.name }}</h5>\r\n                <div :class=\"getStatusBadgeClass(selectedRequest.status)\" class=\"mb-2 badge-lg\">\r\n                  {{ selectedRequest.status }}\r\n                </div>\r\n                <p class=\"text-muted\">\r\n                  <i class=\"fas fa-map-marker-alt me-2\"></i>\r\n                  PIN Code: {{ selectedRequest.pin_code }}\r\n                </p>\r\n                <p v-if=\"selectedRequest.final_amount\" class=\"badge bg-success\">\r\n                  Final Amount: ₹{{ selectedRequest.final_amount }}\r\n                </p>\r\n              </div>\r\n              <div class=\"col-md-6 text-md-end\">\r\n                <p class=\"mb-1\"><strong>Requested:</strong> {{ formatDate(selectedRequest.created_at) }}</p>\r\n                <p v-if=\"selectedRequest.accepted_at\" class=\"mb-1\">\r\n                  <strong>Accepted:</strong> {{ formatDate(selectedRequest.accepted_at) }}\r\n                </p>\r\n                <p v-if=\"selectedRequest.completed_at\" class=\"mb-1\">\r\n                  <strong>Completed:</strong> {{ formatDate(selectedRequest.completed_at) }}\r\n                </p>\r\n                <p v-if=\"selectedRequest.closed_at\" class=\"mb-1\">\r\n                  <strong>Closed:</strong> {{ formatDate(selectedRequest.closed_at) }}\r\n                </p>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Service Request Timeline -->\r\n            <div class=\"service-timeline mb-4\">\r\n              <h6>Service Timeline</h6>\r\n              <div class=\"timeline\">\r\n                <div class=\"timeline-item\">\r\n                  <div class=\"timeline-marker bg-success\"></div>\r\n                  <div class=\"timeline-content\">\r\n                    <p class=\"mb-0\"><strong>Request Created</strong></p>\r\n                    <p class=\"text-muted small mb-0\">{{ formatDate(selectedRequest.created_at) }}</p>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div v-if=\"selectedRequest.accepted_at\" class=\"timeline-item\">\r\n                  <div class=\"timeline-marker bg-primary\"></div>\r\n                  <div class=\"timeline-content\">\r\n                    <p class=\"mb-0\"><strong>Professional Assigned</strong></p>\r\n                    <p class=\"text-muted small mb-0\">{{ formatDate(selectedRequest.accepted_at) }}</p>\r\n                    <p v-if=\"selectedRequest.professional\" class=\"small mb-0\">\r\n                      {{ selectedRequest.professional.professional_name }} was assigned to your request\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div v-if=\"selectedRequest.completed_at\" class=\"timeline-item\">\r\n                  <div class=\"timeline-marker bg-info\"></div>\r\n                  <div class=\"timeline-content\">\r\n                    <p class=\"mb-0\"><strong>Service Completed</strong></p>\r\n                    <p class=\"text-muted small mb-0\">{{ formatDate(selectedRequest.completed_at) }}</p>\r\n                    <p v-if=\"selectedRequest.final_amount\" class=\"small mb-0\">\r\n                      Service completed with final amount: ₹{{ selectedRequest.final_amount }}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div v-if=\"selectedRequest.closed_at\" class=\"timeline-item\">\r\n                  <div class=\"timeline-marker bg-secondary\"></div>\r\n                  <div class=\"timeline-content\">\r\n                    <p class=\"mb-0\"><strong>Request Closed</strong></p>\r\n                    <p class=\"text-muted small mb-0\">{{ formatDate(selectedRequest.closed_at) }}</p>\r\n                  </div>\r\n                </div>\r\n                \r\n                <div v-if=\"selectedRequest.has_review\" class=\"timeline-item\">\r\n                  <div class=\"timeline-marker bg-warning\"></div>\r\n                  <div class=\"timeline-content\">\r\n                    <p class=\"mb-0\"><strong>Review Submitted</strong></p>\r\n                    <div v-if=\"selectedRequest.review\" class=\"mt-1\">\r\n                      <div class=\"star-rating small\">\r\n                        <i v-for=\"n in 5\" :key=\"n\" \r\n                          class=\"fas fa-star\" \r\n                          :class=\"n <= selectedRequest.review.rating ? 'text-warning' : 'text-muted'\"></i>\r\n                      </div>\r\n                      <p class=\"small mt-1 mb-0\">{{ selectedRequest.review.remarks }}</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Special Instructions -->\r\n            <div class=\"mb-4\">\r\n              <h6>Special Instructions</h6>\r\n              <p class=\"p-3 bg-light rounded\">{{ selectedRequest.special_instructions || 'No special instructions provided.' }}</p>\r\n            </div>\r\n\r\n            <!-- Professional Details -->\r\n            <div v-if=\"selectedRequest.professional\" class=\"mb-4\">\r\n              <h6>Professional Details</h6>\r\n              <div class=\"card\">\r\n                <div class=\"card-body\">\r\n                  <h5 class=\"card-title\">{{ selectedRequest.professional.professional_name }}</h5>\r\n                  <p class=\"text-muted mb-1\">\r\n                    <strong>Service Type:</strong> {{ selectedRequest.professional.service_type }}</p>\r\n                  <p class=\"text-muted mb-0\">\r\n                    <strong>Experience:</strong> {{ selectedRequest.professional.experience }} years</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <!-- Action Buttons -->\r\n            <div class=\"d-flex justify-content-end gap-2 mt-4\">\r\n              <button \r\n                v-if=\"selectedRequest.status === 'pending' || selectedRequest.status === 'assigned'\"\r\n                class=\"btn btn-danger\" \r\n                @click=\"closeRequest(selectedRequest, true)\">\r\n                <i class=\"fas fa-times me-1\"></i> Cancel Request\r\n              </button>\r\n              <button \r\n                v-if=\"selectedRequest.status === 'completed' && !selectedRequest.has_review\"\r\n                class=\"btn btn-warning\" \r\n                @click=\"addReview(selectedRequest)\">\r\n                <i class=\"fas fa-star me-1\"></i> Review Service\r\n              </button>\r\n              <button \r\n                class=\"btn btn-secondary\" \r\n                @click=\"showRequestDetailsModal = false\">\r\n                Close\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      userName: 'John Doe',\r\n      activeSection: 'browse',\r\n      activeTab: 'active',\r\n      showServiceModal: false,\r\n      showNewRequestModal: false,\r\n      showReviewModal: false,\r\n      showRequestDetailsModal: false,\r\n      selectedService: null,\r\n      selectedRequest: null,\r\n      searchQuery: {\r\n        name: '',\r\n        category: '',\r\n        pinCode: ''\r\n      },\r\n      services: [],\r\n      categories: [],\r\n      serviceRequests: [],\r\n      loading: false,\r\n      error: null,\r\n      newRequest: {\r\n        service_id: '',\r\n        pin_code: '',\r\n        special_instructions: '',\r\n        category: ''\r\n      },\r\n      isLoading: false,\r\n      review: {\r\n        rating: 0,\r\n        remarks: ''\r\n      },\r\n      page: 1,\r\n      hasMoreServices: true\r\n    };\r\n  },\r\n  computed: {\r\n    filteredRequests() {\r\n      return this.serviceRequests.filter(request => {\r\n        if (this.activeTab === 'active') {\r\n          return ['pending', 'assigned', 'in_progress'].includes(request.status)\r\n        } else {\r\n          return ['completed', 'closed'].includes(request.status)\r\n        }\r\n      })\r\n    },\r\n    filteredServices() {\r\n      if (!this.services.length) return [];\r\n      \r\n      return this.services.filter(service => {\r\n        // Filter by name\r\n        if (this.searchQuery.name && !service.name.toLowerCase().includes(this.searchQuery.name.toLowerCase())) {\r\n          return false;\r\n        }\r\n        \r\n        // Filter by category\r\n        if (this.searchQuery.category && service.category !== this.searchQuery.category) {\r\n          return false;\r\n        }\r\n        \r\n        // Filter by PIN code if implemented\r\n        if (this.searchQuery.pinCode && service.available_pin_codes) {\r\n          if (!service.available_pin_codes.includes(this.searchQuery.pinCode)) {\r\n            return false;\r\n          }\r\n        }\r\n        \r\n        return true;\r\n      });\r\n    }\r\n  },\r\n  methods: {\r\n    async fetchServices() {\r\n      try {\r\n        this.loading = true;\r\n        console.log('CustomerDashboard: Fetching services...');\r\n        const response = await serviceAPI.getServices();\r\n        console.log(`CustomerDashboard: Received ${response.length} services`);\r\n        this.services = response;\r\n        this.loading = false;\r\n      } catch (error) {\r\n        console.error('CustomerDashboard: Error fetching services:', error);\r\n        this.error = 'Failed to load services. Please try again.';\r\n        this.loading = false;\r\n        \r\n        // Retry after a delay in case of network issues\r\n        setTimeout(() => {\r\n          if (this.services.length === 0) {\r\n            console.log('Retrying service fetch...');\r\n            this.fetchServices();\r\n          }\r\n        }, 3000);\r\n      }\r\n    },\r\n    async fetchServiceTypes() {\r\n      try {\r\n        this.loading = true;\r\n        console.log('Fetching service categories from database...');\r\n        const response = await serviceAPI.getServiceTypes();\r\n        if (response && Array.isArray(response) && response.length > 0) {\r\n          this.categories = response;\r\n          console.log(`Received ${this.categories.length} service categories`);\r\n        } else {\r\n          console.warn('No service categories returned from API, using defaults');\r\n          // Fallback to defaults if API returns empty array\r\n          this.categories = [\r\n            'AC Repair', 'Plumbing', 'Electrical', 'Carpentry', 'Painting',\r\n            'Cleaning', 'Pest Control', 'Appliance Repair', 'Moving Services', 'Gardening'\r\n          ];\r\n        }\r\n        this.loading = false;\r\n      } catch (error) {\r\n        console.error('Error fetching service categories:', error);\r\n        // Fallback to defaults on error\r\n        this.categories = [\r\n          'AC Repair', 'Plumbing', 'Electrical', 'Carpentry', 'Painting',\r\n          'Cleaning', 'Pest Control', 'Appliance Repair', 'Moving Services', 'Gardening'\r\n        ];\r\n        this.loading = false;\r\n      }\r\n    },\r\n    async fetchRequests() {\r\n      try {\r\n        this.loading = true;\r\n        const response = await customerAPI.getRequests();\r\n        this.serviceRequests = response;\r\n        this.loading = false;\r\n      } catch (error) {\r\n        console.error('Error fetching requests:', error);\r\n        this.error = 'Failed to load service requests. Please try again.';\r\n        this.loading = false;\r\n      }\r\n    },\r\n    async searchServices() {\r\n      // You can implement additional search logic here if needed\r\n      // For now, we'll just use the computed filteredServices property\r\n    },\r\n    async createRequest() {\r\n      this.isLoading = true;\r\n      try {\r\n        // Validate that we have either service_id or category\r\n        if (!this.newRequest.service_id && !this.newRequest.category) {\r\n          throw new Error(\"Please select a service category\");\r\n        }\r\n        \r\n        // Ensure pin_code is valid\r\n        if (!this.newRequest.pin_code || !/^\\d{6}$/.test(this.newRequest.pin_code)) {\r\n          throw new Error(\"Please enter a valid 6-digit PIN code\");\r\n        }\r\n        \r\n        console.log('Submitting request with data:', this.newRequest);\r\n        \r\n        try {\r\n          const response = await customerAPI.createRequest(this.newRequest);\r\n          this.showNewRequestModal = false;\r\n          this.newRequest = { service_id: '', pin_code: '', special_instructions: '', category: '' };\r\n          this.activeSection = 'requests'; // Switch to requests tab\r\n          await this.fetchRequests();\r\n          alert('Service request created successfully!');\r\n        } catch (apiError) {\r\n          // Show more friendly error message with details from the backend\r\n          if (apiError.message.includes('No service found in category')) {\r\n            throw new Error(`We currently don't have service professionals for ${this.newRequest.category}. Please try a different category.`);\r\n          } else {\r\n            throw apiError;\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error creating request:', error);\r\n        alert('Failed to create service request: ' + (error.message || 'Unknown error'));\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    },\r\n    async closeRequest(request, fromModal = false) {\r\n      if (confirm('Are you sure you want to cancel this request?')) {\r\n        try {\r\n          this.isLoading = true;\r\n          await customerAPI.closeRequest(request.id);\r\n          await this.fetchRequests();\r\n          if (fromModal) {\r\n            this.showRequestDetailsModal = false;\r\n          }\r\n          alert('Request cancelled successfully.');\r\n        } catch (error) {\r\n          console.error('Error closing request:', error);\r\n          alert('Failed to cancel request: ' + (error.message || 'Unknown error'));\r\n        } finally {\r\n          this.isLoading = false;\r\n        }\r\n      }\r\n    },\r\n    editRequest(request) {\r\n      // Implement edit functionality (e.g., populate form with current values)\r\n      this.newRequest = {\r\n        service_id: request.service_id,\r\n        pin_code: request.pin_code,\r\n        special_instructions: request.special_instructions || '',\r\n        category: request.category || ''\r\n      };\r\n      this.showNewRequestModal = true;\r\n    },\r\n    addReview(request) {\r\n      this.selectedRequest = request;\r\n      this.review = { rating: 0, remarks: '' };\r\n      this.showReviewModal = true;\r\n      if (this.showRequestDetailsModal) {\r\n        this.showRequestDetailsModal = false;\r\n      }\r\n    },\r\n    async submitReview() {\r\n      try {\r\n        this.isLoading = true;\r\n        await customerAPI.addReview(this.selectedRequest.id, this.review);\r\n        this.showReviewModal = false;\r\n        this.review = { rating: 0, remarks: '' };\r\n        await this.fetchRequests();\r\n        alert('Review submitted successfully.');\r\n      } catch (error) {\r\n        console.error('Error submitting review:', error);\r\n        alert('Failed to submit review: ' + (error.message || 'Unknown error'));\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    },\r\n    \r\n    selectService(service) {\r\n      this.selectedService = service;\r\n      this.showServiceModal = true;\r\n    },\r\n    \r\n    requestSelectedService() {\r\n      this.newRequest.service_id = this.selectedService.id;\r\n      this.showServiceModal = false;\r\n      this.showNewRequestModal = true;\r\n    },\r\n    \r\n    viewRequestDetails(request) {\r\n      this.selectedRequest = request;\r\n      this.showRequestDetailsModal = true;\r\n    },\r\n    \r\n    formatDate(dateString, short = false) {\r\n      if (!dateString) return 'N/A';\r\n      const date = new Date(dateString);\r\n      \r\n      if (short) {\r\n        return date.toLocaleDateString('en-US', {\r\n          month: 'short',\r\n          day: 'numeric'\r\n        });\r\n      }\r\n      \r\n      return date.toLocaleString('en-US', {\r\n        year: 'numeric',\r\n        month: 'short',\r\n        day: 'numeric',\r\n        hour: '2-digit',\r\n        minute: '2-digit'\r\n      });\r\n    },\r\n    \r\n    getStatusBadgeClass(status) {\r\n      const classes = {\r\n        pending: 'badge bg-warning',\r\n        assigned: 'badge bg-info',\r\n        in_progress: 'badge bg-primary',\r\n        completed: 'badge bg-success',\r\n        closed: 'badge bg-secondary',\r\n        cancelled: 'badge bg-danger'\r\n      };\r\n      return classes[status] || 'badge bg-secondary';\r\n    },\r\n    // Enhanced search method using the new search panel\r\n    handleSearch(params) {\r\n      this.searchQuery = { ...params };\r\n      this.page = 1;\r\n      this.fetchServices();\r\n    },\r\n    \r\n    // Method to directly request a service from the service list\r\n    directRequestService(service) {\r\n      this.selectedService = service;\r\n      this.showNewRequestModal = true;\r\n      \r\n      // Pre-populate the request form with the selected service\r\n      this.newRequest.service_id = service.id;\r\n    },\r\n    \r\n    // Load more services for pagination\r\n    loadMoreServices() {\r\n      this.page += 1;\r\n      this.fetchMoreServices();\r\n    },\r\n    \r\n    // Handle review submission\r\n    handleReviewSubmitted() {\r\n      this.showReviewModal = false;\r\n      this.fetchRequests();\r\n      alert('Thank you for your review!');\r\n    },\r\n    \r\n    // Handle request updated\r\n    handleRequestUpdated() {\r\n      this.fetchRequests();\r\n    },\r\n    \r\n    getActiveCount() {\r\n      return this.serviceRequests.filter(request => \r\n        ['pending', 'assigned', 'in_progress'].includes(request.status)\r\n      ).length;\r\n    },\r\n    \r\n    getCompletedCount() {\r\n      return this.serviceRequests.filter(request => \r\n        ['completed', 'closed'].includes(request.status)\r\n      ).length;\r\n    }\r\n  },\r\n  async created() {\r\n    await Promise.all([\r\n      this.fetchServices(),\r\n      // fetchServiceTypes will just use the hardcoded categories now\r\n      this.fetchServiceTypes(),\r\n      this.fetchRequests()\r\n    ]);\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.customer-dashboard {\r\n  background-color: #f8f9fa;\r\n  min-height: 100vh;\r\n}\r\n\r\n.service-card {\r\n  transition: transform 0.2s, box-shadow 0.2s;\r\n}\r\n\r\n.service-card:hover {\r\n  transform: translateY(-5px);\r\n  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);\r\n}\r\n\r\n.nav-pills .nav-link,\r\n.nav-tabs .nav-link {\r\n  cursor: pointer;\r\n}\r\n\r\n.modal.show {\r\n  display: block;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n}\r\n\r\n.star-rating {\r\n  display: flex;\r\n  gap: 5px;\r\n}\r\n\r\n.star-rating i {\r\n  cursor: pointer;\r\n  color: #e0e0e0;\r\n}\r\n\r\n.star-rating i.active {\r\n  color: #ffc107;\r\n}\r\n\r\n/* Enhanced timeline and status styles */\r\n.badge-lg {\r\n  font-size: 1rem;\r\n  padding: 0.5rem 0.75rem;\r\n}\r\n\r\n.service-progress {\r\n  position: relative;\r\n  margin: 15px 0;\r\n}\r\n\r\n.status-track {\r\n  position: relative;\r\n  height: 40px;\r\n}\r\n\r\n.status-track:before {\r\n  content: '';\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 10px;\r\n  right: 10px;\r\n  height: 2px;\r\n  background-color: #e9ecef;\r\n  z-index: 1;\r\n}\r\n\r\n.status-point {\r\n  position: relative;\r\n  z-index: 2;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  color: #adb5bd;\r\n}\r\n\r\n.status-point i {\r\n  background-color: white;\r\n  border-radius: 50%;\r\n  padding: 5px;\r\n  font-size: 1rem;\r\n}\r\n\r\n.status-point span {\r\n  font-size: 0.65rem;\r\n  margin-top: 4px;\r\n}\r\n\r\n.status-point.active {\r\n  color: #0d6efd;\r\n}\r\n\r\n.status-point.active i {\r\n  color: #0d6efd;\r\n}\r\n\r\n.timeline {\r\n  position: relative;\r\n  padding-left: 40px;\r\n}\r\n\r\n.timeline-item {\r\n  position: relative;\r\n  padding-bottom: 25px;\r\n}\r\n\r\n.timeline-marker {\r\n  position: absolute;\r\n  left: -20px;\r\n  top: 0;\r\n  width: 16px;\r\n  height: 16px;\r\n  border-radius: 50%;\r\n}\r\n\r\n.timeline:before {\r\n  content: '';\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: -12px;\r\n  width: 2px;\r\n  background-color: #e9ecef;\r\n}\r\n\r\n.timeline-content {\r\n  background-color: #f8f9fa;\r\n  padding: 10px 15px;\r\n  border-radius: 5px;\r\n}\r\n\r\n.card-header .badge {\r\n  font-size: 0.85rem;\r\n  padding: 0.35rem 0.65rem;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}